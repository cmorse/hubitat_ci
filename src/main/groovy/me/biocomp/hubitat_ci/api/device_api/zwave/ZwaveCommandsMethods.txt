Platform version: 2.2.6.137
class hubitat.zwave.commands.alarmv1.AlarmGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAlarmType()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setAlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.alarmv1.AlarmGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAlarmType()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setAlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.alarmv1.AlarmReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAlarmLevel()
  public Short getAlarmType()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setAlarmLevel(Short)
  public void setAlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.alarmv1.AlarmReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAlarmLevel()
  public Short getAlarmType()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setAlarmLevel(Short)
  public void setAlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.alarmv2.AlarmGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAlarmType()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short ZWAVE_ALARM_TYPE_ACCESS_CONTROL = 6
  public static Short ZWAVE_ALARM_TYPE_BURGLAR = 7
  public static Short ZWAVE_ALARM_TYPE_CLOCK = 11
  public static Short ZWAVE_ALARM_TYPE_CO = 2
  public static Short ZWAVE_ALARM_TYPE_CO2 = 3
  public static Short ZWAVE_ALARM_TYPE_EMERGENCY = 10
  public static Short ZWAVE_ALARM_TYPE_FIRST = 255
  public static Short ZWAVE_ALARM_TYPE_HEAT = 4
  public static Short ZWAVE_ALARM_TYPE_POWER_MANAGEMENT = 8
  public static Short ZWAVE_ALARM_TYPE_RESERVED0 = 0
  public static Short ZWAVE_ALARM_TYPE_SMOKE = 1
  public static Short ZWAVE_ALARM_TYPE_SYSTEM = 9
  public static Short ZWAVE_ALARM_TYPE_WATER = 5
  public Short getZwaveAlarmType()
  public void setAlarmType(Short)
  public void setZwaveAlarmType(Short)
  public List hubitat.zwave.commands.alarmv1.AlarmGet.super$2$getPayload()
  public Short super$3$getAlarmType()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public void super$3$setAlarmType(Short)
]
class hubitat.zwave.commands.alarmv2.AlarmGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAlarmType()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short ZWAVE_ALARM_TYPE_ACCESS_CONTROL = 6
  public static Short ZWAVE_ALARM_TYPE_BURGLAR = 7
  public static Short ZWAVE_ALARM_TYPE_CLOCK = 11
  public static Short ZWAVE_ALARM_TYPE_CO = 2
  public static Short ZWAVE_ALARM_TYPE_CO2 = 3
  public static Short ZWAVE_ALARM_TYPE_EMERGENCY = 10
  public static Short ZWAVE_ALARM_TYPE_FIRST = 255
  public static Short ZWAVE_ALARM_TYPE_HEAT = 4
  public static Short ZWAVE_ALARM_TYPE_POWER_MANAGEMENT = 8
  public static Short ZWAVE_ALARM_TYPE_RESERVED0 = 0
  public static Short ZWAVE_ALARM_TYPE_SMOKE = 1
  public static Short ZWAVE_ALARM_TYPE_SYSTEM = 9
  public static Short ZWAVE_ALARM_TYPE_WATER = 5
  public Short getZwaveAlarmType()
  public void setAlarmType(Short)
  public void setZwaveAlarmType(Short)
  public List hubitat.zwave.commands.alarmv1.AlarmGet.super$2$getPayload()
  public Short super$3$getAlarmType()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public void super$3$setAlarmType(Short)
]
class hubitat.zwave.commands.alarmv2.AlarmReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAlarmLevel()
  public Short getAlarmType()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getEventParameter()
  public Short getNumberOfEventParameters()
  public List getPayload()
  public static Short ZWAVE_ALARM_TYPE_ACCESS_CONTROL = 6
  public static Short ZWAVE_ALARM_TYPE_BURGLAR = 7
  public static Short ZWAVE_ALARM_TYPE_CLOCK = 11
  public static Short ZWAVE_ALARM_TYPE_CO = 2
  public static Short ZWAVE_ALARM_TYPE_CO2 = 3
  public static Short ZWAVE_ALARM_TYPE_EMERGENCY = 10
  public static Short ZWAVE_ALARM_TYPE_FIRST = 255
  public static Short ZWAVE_ALARM_TYPE_HEAT = 4
  public static Short ZWAVE_ALARM_TYPE_POWER_MANAGEMENT = 8
  public static Short ZWAVE_ALARM_TYPE_RESERVED0 = 0
  public static Short ZWAVE_ALARM_TYPE_SMOKE = 1
  public static Short ZWAVE_ALARM_TYPE_SYSTEM = 9
  public static Short ZWAVE_ALARM_TYPE_WATER = 5
  public Short getZensorNetSourceNodeId()
  public Short getZwaveAlarmEvent()
  public Short getZwaveAlarmStatus()
  public Short getZwaveAlarmType()
  public void setAlarmLevel(Short)
  public void setAlarmType(Short)
  public void setEventParameter(List)
  public void setNumberOfEventParameters(Short)
  public void setZensorNetSourceNodeId(Short)
  public void setZwaveAlarmEvent(Short)
  public void setZwaveAlarmStatus(Short)
  public void setZwaveAlarmType(Short)
  public List hubitat.zwave.commands.alarmv1.AlarmReport.super$2$getPayload()
  public Short super$3$getAlarmLevel()
  public Short super$3$getAlarmType()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public void super$3$setAlarmLevel(Short)
  public void super$3$setAlarmType(Short)
]
class hubitat.zwave.commands.alarmv2.AlarmReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAlarmLevel()
  public Short getAlarmType()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getEventParameter()
  public Short getNumberOfEventParameters()
  public List getPayload()
  public static Short ZWAVE_ALARM_TYPE_ACCESS_CONTROL = 6
  public static Short ZWAVE_ALARM_TYPE_BURGLAR = 7
  public static Short ZWAVE_ALARM_TYPE_CLOCK = 11
  public static Short ZWAVE_ALARM_TYPE_CO = 2
  public static Short ZWAVE_ALARM_TYPE_CO2 = 3
  public static Short ZWAVE_ALARM_TYPE_EMERGENCY = 10
  public static Short ZWAVE_ALARM_TYPE_FIRST = 255
  public static Short ZWAVE_ALARM_TYPE_HEAT = 4
  public static Short ZWAVE_ALARM_TYPE_POWER_MANAGEMENT = 8
  public static Short ZWAVE_ALARM_TYPE_RESERVED0 = 0
  public static Short ZWAVE_ALARM_TYPE_SMOKE = 1
  public static Short ZWAVE_ALARM_TYPE_SYSTEM = 9
  public static Short ZWAVE_ALARM_TYPE_WATER = 5
  public Short getZensorNetSourceNodeId()
  public Short getZwaveAlarmEvent()
  public Short getZwaveAlarmStatus()
  public Short getZwaveAlarmType()
  public void setAlarmLevel(Short)
  public void setAlarmType(Short)
  public void setEventParameter(List)
  public void setNumberOfEventParameters(Short)
  public void setZensorNetSourceNodeId(Short)
  public void setZwaveAlarmEvent(Short)
  public void setZwaveAlarmStatus(Short)
  public void setZwaveAlarmType(Short)
  public List hubitat.zwave.commands.alarmv1.AlarmReport.super$2$getPayload()
  public Short super$3$getAlarmLevel()
  public Short super$3$getAlarmType()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public void super$3$setAlarmLevel(Short)
  public void super$3$setAlarmType(Short)
]
class hubitat.zwave.commands.alarmv2.AlarmSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short ZWAVE_ALARM_TYPE_ACCESS_CONTROL = 6
  public static Short ZWAVE_ALARM_TYPE_BURGLAR = 7
  public static Short ZWAVE_ALARM_TYPE_CLOCK = 11
  public static Short ZWAVE_ALARM_TYPE_CO = 2
  public static Short ZWAVE_ALARM_TYPE_CO2 = 3
  public static Short ZWAVE_ALARM_TYPE_EMERGENCY = 10
  public static Short ZWAVE_ALARM_TYPE_FIRST = 255
  public static Short ZWAVE_ALARM_TYPE_HEAT = 4
  public static Short ZWAVE_ALARM_TYPE_POWER_MANAGEMENT = 8
  public static Short ZWAVE_ALARM_TYPE_RESERVED0 = 0
  public static Short ZWAVE_ALARM_TYPE_SMOKE = 1
  public static Short ZWAVE_ALARM_TYPE_SYSTEM = 9
  public static Short ZWAVE_ALARM_TYPE_WATER = 5
  public Short getZwaveAlarmStatus()
  public Short getZwaveAlarmType()
  public void setZwaveAlarmStatus(Short)
  public void setZwaveAlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.alarmv2.AlarmSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short ZWAVE_ALARM_TYPE_ACCESS_CONTROL = 6
  public static Short ZWAVE_ALARM_TYPE_BURGLAR = 7
  public static Short ZWAVE_ALARM_TYPE_CLOCK = 11
  public static Short ZWAVE_ALARM_TYPE_CO = 2
  public static Short ZWAVE_ALARM_TYPE_CO2 = 3
  public static Short ZWAVE_ALARM_TYPE_EMERGENCY = 10
  public static Short ZWAVE_ALARM_TYPE_FIRST = 255
  public static Short ZWAVE_ALARM_TYPE_HEAT = 4
  public static Short ZWAVE_ALARM_TYPE_POWER_MANAGEMENT = 8
  public static Short ZWAVE_ALARM_TYPE_RESERVED0 = 0
  public static Short ZWAVE_ALARM_TYPE_SMOKE = 1
  public static Short ZWAVE_ALARM_TYPE_SYSTEM = 9
  public static Short ZWAVE_ALARM_TYPE_WATER = 5
  public Short getZwaveAlarmStatus()
  public Short getZwaveAlarmType()
  public void setZwaveAlarmStatus(Short)
  public void setZwaveAlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.alarmv2.AlarmTypeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.alarmv2.AlarmTypeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.alarmv2.AlarmTypeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getBurglar()
  public String getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getHeat()
  public Short getNumberOfBitMasks()
  public List getPayload()
  public Boolean getPowerManagement()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getV1Alarm()
  public Boolean getWater()
  public void setAccessControl(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setHeat(Boolean)
  public void setNumberOfBitMasks(Short)
  public void setPowerManagement(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setV1Alarm(Boolean)
  public void setWater(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.alarmv2.AlarmTypeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getBurglar()
  public String getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getHeat()
  public Short getNumberOfBitMasks()
  public List getPayload()
  public Boolean getPowerManagement()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getV1Alarm()
  public Boolean getWater()
  public void setAccessControl(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setHeat(Boolean)
  public void setNumberOfBitMasks(Short)
  public void setPowerManagement(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setV1Alarm(Boolean)
  public void setWater(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftunlockv1.AntitheftUnlockSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMagicCode()
  public Short getMagicCodeLength()
  public List getPayload()
  public void setMagicCode(List)
  public void setMagicCodeLength(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftunlockv1.AntitheftUnlockSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMagicCode()
  public Short getMagicCodeLength()
  public List getPayload()
  public void setMagicCode(List)
  public void setMagicCodeLength(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftunlockv1.AntitheftUnlockStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftunlockv1.AntitheftUnlockStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftunlockv1.AntitheftUnlockStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getAntitheftHint()
  public Short getAntitheftHintLength()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getManufacturerID()
  public List getPayload()
  public Boolean getRestricted()
  public Boolean getState()
  public Integer getZwaveAllianceLockingEntityID()
  public void setAntitheftHint(List)
  public void setAntitheftHintLength(Short)
  public void setManufacturerID(Integer)
  public void setRestricted(Boolean)
  public void setState(Boolean)
  public void setZwaveAllianceLockingEntityID(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftunlockv1.AntitheftUnlockStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getAntitheftHint()
  public Short getAntitheftHintLength()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getManufacturerID()
  public List getPayload()
  public Boolean getRestricted()
  public Boolean getState()
  public Integer getZwaveAllianceLockingEntityID()
  public void setAntitheftHint(List)
  public void setAntitheftHintLength(Short)
  public void setManufacturerID(Integer)
  public void setRestricted(Boolean)
  public void setState(Boolean)
  public void setZwaveAllianceLockingEntityID(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv1.AntitheftGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv1.AntitheftGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv1.AntitheftReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getAntitheftHintByte()
  public Short getAntitheftProtectionStatus()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getManufacturerID()
  public Short getNumberOfAntitheftHintBytes()
  public List getPayload()
  public void setAntitheftHintByte(List)
  public void setAntitheftProtectionStatus(Short)
  public void setManufacturerID(Integer)
  public void setNumberOfAntitheftHintBytes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv1.AntitheftReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getAntitheftHintByte()
  public Short getAntitheftProtectionStatus()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getManufacturerID()
  public Short getNumberOfAntitheftHintBytes()
  public List getPayload()
  public void setAntitheftHintByte(List)
  public void setAntitheftProtectionStatus(Short)
  public void setManufacturerID(Integer)
  public void setNumberOfAntitheftHintBytes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv1.AntitheftSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getAntitheftHintByte()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEnable()
  public List getMagicCode()
  public Integer getManufacturerID()
  public Short getNumberOfAntitheftHintBytes()
  public Short getNumberOfMagicCodeBytes()
  public List getPayload()
  public void setAntitheftHintByte(List)
  public void setEnable(Short)
  public void setMagicCode(List)
  public void setManufacturerID(Integer)
  public void setNumberOfAntitheftHintBytes(Short)
  public void setNumberOfMagicCodeBytes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv1.AntitheftSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getAntitheftHintByte()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEnable()
  public List getMagicCode()
  public Integer getManufacturerID()
  public Short getNumberOfAntitheftHintBytes()
  public Short getNumberOfMagicCodeBytes()
  public List getPayload()
  public void setAntitheftHintByte(List)
  public void setEnable(Short)
  public void setMagicCode(List)
  public void setManufacturerID(Integer)
  public void setNumberOfAntitheftHintBytes(Short)
  public void setNumberOfMagicCodeBytes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv2.AntitheftGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.antitheftv1.AntitheftGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.antitheftv1.AntitheftGet.getPayload()
  public List hubitat.zwave.commands.antitheftv1.AntitheftGet.super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv2.AntitheftGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.antitheftv1.AntitheftGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.antitheftv1.AntitheftGet.getPayload()
  public List hubitat.zwave.commands.antitheftv1.AntitheftGet.super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv2.AntitheftReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List hubitat.zwave.commands.antitheftv1.AntitheftReport.getAntitheftHintByte()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftReport.getAntitheftProtectionStatus()
  public String hubitat.zwave.commands.antitheftv1.AntitheftReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.antitheftv1.AntitheftReport.getManufacturerID()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftReport.getNumberOfAntitheftHintBytes()
  public List hubitat.zwave.commands.antitheftv1.AntitheftReport.getPayload()
  public static short STATUS_DISABLED = 1
  public static short STATUS_ENABLED = 2
  public static short STATUS_NOT_FULLY_ENABLED = 3
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setAntitheftHintByte(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setAntitheftProtectionStatus(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setManufacturerID(Integer)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setNumberOfAntitheftHintBytes(Short)
  public List hubitat.zwave.commands.antitheftv1.AntitheftReport.super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv2.AntitheftReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List hubitat.zwave.commands.antitheftv1.AntitheftReport.getAntitheftHintByte()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftReport.getAntitheftProtectionStatus()
  public String hubitat.zwave.commands.antitheftv1.AntitheftReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.antitheftv1.AntitheftReport.getManufacturerID()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftReport.getNumberOfAntitheftHintBytes()
  public List hubitat.zwave.commands.antitheftv1.AntitheftReport.getPayload()
  public static short STATUS_DISABLED = 1
  public static short STATUS_ENABLED = 2
  public static short STATUS_NOT_FULLY_ENABLED = 3
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setAntitheftHintByte(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setAntitheftProtectionStatus(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setManufacturerID(Integer)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setNumberOfAntitheftHintBytes(Short)
  public List hubitat.zwave.commands.antitheftv1.AntitheftReport.super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv2.AntitheftSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.getAntitheftHintByte()
  public String hubitat.zwave.commands.antitheftv1.AntitheftSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getEnable()
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.getMagicCode()
  public Integer hubitat.zwave.commands.antitheftv1.AntitheftSet.getManufacturerID()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getNumberOfAntitheftHintBytes()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getNumberOfMagicCodeBytes()
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.getPayload()
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setAntitheftHintByte(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setEnable(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setMagicCode(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setManufacturerID(Integer)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setNumberOfAntitheftHintBytes(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setNumberOfMagicCodeBytes(Short)
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv2.AntitheftSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.getAntitheftHintByte()
  public String hubitat.zwave.commands.antitheftv1.AntitheftSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getEnable()
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.getMagicCode()
  public Integer hubitat.zwave.commands.antitheftv1.AntitheftSet.getManufacturerID()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getNumberOfAntitheftHintBytes()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getNumberOfMagicCodeBytes()
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.getPayload()
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setAntitheftHintByte(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setEnable(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setMagicCode(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setManufacturerID(Integer)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setNumberOfAntitheftHintBytes(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setNumberOfMagicCodeBytes(Short)
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv3.AntitheftGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.antitheftv1.AntitheftGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.antitheftv1.AntitheftGet.getPayload()
  public List hubitat.zwave.commands.antitheftv1.AntitheftGet.super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv3.AntitheftGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.antitheftv1.AntitheftGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.antitheftv1.AntitheftGet.getPayload()
  public List hubitat.zwave.commands.antitheftv1.AntitheftGet.super$2$getPayload()
]
class hubitat.zwave.commands.antitheftv3.AntitheftReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List hubitat.zwave.commands.antitheftv1.AntitheftReport.getAntitheftHintByte()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftReport.getAntitheftProtectionStatus()
  public String hubitat.zwave.commands.antitheftv1.AntitheftReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.antitheftv1.AntitheftReport.getManufacturerID()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftReport.getNumberOfAntitheftHintBytes()
  public List getPayload()
  public static short STATUS_DISABLED = 1
  public static short STATUS_ENABLED = 2
  public static short STATUS_NOT_FULLY_ENABLED = 3
  public Integer getZwaveAllianceLockingEntityID()
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setAntitheftHintByte(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setAntitheftProtectionStatus(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setManufacturerID(Integer)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setNumberOfAntitheftHintBytes(Short)
  public void setZwaveAllianceLockingEntityID(Integer)
  public List hubitat.zwave.commands.antitheftv1.AntitheftReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.antitheftv3.AntitheftReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List hubitat.zwave.commands.antitheftv1.AntitheftReport.getAntitheftHintByte()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftReport.getAntitheftProtectionStatus()
  public String hubitat.zwave.commands.antitheftv1.AntitheftReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.antitheftv1.AntitheftReport.getManufacturerID()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftReport.getNumberOfAntitheftHintBytes()
  public List getPayload()
  public static short STATUS_DISABLED = 1
  public static short STATUS_ENABLED = 2
  public static short STATUS_NOT_FULLY_ENABLED = 3
  public Integer getZwaveAllianceLockingEntityID()
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setAntitheftHintByte(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setAntitheftProtectionStatus(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setManufacturerID(Integer)
  public void hubitat.zwave.commands.antitheftv1.AntitheftReport.setNumberOfAntitheftHintBytes(Short)
  public void setZwaveAllianceLockingEntityID(Integer)
  public List hubitat.zwave.commands.antitheftv1.AntitheftReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.antitheftv3.AntitheftSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.getAntitheftHintByte()
  public String hubitat.zwave.commands.antitheftv1.AntitheftSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getEnable()
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.getMagicCode()
  public Integer hubitat.zwave.commands.antitheftv1.AntitheftSet.getManufacturerID()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getNumberOfAntitheftHintBytes()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getNumberOfMagicCodeBytes()
  public List getPayload()
  public Integer getZwaveAllianceLockingEntityID()
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setAntitheftHintByte(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setEnable(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setMagicCode(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setManufacturerID(Integer)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setNumberOfAntitheftHintBytes(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setNumberOfMagicCodeBytes(Short)
  public void setZwaveAllianceLockingEntityID(Integer)
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.antitheftv3.AntitheftSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.getAntitheftHintByte()
  public String hubitat.zwave.commands.antitheftv1.AntitheftSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getEnable()
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.getMagicCode()
  public Integer hubitat.zwave.commands.antitheftv1.AntitheftSet.getManufacturerID()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getNumberOfAntitheftHintBytes()
  public Short hubitat.zwave.commands.antitheftv1.AntitheftSet.getNumberOfMagicCodeBytes()
  public List getPayload()
  public Integer getZwaveAllianceLockingEntityID()
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setAntitheftHintByte(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setEnable(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setMagicCode(List)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setManufacturerID(Integer)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setNumberOfAntitheftHintBytes(Short)
  public void hubitat.zwave.commands.antitheftv1.AntitheftSet.setNumberOfMagicCodeBytes(Short)
  public void setZwaveAllianceLockingEntityID(Integer)
  public List hubitat.zwave.commands.antitheftv1.AntitheftSet.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.applicationcapabilityv1.CommandCommandClassNotSupported:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamic()
  public Short getOffendingCommand()
  public Short getOffendingCommandClass()
  public List getPayload()
  public void setDynamic(Boolean)
  public void setOffendingCommand(Short)
  public void setOffendingCommandClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.applicationcapabilityv1.CommandCommandClassNotSupported:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamic()
  public Short getOffendingCommand()
  public Short getOffendingCommandClass()
  public List getPayload()
  public void setDynamic(Boolean)
  public void setOffendingCommand(Short)
  public void setOffendingCommandClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.applicationstatusv1.ApplicationBusy:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_REQUEST_QUEUED_EXECUTED_LATER = 2
  public static Short STATUS_TRY_AGAIN_IN_WAIT_TIME_SECONDS = 1
  public static Short STATUS_TRY_AGAIN_LATER = 0
  public Short getStatus()
  public Short getWaitTime()
  public void setStatus(Short)
  public void setWaitTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.applicationstatusv1.ApplicationBusy:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_REQUEST_QUEUED_EXECUTED_LATER = 2
  public static Short STATUS_TRY_AGAIN_IN_WAIT_TIME_SECONDS = 1
  public static Short STATUS_TRY_AGAIN_LATER = 0
  public Short getStatus()
  public Short getWaitTime()
  public void setStatus(Short)
  public void setWaitTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.applicationstatusv1.ApplicationRejectedRequest:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getStatus()
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.applicationstatusv1.ApplicationRejectedRequest:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getStatus()
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationcommandconfigurationv1.CommandConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationcommandconfigurationv1.CommandConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationcommandconfigurationv1.CommandConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandByte()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short getCommandClassIdentifier()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getCommandIdentifier()
  public Short getCommandLength()
  public Boolean getFirst()
  public Short getGroupingIdentifier()
  public Short getNodeId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setCommandByte(List)
  public void setCommandClassIdentifier(Short)
  public void setCommandIdentifier(Short)
  public void setCommandLength(Short)
  public void setFirst(Boolean)
  public void setGroupingIdentifier(Short)
  public void setNodeId(Short)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationcommandconfigurationv1.CommandConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandByte()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short getCommandClassIdentifier()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getCommandIdentifier()
  public Short getCommandLength()
  public Boolean getFirst()
  public Short getGroupingIdentifier()
  public Short getNodeId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setCommandByte(List)
  public void setCommandClassIdentifier(Short)
  public void setCommandIdentifier(Short)
  public void setCommandLength(Short)
  public void setFirst(Boolean)
  public void setGroupingIdentifier(Short)
  public void setNodeId(Short)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationcommandconfigurationv1.CommandConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandByte()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short getCommandClassIdentifier()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getCommandIdentifier()
  public Short getCommandLength()
  public Short getGroupingIdentifier()
  public Short getNodeId()
  public List getPayload()
  public void setCommandByte(List)
  public void setCommandClassIdentifier(Short)
  public void setCommandIdentifier(Short)
  public void setCommandLength(Short)
  public void setGroupingIdentifier(Short)
  public void setNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationcommandconfigurationv1.CommandConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandByte()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short getCommandClassIdentifier()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getCommandIdentifier()
  public Short getCommandLength()
  public Short getGroupingIdentifier()
  public Short getNodeId()
  public List getPayload()
  public void setCommandByte(List)
  public void setCommandClassIdentifier(Short)
  public void setCommandIdentifier(Short)
  public void setCommandLength(Short)
  public void setGroupingIdentifier(Short)
  public void setNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationcommandconfigurationv1.CommandRecordsSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationcommandconfigurationv1.CommandRecordsSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationcommandconfigurationv1.CommandRecordsSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getConfCmd()
  public Integer getFreeCommandRecords()
  public Short getMaxCommandLength()
  public Integer getMaxCommandRecords()
  public List getPayload()
  public Boolean getVc()
  public void setConfCmd(Boolean)
  public void setFreeCommandRecords(Integer)
  public void setMaxCommandLength(Short)
  public void setMaxCommandRecords(Integer)
  public void setVc(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationcommandconfigurationv1.CommandRecordsSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getConfCmd()
  public Integer getFreeCommandRecords()
  public Short getMaxCommandLength()
  public Integer getMaxCommandRecords()
  public List getPayload()
  public Boolean getVc()
  public void setConfCmd(Boolean)
  public void setFreeCommandRecords(Integer)
  public void setMaxCommandLength(Short)
  public void setMaxCommandRecords(Integer)
  public void setVc(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAllowCache()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setAllowCache(Boolean)
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAllowCache()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setAllowCache(Boolean)
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommand()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getListLength()
  public List getPayload()
  public void setCommand(List)
  public void setGroupingIdentifier(Short)
  public void setListLength(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommand()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getListLength()
  public List getPayload()
  public void setCommand(List)
  public void setGroupingIdentifier(Short)
  public void setListLength(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Boolean getListMode()
  public List getPayload()
  public Boolean getRefreshCache()
  public void setGroupingIdentifier(Short)
  public void setListMode(Boolean)
  public void setRefreshCache(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Boolean getListMode()
  public List getPayload()
  public Boolean getRefreshCache()
  public void setGroupingIdentifier(Short)
  public void setListMode(Boolean)
  public void setRefreshCache(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamicInfo()
  public Short getGroupCount()
  public List getGroupInfo()
  public Boolean getListMode()
  public List getPayload()
  public void setDynamicInfo(Boolean)
  public void setGroupCount(Short)
  public void setGroupInfo(List)
  public void setListMode(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamicInfo()
  public Short getGroupCount()
  public List getGroupInfo()
  public Boolean getListMode()
  public List getPayload()
  public void setDynamicInfo(Boolean)
  public void setGroupCount(Short)
  public void setGroupInfo(List)
  public void setListMode(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getLengthOfName()
  public List getName()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setLengthOfName(Short)
  public void setName(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getLengthOfName()
  public List getName()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setLengthOfName(Short)
  public void setName(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupCommandListGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getAllowCache()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.setAllowCache(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupCommandListGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getAllowCache()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.setAllowCache(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupCommandListReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getCMD()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getCommand()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getListLength()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setCommand(List)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setListLength(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupCommandListReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getCMD()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getCommand()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getListLength()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setCommand(List)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setListLength(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getGroupingIdentifier()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getListMode()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getPayload()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getRefreshCache()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setListMode(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setRefreshCache(Boolean)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getGroupingIdentifier()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getListMode()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getPayload()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getRefreshCache()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setListMode(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setRefreshCache(Boolean)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getDynamicInfo()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getGroupCount()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getGroupInfo()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getListMode()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setDynamicInfo(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setGroupCount(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setGroupInfo(List)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setListMode(Boolean)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getDynamicInfo()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getGroupCount()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getGroupInfo()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getListMode()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setDynamicInfo(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setGroupCount(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setGroupInfo(List)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setListMode(Boolean)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameGet.super$2$getPayload()
  public String super$3$getCMD()
  public Short super$3$getGroupingIdentifier()
  public List super$3$getPayload()
  public void super$3$setGroupingIdentifier(Short)
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameGet.super$2$getPayload()
  public String super$3$getCMD()
  public Short super$3$getGroupingIdentifier()
  public List super$3$getPayload()
  public void super$3$setGroupingIdentifier(Short)
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getLengthOfName()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getName()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setLengthOfName(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setName(List)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getLengthOfName()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getName()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setLengthOfName(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setName(List)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupCommandListGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getAllowCache()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.setAllowCache(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupCommandListGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getAllowCache()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.setAllowCache(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListGet.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupCommandListReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getCMD()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getCommand()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getListLength()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setCommand(List)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setListLength(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupCommandListReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getCMD()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getCommand()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getListLength()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setCommand(List)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.setListLength(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupCommandListReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getGroupingIdentifier()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getListMode()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getPayload()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getRefreshCache()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setListMode(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setRefreshCache(Boolean)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getGroupingIdentifier()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getListMode()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getPayload()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.getRefreshCache()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setListMode(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.setRefreshCache(Boolean)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoGet.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getDynamicInfo()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getGroupCount()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getGroupInfo()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getListMode()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setDynamicInfo(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setGroupCount(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setGroupInfo(List)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setListMode(Boolean)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getDynamicInfo()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getGroupCount()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getGroupInfo()
  public Boolean hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getListMode()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setDynamicInfo(Boolean)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setGroupCount(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setGroupInfo(List)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.setListMode(Boolean)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupInfoReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupNameGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameGet.super$2$getPayload()
  public String hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameGet.super$3$getCMD()
  public Short hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameGet.super$3$getGroupingIdentifier()
  public List hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameGet.super$3$getPayload()
  public void hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameGet.super$3$setGroupingIdentifier(Short)
  public String super$4$getCMD()
  public Short super$4$getGroupingIdentifier()
  public List super$4$getPayload()
  public void super$4$setGroupingIdentifier(Short)
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupNameGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameGet.super$2$getPayload()
  public String hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameGet.super$3$getCMD()
  public Short hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameGet.super$3$getGroupingIdentifier()
  public List hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameGet.super$3$getPayload()
  public void hubitat.zwave.commands.associationgrpinfov2.AssociationGroupNameGet.super$3$setGroupingIdentifier(Short)
  public String super$4$getCMD()
  public Short super$4$getGroupingIdentifier()
  public List super$4$getPayload()
  public void super$4$setGroupingIdentifier(Short)
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupNameReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getLengthOfName()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getName()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setLengthOfName(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setName(List)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationgrpinfov3.AssociationGroupNameReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getLengthOfName()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getName()
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.getPayload()
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setLengthOfName(Short)
  public void hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.setName(List)
  public List hubitat.zwave.commands.associationgrpinfov1.AssociationGroupNameReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationv1.AssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
]
class hubitat.zwave.commands.associationv1.AssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
]
class hubitat.zwave.commands.associationv1.AssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommandClassId()
  public Short getCommandId()
  public List getPayload()
]
class hubitat.zwave.commands.associationv1.AssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommandClassId()
  public Short getCommandId()
  public List getPayload()
]
class hubitat.zwave.commands.associationv1.AssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommandClassId()
  public Short getCommandId()
  public List getPayload()
  public Short getSupportedGroupings()
  public void setSupportedGroupings(Short)
]
class hubitat.zwave.commands.associationv1.AssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommandClassId()
  public Short getCommandId()
  public List getPayload()
  public Short getSupportedGroupings()
  public void setSupportedGroupings(Short)
]
class hubitat.zwave.commands.associationv1.AssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Object getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setNodeId(Object)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationv1.AssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Object getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setNodeId(Object)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationv1.AssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getMaxNodesSupported()
  public List getNodeId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setGroupingIdentifier(Short)
  public void setMaxNodesSupported(Short)
  public void setNodeId(List)
  public void setReportsToFollow(Short)
]
class hubitat.zwave.commands.associationv1.AssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getMaxNodesSupported()
  public List getNodeId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setGroupingIdentifier(Short)
  public void setMaxNodesSupported(Short)
  public void setNodeId(List)
  public void setReportsToFollow(Short)
]
class hubitat.zwave.commands.associationv1.AssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Object getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setNodeId(Object)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationv1.AssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Object getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setNodeId(Object)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationv2.AssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.associationv1.AssociationGet.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationGet.setGroupingIdentifier(Short)
]
class hubitat.zwave.commands.associationv2.AssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.associationv1.AssociationGet.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationGet.setGroupingIdentifier(Short)
]
class hubitat.zwave.commands.associationv2.AssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCMD()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCommandClassId()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCommandId()
  public List hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getPayload()
]
class hubitat.zwave.commands.associationv2.AssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCMD()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCommandClassId()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCommandId()
  public List hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getPayload()
]
class hubitat.zwave.commands.associationv2.AssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCMD()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCommandClassId()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCommandId()
  public List hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getPayload()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getSupportedGroupings()
  public void hubitat.zwave.commands.associationv1.AssociationGroupingsReport.setSupportedGroupings(Short)
]
class hubitat.zwave.commands.associationv2.AssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCMD()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCommandClassId()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCommandId()
  public List hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getPayload()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getSupportedGroupings()
  public void hubitat.zwave.commands.associationv1.AssociationGroupingsReport.setSupportedGroupings(Short)
]
class hubitat.zwave.commands.associationv2.AssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationRemove.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationRemove.getGroupingIdentifier()
  public Object hubitat.zwave.commands.associationv1.AssociationRemove.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationRemove.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationRemove.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationRemove.setNodeId(Object)
  public List hubitat.zwave.commands.associationv1.AssociationRemove.super$2$getPayload()
]
class hubitat.zwave.commands.associationv2.AssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationRemove.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationRemove.getGroupingIdentifier()
  public Object hubitat.zwave.commands.associationv1.AssociationRemove.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationRemove.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationRemove.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationRemove.setNodeId(Object)
  public List hubitat.zwave.commands.associationv1.AssociationRemove.super$2$getPayload()
]
class hubitat.zwave.commands.associationv2.AssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getMaxNodesSupported()
  public List hubitat.zwave.commands.associationv1.AssociationReport.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationReport.getPayload()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getReportsToFollow()
  public void hubitat.zwave.commands.associationv1.AssociationReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setMaxNodesSupported(Short)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setNodeId(List)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setReportsToFollow(Short)
]
class hubitat.zwave.commands.associationv2.AssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getMaxNodesSupported()
  public List hubitat.zwave.commands.associationv1.AssociationReport.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationReport.getPayload()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getReportsToFollow()
  public void hubitat.zwave.commands.associationv1.AssociationReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setMaxNodesSupported(Short)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setNodeId(List)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setReportsToFollow(Short)
]
class hubitat.zwave.commands.associationv2.AssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationSet.getGroupingIdentifier()
  public Object hubitat.zwave.commands.associationv1.AssociationSet.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationSet.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationSet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationSet.setNodeId(Object)
  public List hubitat.zwave.commands.associationv1.AssociationSet.super$2$getPayload()
]
class hubitat.zwave.commands.associationv2.AssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationSet.getGroupingIdentifier()
  public Object hubitat.zwave.commands.associationv1.AssociationSet.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationSet.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationSet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationSet.setNodeId(Object)
  public List hubitat.zwave.commands.associationv1.AssociationSet.super$2$getPayload()
]
class hubitat.zwave.commands.associationv2.AssociationSpecificGroupGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationv2.AssociationSpecificGroupGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroup()
  public List getPayload()
  public void setGroup(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroup()
  public List getPayload()
  public void setGroup(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.associationv3.AssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.associationv1.AssociationGet.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationGet.setGroupingIdentifier(Short)
]
class hubitat.zwave.commands.associationv3.AssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.associationv1.AssociationGet.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationGet.setGroupingIdentifier(Short)
]
class hubitat.zwave.commands.associationv3.AssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCMD()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCommandClassId()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCommandId()
  public List hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getPayload()
]
class hubitat.zwave.commands.associationv3.AssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCMD()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCommandClassId()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getCommandId()
  public List hubitat.zwave.commands.associationv1.AssociationGroupingsGet.getPayload()
]
class hubitat.zwave.commands.associationv3.AssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCMD()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCommandClassId()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCommandId()
  public List hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getPayload()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getSupportedGroupings()
  public void hubitat.zwave.commands.associationv1.AssociationGroupingsReport.setSupportedGroupings(Short)
]
class hubitat.zwave.commands.associationv3.AssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCMD()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCommandClassId()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getCommandId()
  public List hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getPayload()
  public Short hubitat.zwave.commands.associationv1.AssociationGroupingsReport.getSupportedGroupings()
  public void hubitat.zwave.commands.associationv1.AssociationGroupingsReport.setSupportedGroupings(Short)
]
class hubitat.zwave.commands.associationv3.AssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationRemove.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationRemove.getGroupingIdentifier()
  public Object hubitat.zwave.commands.associationv1.AssociationRemove.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationRemove.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationRemove.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationRemove.setNodeId(Object)
  public List hubitat.zwave.commands.associationv1.AssociationRemove.super$2$getPayload()
]
class hubitat.zwave.commands.associationv3.AssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationRemove.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationRemove.getGroupingIdentifier()
  public Object hubitat.zwave.commands.associationv1.AssociationRemove.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationRemove.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationRemove.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationRemove.setNodeId(Object)
  public List hubitat.zwave.commands.associationv1.AssociationRemove.super$2$getPayload()
]
class hubitat.zwave.commands.associationv3.AssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getMaxNodesSupported()
  public List hubitat.zwave.commands.associationv1.AssociationReport.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationReport.getPayload()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getReportsToFollow()
  public void hubitat.zwave.commands.associationv1.AssociationReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setMaxNodesSupported(Short)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setNodeId(List)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setReportsToFollow(Short)
]
class hubitat.zwave.commands.associationv3.AssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getMaxNodesSupported()
  public List hubitat.zwave.commands.associationv1.AssociationReport.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationReport.getPayload()
  public Short hubitat.zwave.commands.associationv1.AssociationReport.getReportsToFollow()
  public void hubitat.zwave.commands.associationv1.AssociationReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setMaxNodesSupported(Short)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setNodeId(List)
  public void hubitat.zwave.commands.associationv1.AssociationReport.setReportsToFollow(Short)
]
class hubitat.zwave.commands.associationv3.AssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationSet.getGroupingIdentifier()
  public Object hubitat.zwave.commands.associationv1.AssociationSet.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationSet.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationSet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationSet.setNodeId(Object)
  public List hubitat.zwave.commands.associationv1.AssociationSet.super$2$getPayload()
]
class hubitat.zwave.commands.associationv3.AssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv1.AssociationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv1.AssociationSet.getGroupingIdentifier()
  public Object hubitat.zwave.commands.associationv1.AssociationSet.getNodeId()
  public List hubitat.zwave.commands.associationv1.AssociationSet.getPayload()
  public void hubitat.zwave.commands.associationv1.AssociationSet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.associationv1.AssociationSet.setNodeId(Object)
  public List hubitat.zwave.commands.associationv1.AssociationSet.super$2$getPayload()
]
class hubitat.zwave.commands.associationv3.AssociationSpecificGroupGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv2.AssociationSpecificGroupGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.associationv2.AssociationSpecificGroupGet.getPayload()
  public List hubitat.zwave.commands.associationv2.AssociationSpecificGroupGet.super$2$getPayload()
]
class hubitat.zwave.commands.associationv3.AssociationSpecificGroupGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv2.AssociationSpecificGroupGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.associationv2.AssociationSpecificGroupGet.getPayload()
  public List hubitat.zwave.commands.associationv2.AssociationSpecificGroupGet.super$2$getPayload()
]
class hubitat.zwave.commands.associationv3.AssociationSpecificGroupReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport.getGroup()
  public List hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport.getPayload()
  public void hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport.setGroup(Short)
  public List hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport.super$2$getPayload()
]
class hubitat.zwave.commands.associationv3.AssociationSpecificGroupReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport.getGroup()
  public List hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport.getPayload()
  public void hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport.setGroup(Short)
  public List hubitat.zwave.commands.associationv2.AssociationSpecificGroupReport.super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdByLetterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdByLetterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdByLetterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdByLetterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdChildCountGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdChildCountGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdChildCountReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdChildCountReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvContentBrowseMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvMatchItemToRendererMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvMatchItemToRendererMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvMatchItemToRendererMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentdirectorymdv1.AvMatchItemToRendererMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentsearchmdv1.AvContentSearchMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentsearchmdv1.AvContentSearchMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentsearchmdv1.AvContentSearchMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avcontentsearchmdv1.AvContentSearchMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avrendererstatusv1.AvRendererStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avrendererstatusv1.AvRendererStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avrendererstatusv1.AvRendererStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avrendererstatusv1.AvRendererStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avtaggingmdv1.AvTaggingMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avtaggingmdv1.AvTaggingMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avtaggingmdv1.AvTaggingMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.avtaggingmdv1.AvTaggingMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.barrieroperatorv1.BarrierOperatorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.barrieroperatorv1.BarrierOperatorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.barrieroperatorv1.BarrierOperatorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public static Short BARRIER_STATE_CLOSED = 0
  public static Short BARRIER_STATE_OPEN = 255
  public static Short BARRIER_STATE_UNKNOWN_POSITION_MOVING_TO_CLOSE = 252
  public static Short BARRIER_STATE_UNKNOWN_POSITION_MOVING_TO_OPEN = 254
  public static Short BARRIER_STATE_UNKNOWN_POSITION_STOPPED = 253
  public Short getBarrierState()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBarrierState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.barrieroperatorv1.BarrierOperatorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public static Short BARRIER_STATE_CLOSED = 0
  public static Short BARRIER_STATE_OPEN = 255
  public static Short BARRIER_STATE_UNKNOWN_POSITION_MOVING_TO_CLOSE = 252
  public static Short BARRIER_STATE_UNKNOWN_POSITION_MOVING_TO_OPEN = 254
  public static Short BARRIER_STATE_UNKNOWN_POSITION_STOPPED = 253
  public Short getBarrierState()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBarrierState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.barrieroperatorv1.BarrierOperatorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short REQUESTED_BARRIER_STATE_CLOSE = 0
  public static Short REQUESTED_BARRIER_STATE_OPEN = 255
  public Short getRequestedBarrierState()
  public void setRequestedBarrierState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.barrieroperatorv1.BarrierOperatorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short REQUESTED_BARRIER_STATE_CLOSE = 0
  public static Short REQUESTED_BARRIER_STATE_OPEN = 255
  public Short getRequestedBarrierState()
  public void setRequestedBarrierState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basictariffinfov1.BasicTariffInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basictariffinfov1.BasicTariffInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basictariffinfov1.BasicTariffInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDual()
  public Short getE1CurrentRateInUse()
  public Integer getE1RateConsumptionRegister()
  public Short getE1TimeForNextRateHours()
  public Short getE1TimeForNextRateMinutes()
  public Short getE1TimeForNextRateSeconds()
  public Short getE2CurrentRateInUse()
  public Integer getE2RateConsumptionRegister()
  public List getPayload()
  public Short getTotalNoImportRates()
  public void setDual(Boolean)
  public void setE1CurrentRateInUse(Short)
  public void setE1RateConsumptionRegister(Integer)
  public void setE1TimeForNextRateHours(Short)
  public void setE1TimeForNextRateMinutes(Short)
  public void setE1TimeForNextRateSeconds(Short)
  public void setE2CurrentRateInUse(Short)
  public void setE2RateConsumptionRegister(Integer)
  public void setTotalNoImportRates(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basictariffinfov1.BasicTariffInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDual()
  public Short getE1CurrentRateInUse()
  public Integer getE1RateConsumptionRegister()
  public Short getE1TimeForNextRateHours()
  public Short getE1TimeForNextRateMinutes()
  public Short getE1TimeForNextRateSeconds()
  public Short getE2CurrentRateInUse()
  public Integer getE2RateConsumptionRegister()
  public List getPayload()
  public Short getTotalNoImportRates()
  public void setDual(Boolean)
  public void setE1CurrentRateInUse(Short)
  public void setE1RateConsumptionRegister(Integer)
  public void setE1TimeForNextRateHours(Short)
  public void setE1TimeForNextRateMinutes(Short)
  public void setE1TimeForNextRateSeconds(Short)
  public void setE2CurrentRateInUse(Short)
  public void setE2RateConsumptionRegister(Integer)
  public void setTotalNoImportRates(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basicv1.BasicGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basicv1.BasicGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basicv1.BasicReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basicv1.BasicReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basicv1.BasicSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basicv1.BasicSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basicv2.BasicGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.basicv1.BasicGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.basicv1.BasicGet.getPayload()
  public List hubitat.zwave.commands.basicv1.BasicGet.super$2$getPayload()
]
class hubitat.zwave.commands.basicv2.BasicGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.basicv1.BasicGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.basicv1.BasicGet.getPayload()
  public List hubitat.zwave.commands.basicv1.BasicGet.super$2$getPayload()
]
class hubitat.zwave.commands.basicv2.BasicReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public List getPayload()
  public Short getTargetValue()
  public Short getValue()
  public void setDuration(Short)
  public void setTargetValue(Short)
  public void setValue(Short)
  public List hubitat.zwave.commands.basicv1.BasicReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getValue()
  public void super$3$setValue(Short)
]
class hubitat.zwave.commands.basicv2.BasicReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public List getPayload()
  public Short getTargetValue()
  public Short getValue()
  public void setDuration(Short)
  public void setTargetValue(Short)
  public void setValue(Short)
  public List hubitat.zwave.commands.basicv1.BasicReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getValue()
  public void super$3$setValue(Short)
]
class hubitat.zwave.commands.basicv2.BasicSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.basicv1.BasicSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.basicv1.BasicSet.getPayload()
  public Short hubitat.zwave.commands.basicv1.BasicSet.getValue()
  public void hubitat.zwave.commands.basicv1.BasicSet.setValue(Short)
  public List hubitat.zwave.commands.basicv1.BasicSet.super$2$getPayload()
]
class hubitat.zwave.commands.basicv2.BasicSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.basicv1.BasicSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.basicv1.BasicSet.getPayload()
  public Short hubitat.zwave.commands.basicv1.BasicSet.getValue()
  public void hubitat.zwave.commands.basicv1.BasicSet.setValue(Short)
  public List hubitat.zwave.commands.basicv1.BasicSet.super$2$getPayload()
]
class hubitat.zwave.commands.basicwindowcoveringv1.BasicWindowCoveringStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getOpenClose()
  public List getPayload()
  public void setOpenClose(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basicwindowcoveringv1.BasicWindowCoveringStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getOpenClose()
  public List getPayload()
  public void setOpenClose(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basicwindowcoveringv1.BasicWindowCoveringStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.basicwindowcoveringv1.BasicWindowCoveringStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.batteryv1.BatteryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.batteryv1.BatteryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.batteryv1.BatteryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public static short BATTERY_LOW_WARNING = 255
  public Short getBatteryLevel()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBatteryLevel(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.batteryv1.BatteryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public static short BATTERY_LOW_WARNING = 255
  public Short getBatteryLevel()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBatteryLevel(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.batteryv2.BatteryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.batteryv1.BatteryGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.batteryv1.BatteryGet.getPayload()
  public List hubitat.zwave.commands.batteryv1.BatteryGet.super$2$getPayload()
]
class hubitat.zwave.commands.batteryv2.BatteryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.batteryv1.BatteryGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.batteryv1.BatteryGet.getPayload()
  public List hubitat.zwave.commands.batteryv1.BatteryGet.super$2$getPayload()
]
class hubitat.zwave.commands.batteryv2.BatteryHealthGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.batteryv2.BatteryHealthGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.batteryv2.BatteryHealthReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getBatteryTemperature()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaximumCapacity()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledBatteryTemperature()
  public Short getSize()
  public void setBatteryTemperature(List)
  public void setMaximumCapacity(Short)
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledBatteryTemperature(BigDecimal)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.batteryv2.BatteryHealthReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getBatteryTemperature()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaximumCapacity()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledBatteryTemperature()
  public Short getSize()
  public void setBatteryTemperature(List)
  public void setMaximumCapacity(Short)
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledBatteryTemperature(BigDecimal)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.batteryv2.BatteryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public static short BATTERY_LOW_WARNING = 255
  public Boolean getBackupBattery()
  public Short hubitat.zwave.commands.batteryv1.BatteryReport.getBatteryLevel()
  public static short CHARGING_STATUS_CHARGING = 1
  public static short CHARGING_STATUS_DISCHARGING = 0
  public static short CHARGING_STATUS_MAINTAINING = 2
  public String hubitat.zwave.commands.batteryv1.BatteryReport.getCMD()
  public Short getChargingStatus()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDisconnected()
  public Boolean getLowFluid()
  public Boolean getOverheating()
  public List getPayload()
  public Boolean getRechargeable()
  public Short getReplaceRecharge()
  public void setBackupBattery(Boolean)
  public void hubitat.zwave.commands.batteryv1.BatteryReport.setBatteryLevel(Short)
  public void setChargingStatus(Short)
  public void setDisconnected(Boolean)
  public void setLowFluid(Boolean)
  public void setOverheating(Boolean)
  public void setRechargeable(Boolean)
  public void setReplaceRecharge(Short)
  public List hubitat.zwave.commands.batteryv1.BatteryReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.batteryv2.BatteryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public static short BATTERY_LOW_WARNING = 255
  public Boolean getBackupBattery()
  public Short hubitat.zwave.commands.batteryv1.BatteryReport.getBatteryLevel()
  public static short CHARGING_STATUS_CHARGING = 1
  public static short CHARGING_STATUS_DISCHARGING = 0
  public static short CHARGING_STATUS_MAINTAINING = 2
  public String hubitat.zwave.commands.batteryv1.BatteryReport.getCMD()
  public Short getChargingStatus()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDisconnected()
  public Boolean getLowFluid()
  public Boolean getOverheating()
  public List getPayload()
  public Boolean getRechargeable()
  public Short getReplaceRecharge()
  public void setBackupBattery(Boolean)
  public void hubitat.zwave.commands.batteryv1.BatteryReport.setBatteryLevel(Short)
  public void setChargingStatus(Short)
  public void setDisconnected(Boolean)
  public void setLowFluid(Boolean)
  public void setOverheating(Boolean)
  public void setRechargeable(Boolean)
  public void setReplaceRecharge(Short)
  public List hubitat.zwave.commands.batteryv1.BatteryReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.batteryv3.BatteryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.batteryv1.BatteryGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.batteryv1.BatteryGet.getPayload()
  public List hubitat.zwave.commands.batteryv1.BatteryGet.super$2$getPayload()
]
class hubitat.zwave.commands.batteryv3.BatteryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.batteryv1.BatteryGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.batteryv1.BatteryGet.getPayload()
  public List hubitat.zwave.commands.batteryv1.BatteryGet.super$2$getPayload()
]
class hubitat.zwave.commands.batteryv3.BatteryHealthGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.batteryv2.BatteryHealthGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.batteryv2.BatteryHealthGet.getPayload()
  public List hubitat.zwave.commands.batteryv2.BatteryHealthGet.super$2$getPayload()
]
class hubitat.zwave.commands.batteryv3.BatteryHealthGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.batteryv2.BatteryHealthGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.batteryv2.BatteryHealthGet.getPayload()
  public List hubitat.zwave.commands.batteryv2.BatteryHealthGet.super$2$getPayload()
]
class hubitat.zwave.commands.batteryv3.BatteryHealthReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List hubitat.zwave.commands.batteryv2.BatteryHealthReport.getBatteryTemperature()
  public String hubitat.zwave.commands.batteryv2.BatteryHealthReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.batteryv2.BatteryHealthReport.getMaximumCapacity()
  public List hubitat.zwave.commands.batteryv2.BatteryHealthReport.getPayload()
  public Short hubitat.zwave.commands.batteryv2.BatteryHealthReport.getPrecision()
  public Short hubitat.zwave.commands.batteryv2.BatteryHealthReport.getScale()
  public BigDecimal hubitat.zwave.commands.batteryv2.BatteryHealthReport.getScaledBatteryTemperature()
  public Short hubitat.zwave.commands.batteryv2.BatteryHealthReport.getSize()
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setBatteryTemperature(List)
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setMaximumCapacity(Short)
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setPrecision(Short)
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setScale(Short)
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setScaledBatteryTemperature(BigDecimal)
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setSize(Short)
  public List hubitat.zwave.commands.batteryv2.BatteryHealthReport.super$2$getPayload()
]
class hubitat.zwave.commands.batteryv3.BatteryHealthReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List hubitat.zwave.commands.batteryv2.BatteryHealthReport.getBatteryTemperature()
  public String hubitat.zwave.commands.batteryv2.BatteryHealthReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.batteryv2.BatteryHealthReport.getMaximumCapacity()
  public List hubitat.zwave.commands.batteryv2.BatteryHealthReport.getPayload()
  public Short hubitat.zwave.commands.batteryv2.BatteryHealthReport.getPrecision()
  public Short hubitat.zwave.commands.batteryv2.BatteryHealthReport.getScale()
  public BigDecimal hubitat.zwave.commands.batteryv2.BatteryHealthReport.getScaledBatteryTemperature()
  public Short hubitat.zwave.commands.batteryv2.BatteryHealthReport.getSize()
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setBatteryTemperature(List)
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setMaximumCapacity(Short)
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setPrecision(Short)
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setScale(Short)
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setScaledBatteryTemperature(BigDecimal)
  public void hubitat.zwave.commands.batteryv2.BatteryHealthReport.setSize(Short)
  public List hubitat.zwave.commands.batteryv2.BatteryHealthReport.super$2$getPayload()
]
class hubitat.zwave.commands.batteryv3.BatteryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public static short BATTERY_LOW_WARNING = 255
  public Boolean hubitat.zwave.commands.batteryv2.BatteryReport.getBackupBattery()
  public Short hubitat.zwave.commands.batteryv1.BatteryReport.getBatteryLevel()
  public static short CHARGING_STATUS_CHARGING = 1
  public static short CHARGING_STATUS_DISCHARGING = 0
  public static short CHARGING_STATUS_MAINTAINING = 2
  public String hubitat.zwave.commands.batteryv1.BatteryReport.getCMD()
  public Short hubitat.zwave.commands.batteryv2.BatteryReport.getChargingStatus()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.batteryv2.BatteryReport.getDisconnected()
  public Boolean hubitat.zwave.commands.batteryv2.BatteryReport.getLowFluid()
  public Boolean getLowTemperatureStatus()
  public Boolean hubitat.zwave.commands.batteryv2.BatteryReport.getOverheating()
  public List hubitat.zwave.commands.batteryv2.BatteryReport.getPayload()
  public Boolean hubitat.zwave.commands.batteryv2.BatteryReport.getRechargeable()
  public Short hubitat.zwave.commands.batteryv2.BatteryReport.getReplaceRecharge()
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setBackupBattery(Boolean)
  public void hubitat.zwave.commands.batteryv1.BatteryReport.setBatteryLevel(Short)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setChargingStatus(Short)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setDisconnected(Boolean)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setLowFluid(Boolean)
  public void setLowTemperatureStatus(Boolean)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setOverheating(Boolean)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setRechargeable(Boolean)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setReplaceRecharge(Short)
  public List hubitat.zwave.commands.batteryv1.BatteryReport.super$2$getPayload()
  public List hubitat.zwave.commands.batteryv2.BatteryReport.super$3$getPayload()
]
class hubitat.zwave.commands.batteryv3.BatteryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public static short BATTERY_LOW_WARNING = 255
  public Boolean hubitat.zwave.commands.batteryv2.BatteryReport.getBackupBattery()
  public Short hubitat.zwave.commands.batteryv1.BatteryReport.getBatteryLevel()
  public static short CHARGING_STATUS_CHARGING = 1
  public static short CHARGING_STATUS_DISCHARGING = 0
  public static short CHARGING_STATUS_MAINTAINING = 2
  public String hubitat.zwave.commands.batteryv1.BatteryReport.getCMD()
  public Short hubitat.zwave.commands.batteryv2.BatteryReport.getChargingStatus()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.batteryv2.BatteryReport.getDisconnected()
  public Boolean hubitat.zwave.commands.batteryv2.BatteryReport.getLowFluid()
  public Boolean getLowTemperatureStatus()
  public Boolean hubitat.zwave.commands.batteryv2.BatteryReport.getOverheating()
  public List hubitat.zwave.commands.batteryv2.BatteryReport.getPayload()
  public Boolean hubitat.zwave.commands.batteryv2.BatteryReport.getRechargeable()
  public Short hubitat.zwave.commands.batteryv2.BatteryReport.getReplaceRecharge()
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setBackupBattery(Boolean)
  public void hubitat.zwave.commands.batteryv1.BatteryReport.setBatteryLevel(Short)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setChargingStatus(Short)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setDisconnected(Boolean)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setLowFluid(Boolean)
  public void setLowTemperatureStatus(Boolean)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setOverheating(Boolean)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setRechargeable(Boolean)
  public void hubitat.zwave.commands.batteryv2.BatteryReport.setReplaceRecharge(Short)
  public List hubitat.zwave.commands.batteryv1.BatteryReport.super$2$getPayload()
  public List hubitat.zwave.commands.batteryv2.BatteryReport.super$3$getPayload()
]
class hubitat.zwave.commands.centralscenev1.CentralSceneNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short KEY_HELD_DOWN = 2
  public static Short KEY_PRESSED_1_TIME = 0
  public static Short KEY_RELEASED = 1
  public Short getKeyAttributes()
  public List getPayload()
  public Short getSceneNumber()
  public Short getSequenceNumber()
  public void setKeyAttributes(Short)
  public void setSceneNumber(Short)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev1.CentralSceneNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short KEY_HELD_DOWN = 2
  public static Short KEY_PRESSED_1_TIME = 0
  public static Short KEY_RELEASED = 1
  public Short getKeyAttributes()
  public List getPayload()
  public Short getSceneNumber()
  public Short getSequenceNumber()
  public void setKeyAttributes(Short)
  public void setSceneNumber(Short)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev1.CentralSceneSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedScenes()
  public void setSupportedScenes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev1.CentralSceneSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedScenes()
  public void setSupportedScenes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev2.CentralSceneNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short KEY_HELD_DOWN = 2
  public static Short KEY_PRESSED_1_TIME = 0
  public static Short KEY_PRESSED_2_TIMES = 3
  public static Short KEY_PRESSED_3_TIMES = 4
  public static Short KEY_PRESSED_4_TIMES = 5
  public static Short KEY_PRESSED_5_TIMES = 6
  public static Short KEY_RELEASED = 1
  public Short getKeyAttributes()
  public List getPayload()
  public Short getSceneNumber()
  public Short getSequenceNumber()
  public void setKeyAttributes(Short)
  public void setSceneNumber(Short)
  public void setSequenceNumber(Short)
  public List hubitat.zwave.commands.centralscenev1.CentralSceneNotification.super$2$getPayload()
  public String super$3$getCMD()
  public Short super$3$getKeyAttributes()
  public List super$3$getPayload()
  public Short super$3$getSceneNumber()
  public Short super$3$getSequenceNumber()
  public void super$3$setKeyAttributes(Short)
  public void super$3$setSceneNumber(Short)
  public void super$3$setSequenceNumber(Short)
]
class hubitat.zwave.commands.centralscenev2.CentralSceneNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short KEY_HELD_DOWN = 2
  public static Short KEY_PRESSED_1_TIME = 0
  public static Short KEY_PRESSED_2_TIMES = 3
  public static Short KEY_PRESSED_3_TIMES = 4
  public static Short KEY_PRESSED_4_TIMES = 5
  public static Short KEY_PRESSED_5_TIMES = 6
  public static Short KEY_RELEASED = 1
  public Short getKeyAttributes()
  public List getPayload()
  public Short getSceneNumber()
  public Short getSequenceNumber()
  public void setKeyAttributes(Short)
  public void setSceneNumber(Short)
  public void setSequenceNumber(Short)
  public List hubitat.zwave.commands.centralscenev1.CentralSceneNotification.super$2$getPayload()
  public String super$3$getCMD()
  public Short super$3$getKeyAttributes()
  public List super$3$getPayload()
  public Short super$3$getSceneNumber()
  public Short super$3$getSequenceNumber()
  public void super$3$setKeyAttributes(Short)
  public void super$3$setSceneNumber(Short)
  public void super$3$setSequenceNumber(Short)
]
class hubitat.zwave.commands.centralscenev2.CentralSceneSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.getPayload()
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev2.CentralSceneSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.getPayload()
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev2.CentralSceneSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getIdentical()
  public List getPayload()
  public List getSupportedKeyAttributes()
  public Short getSupportedScenes()
  public void setIdentical(Boolean)
  public void setSupportedKeyAttributes(List)
  public void setSupportedScenes(Short)
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getSupportedScenes()
  public void super$3$setSupportedScenes(Short)
]
class hubitat.zwave.commands.centralscenev2.CentralSceneSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getIdentical()
  public List getPayload()
  public List getSupportedKeyAttributes()
  public Short getSupportedScenes()
  public void setIdentical(Boolean)
  public void setSupportedKeyAttributes(List)
  public void setSupportedScenes(Short)
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getSupportedScenes()
  public void super$3$setSupportedScenes(Short)
]
class hubitat.zwave.commands.centralscenev3.CentralSceneConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev3.CentralSceneConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev3.CentralSceneConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Boolean getSlowRefresh()
  public void setSlowRefresh(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev3.CentralSceneConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Boolean getSlowRefresh()
  public void setSlowRefresh(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev3.CentralSceneConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Boolean getSlowRefresh()
  public void setSlowRefresh(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev3.CentralSceneConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Boolean getSlowRefresh()
  public void setSlowRefresh(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev3.CentralSceneNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short KEY_HELD_DOWN = 2
  public static Short KEY_PRESSED_1_TIME = 0
  public static Short KEY_PRESSED_2_TIMES = 3
  public static Short KEY_PRESSED_3_TIMES = 4
  public static Short KEY_PRESSED_4_TIMES = 5
  public static Short KEY_PRESSED_5_TIMES = 6
  public static Short KEY_RELEASED = 1
  public Short getKeyAttributes()
  public List getPayload()
  public Short getSceneNumber()
  public Short getSequenceNumber()
  public Boolean getSlowRefresh()
  public void setKeyAttributes(Short)
  public void setSceneNumber(Short)
  public void setSequenceNumber(Short)
  public void setSlowRefresh(Boolean)
  public List hubitat.zwave.commands.centralscenev1.CentralSceneNotification.super$2$getPayload()
  public String hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$getCMD()
  public Short hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$getKeyAttributes()
  public List hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$getPayload()
  public Short hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$getSceneNumber()
  public Short hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$getSequenceNumber()
  public void hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$setKeyAttributes(Short)
  public void hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$setSceneNumber(Short)
  public void hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$setSequenceNumber(Short)
  public String super$4$getCMD()
  public Short super$4$getKeyAttributes()
  public List super$4$getPayload()
  public Short super$4$getSceneNumber()
  public Short super$4$getSequenceNumber()
  public void super$4$setKeyAttributes(Short)
  public void super$4$setSceneNumber(Short)
  public void super$4$setSequenceNumber(Short)
]
class hubitat.zwave.commands.centralscenev3.CentralSceneNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short KEY_HELD_DOWN = 2
  public static Short KEY_PRESSED_1_TIME = 0
  public static Short KEY_PRESSED_2_TIMES = 3
  public static Short KEY_PRESSED_3_TIMES = 4
  public static Short KEY_PRESSED_4_TIMES = 5
  public static Short KEY_PRESSED_5_TIMES = 6
  public static Short KEY_RELEASED = 1
  public Short getKeyAttributes()
  public List getPayload()
  public Short getSceneNumber()
  public Short getSequenceNumber()
  public Boolean getSlowRefresh()
  public void setKeyAttributes(Short)
  public void setSceneNumber(Short)
  public void setSequenceNumber(Short)
  public void setSlowRefresh(Boolean)
  public List hubitat.zwave.commands.centralscenev1.CentralSceneNotification.super$2$getPayload()
  public String hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$getCMD()
  public Short hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$getKeyAttributes()
  public List hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$getPayload()
  public Short hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$getSceneNumber()
  public Short hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$getSequenceNumber()
  public void hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$setKeyAttributes(Short)
  public void hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$setSceneNumber(Short)
  public void hubitat.zwave.commands.centralscenev2.CentralSceneNotification.super$3$setSequenceNumber(Short)
  public String super$4$getCMD()
  public Short super$4$getKeyAttributes()
  public List super$4$getPayload()
  public Short super$4$getSceneNumber()
  public Short super$4$getSequenceNumber()
  public void super$4$setKeyAttributes(Short)
  public void super$4$setSceneNumber(Short)
  public void super$4$setSequenceNumber(Short)
]
class hubitat.zwave.commands.centralscenev3.CentralSceneSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.getPayload()
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev3.CentralSceneSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.getPayload()
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.centralscenev3.CentralSceneSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getIdentical()
  public List getPayload()
  public Boolean getSlowRefresh()
  public List getSupportedKeyAttributes()
  public Short getSupportedScenes()
  public void setIdentical(Boolean)
  public void setSlowRefresh(Boolean)
  public void setSupportedKeyAttributes(List)
  public void setSupportedScenes(Short)
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedReport.super$2$getPayload()
  public String hubitat.zwave.commands.centralscenev2.CentralSceneSupportedReport.super$3$getCMD()
  public List hubitat.zwave.commands.centralscenev2.CentralSceneSupportedReport.super$3$getPayload()
  public Short hubitat.zwave.commands.centralscenev2.CentralSceneSupportedReport.super$3$getSupportedScenes()
  public void hubitat.zwave.commands.centralscenev2.CentralSceneSupportedReport.super$3$setSupportedScenes(Short)
  public String super$4$getCMD()
  public Boolean super$4$getIdentical()
  public List super$4$getPayload()
  public List super$4$getSupportedKeyAttributes()
  public Short super$4$getSupportedScenes()
  public void super$4$setIdentical(Boolean)
  public void super$4$setSupportedKeyAttributes(List)
  public void super$4$setSupportedScenes(Short)
]
class hubitat.zwave.commands.centralscenev3.CentralSceneSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getIdentical()
  public List getPayload()
  public Boolean getSlowRefresh()
  public List getSupportedKeyAttributes()
  public Short getSupportedScenes()
  public void setIdentical(Boolean)
  public void setSlowRefresh(Boolean)
  public void setSupportedKeyAttributes(List)
  public void setSupportedScenes(Short)
  public List hubitat.zwave.commands.centralscenev1.CentralSceneSupportedReport.super$2$getPayload()
  public String hubitat.zwave.commands.centralscenev2.CentralSceneSupportedReport.super$3$getCMD()
  public List hubitat.zwave.commands.centralscenev2.CentralSceneSupportedReport.super$3$getPayload()
  public Short hubitat.zwave.commands.centralscenev2.CentralSceneSupportedReport.super$3$getSupportedScenes()
  public void hubitat.zwave.commands.centralscenev2.CentralSceneSupportedReport.super$3$setSupportedScenes(Short)
  public String super$4$getCMD()
  public Boolean super$4$getIdentical()
  public List super$4$getPayload()
  public List super$4$getSupportedKeyAttributes()
  public Short super$4$getSupportedScenes()
  public void super$4$setIdentical(Boolean)
  public void super$4$setSupportedKeyAttributes(List)
  public void super$4$setSupportedScenes(Short)
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmLogGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmLogGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmLogReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAlarmStillActive1()
  public Boolean getAlarmStillActive2()
  public Boolean getAlarmStillActive3()
  public Boolean getAlarmStillActive4()
  public Boolean getAlarmStillActive5()
  public Boolean getAlarmTemperatureExceeded1()
  public Boolean getAlarmTemperatureExceeded2()
  public Boolean getAlarmTemperatureExceeded3()
  public Boolean getAlarmTemperatureExceeded4()
  public Boolean getAlarmTemperatureExceeded5()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getExternalAlarm1()
  public Boolean getExternalAlarm2()
  public Boolean getExternalAlarm3()
  public Boolean getExternalAlarm4()
  public Boolean getExternalAlarm5()
  public List getPayload()
  public Boolean getSensorError1()
  public Boolean getSensorError2()
  public Boolean getSensorError3()
  public Boolean getSensorError4()
  public Boolean getSensorError5()
  public void setAlarmStillActive1(Boolean)
  public void setAlarmStillActive2(Boolean)
  public void setAlarmStillActive3(Boolean)
  public void setAlarmStillActive4(Boolean)
  public void setAlarmStillActive5(Boolean)
  public void setAlarmTemperatureExceeded1(Boolean)
  public void setAlarmTemperatureExceeded2(Boolean)
  public void setAlarmTemperatureExceeded3(Boolean)
  public void setAlarmTemperatureExceeded4(Boolean)
  public void setAlarmTemperatureExceeded5(Boolean)
  public void setExternalAlarm1(Boolean)
  public void setExternalAlarm2(Boolean)
  public void setExternalAlarm3(Boolean)
  public void setExternalAlarm4(Boolean)
  public void setExternalAlarm5(Boolean)
  public void setSensorError1(Boolean)
  public void setSensorError2(Boolean)
  public void setSensorError3(Boolean)
  public void setSensorError4(Boolean)
  public void setSensorError5(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmLogReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAlarmStillActive1()
  public Boolean getAlarmStillActive2()
  public Boolean getAlarmStillActive3()
  public Boolean getAlarmStillActive4()
  public Boolean getAlarmStillActive5()
  public Boolean getAlarmTemperatureExceeded1()
  public Boolean getAlarmTemperatureExceeded2()
  public Boolean getAlarmTemperatureExceeded3()
  public Boolean getAlarmTemperatureExceeded4()
  public Boolean getAlarmTemperatureExceeded5()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getExternalAlarm1()
  public Boolean getExternalAlarm2()
  public Boolean getExternalAlarm3()
  public Boolean getExternalAlarm4()
  public Boolean getExternalAlarm5()
  public List getPayload()
  public Boolean getSensorError1()
  public Boolean getSensorError2()
  public Boolean getSensorError3()
  public Boolean getSensorError4()
  public Boolean getSensorError5()
  public void setAlarmStillActive1(Boolean)
  public void setAlarmStillActive2(Boolean)
  public void setAlarmStillActive3(Boolean)
  public void setAlarmStillActive4(Boolean)
  public void setAlarmStillActive5(Boolean)
  public void setAlarmTemperatureExceeded1(Boolean)
  public void setAlarmTemperatureExceeded2(Boolean)
  public void setAlarmTemperatureExceeded3(Boolean)
  public void setAlarmTemperatureExceeded4(Boolean)
  public void setAlarmTemperatureExceeded5(Boolean)
  public void setExternalAlarm1(Boolean)
  public void setExternalAlarm2(Boolean)
  public void setExternalAlarm3(Boolean)
  public void setExternalAlarm4(Boolean)
  public void setExternalAlarm5(Boolean)
  public void setSensorError1(Boolean)
  public void setSensorError2(Boolean)
  public void setSensorError3(Boolean)
  public void setSensorError4(Boolean)
  public void setSensorError5(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmLogSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMESSAGE_RESET_LOG()
  public Short getMessage()
  public List getPayload()
  public void setMESSAGE_RESET_LOG(Short)
  public void setMessage(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmLogSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMESSAGE_RESET_LOG()
  public Short getMessage()
  public List getPayload()
  public void setMESSAGE_RESET_LOG(Short)
  public void setMessage(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAlarmTemperatureExceeded()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getExternalAlarm()
  public Short getNotUsed()
  public List getPayload()
  public Boolean getSensorError()
  public Boolean getService()
  public Boolean getSpeedChangeEnable()
  public Boolean getStartTemperatureExceeded()
  public void setAlarmTemperatureExceeded(Boolean)
  public void setExternalAlarm(Boolean)
  public void setNotUsed(Short)
  public void setSensorError(Boolean)
  public void setService(Boolean)
  public void setSpeedChangeEnable(Boolean)
  public void setStartTemperatureExceeded(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAlarmTemperatureExceeded()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getExternalAlarm()
  public Short getNotUsed()
  public List getPayload()
  public Boolean getSensorError()
  public Boolean getService()
  public Boolean getSpeedChangeEnable()
  public Boolean getStartTemperatureExceeded()
  public void setAlarmTemperatureExceeded(Boolean)
  public void setExternalAlarm(Boolean)
  public void setNotUsed(Short)
  public void setSensorError(Boolean)
  public void setService(Boolean)
  public void setSpeedChangeEnable(Boolean)
  public void setStartTemperatureExceeded(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmStatusSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAcknowledgeAlarmTemperatureExceeded()
  public Boolean getAcknowledgeExternalAlarm()
  public Boolean getAcknowledgeSensorError()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getNotUsed1()
  public Short getNotUsed2()
  public List getPayload()
  public void setAcknowledgeAlarmTemperatureExceeded(Boolean)
  public void setAcknowledgeExternalAlarm(Boolean)
  public void setAcknowledgeSensorError(Boolean)
  public void setNotUsed1(Boolean)
  public void setNotUsed2(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmStatusSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAcknowledgeAlarmTemperatureExceeded()
  public Boolean getAcknowledgeExternalAlarm()
  public Boolean getAcknowledgeSensorError()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getNotUsed1()
  public Short getNotUsed2()
  public List getPayload()
  public void setAcknowledgeAlarmTemperatureExceeded(Boolean)
  public void setAcknowledgeExternalAlarm(Boolean)
  public void setAcknowledgeSensorError(Boolean)
  public void setNotUsed1(Boolean)
  public void setNotUsed2(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmTempGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmTempGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmTempReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmTempReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmTempSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanAlarmTempSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanBoostTimeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanBoostTimeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanBoostTimeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTime()
  public void setTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanBoostTimeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTime()
  public void setTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanBoostTimeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTime()
  public void setTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanBoostTimeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTime()
  public void setTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanDefaultSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanDefaultSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanMinSpeedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanMinSpeedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanMinSpeedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMinSpeed()
  public List getPayload()
  public void setMinSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanMinSpeedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMinSpeed()
  public List getPayload()
  public void setMinSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanMinSpeedSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMinSpeed()
  public List getPayload()
  public void setMinSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanMinSpeedSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMinSpeed()
  public List getPayload()
  public void setMinSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMODE_OFF()
  public Short getMODE_ON()
  public Short getMode()
  public List getPayload()
  public void setMODE_OFF(Short)
  public void setMODE_ON(Short)
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMODE_OFF()
  public Short getMODE_ON()
  public Short getMode()
  public List getPayload()
  public void setMODE_OFF(Short)
  public void setMODE_ON(Short)
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMODE_OFF()
  public Short getMODE_ON()
  public Short getMode()
  public List getPayload()
  public void setMODE_OFF(Short)
  public void setMODE_ON(Short)
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMODE_OFF()
  public Short getMODE_ON()
  public Short getMode()
  public List getPayload()
  public void setMODE_OFF(Short)
  public void setMODE_ON(Short)
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSetupGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSetupGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSetupReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getAlarmTemperatureValue()
  public Short getBoostTime()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMODE_OFF()
  public Short getMODE_ON()
  public Short getMinSpeed()
  public Short getMode()
  public List getPayload()
  public Short getPrecision1()
  public Short getPrecision2()
  public Short getPrecision3()
  public Short getScale1()
  public Short getScale2()
  public Short getScale3()
  public Short getSize1()
  public Short getSize2()
  public Short getSize3()
  public List getStartTemperature()
  public List getStopTemperature()
  public Short getStopTime()
  public void setAlarmTemperatureValue(List)
  public void setBoostTime(Short)
  public void setMODE_OFF(Short)
  public void setMODE_ON(Short)
  public void setMinSpeed(Short)
  public void setMode(Short)
  public void setPrecision1(Short)
  public void setPrecision2(Short)
  public void setPrecision3(Short)
  public void setScale1(Short)
  public void setScale2(Short)
  public void setScale3(Short)
  public void setSize1(Short)
  public void setSize2(Short)
  public void setSize3(Short)
  public void setStartTemperature(List)
  public void setStopTemperature(List)
  public void setStopTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSetupReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getAlarmTemperatureValue()
  public Short getBoostTime()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMODE_OFF()
  public Short getMODE_ON()
  public Short getMinSpeed()
  public Short getMode()
  public List getPayload()
  public Short getPrecision1()
  public Short getPrecision2()
  public Short getPrecision3()
  public Short getScale1()
  public Short getScale2()
  public Short getScale3()
  public Short getSize1()
  public Short getSize2()
  public Short getSize3()
  public List getStartTemperature()
  public List getStopTemperature()
  public Short getStopTime()
  public void setAlarmTemperatureValue(List)
  public void setBoostTime(Short)
  public void setMODE_OFF(Short)
  public void setMODE_ON(Short)
  public void setMinSpeed(Short)
  public void setMode(Short)
  public void setPrecision1(Short)
  public void setPrecision2(Short)
  public void setPrecision3(Short)
  public void setScale1(Short)
  public void setScale2(Short)
  public void setScale3(Short)
  public void setSize1(Short)
  public void setSize2(Short)
  public void setSize3(Short)
  public void setStartTemperature(List)
  public void setStopTemperature(List)
  public void setStopTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSetupSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getAlarmTemperatureValue()
  public Short getBoostTime()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMODE_OFF()
  public Short getMODE_ON()
  public Short getMinSpeed()
  public Short getMode()
  public List getPayload()
  public Short getPrecision1()
  public Short getPrecision2()
  public Short getPrecision3()
  public Short getScale1()
  public Short getScale2()
  public Short getScale3()
  public Short getSize1()
  public Short getSize2()
  public Short getSize3()
  public List getStartTemperature()
  public List getStopTemperature()
  public Short getStopTime()
  public void setAlarmTemperatureValue(List)
  public void setBoostTime(Short)
  public void setMODE_OFF(Short)
  public void setMODE_ON(Short)
  public void setMinSpeed(Short)
  public void setMode(Short)
  public void setPrecision1(Short)
  public void setPrecision2(Short)
  public void setPrecision3(Short)
  public void setScale1(Short)
  public void setScale2(Short)
  public void setScale3(Short)
  public void setSize1(Short)
  public void setSize2(Short)
  public void setSize3(Short)
  public void setStartTemperature(List)
  public void setStopTemperature(List)
  public void setStopTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSetupSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getAlarmTemperatureValue()
  public Short getBoostTime()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMODE_OFF()
  public Short getMODE_ON()
  public Short getMinSpeed()
  public Short getMode()
  public List getPayload()
  public Short getPrecision1()
  public Short getPrecision2()
  public Short getPrecision3()
  public Short getScale1()
  public Short getScale2()
  public Short getScale3()
  public Short getSize1()
  public Short getSize2()
  public Short getSize3()
  public List getStartTemperature()
  public List getStopTemperature()
  public Short getStopTime()
  public void setAlarmTemperatureValue(List)
  public void setBoostTime(Short)
  public void setMODE_OFF(Short)
  public void setMODE_ON(Short)
  public void setMinSpeed(Short)
  public void setMode(Short)
  public void setPrecision1(Short)
  public void setPrecision2(Short)
  public void setPrecision3(Short)
  public void setScale1(Short)
  public void setScale2(Short)
  public void setScale3(Short)
  public void setSize1(Short)
  public void setSize2(Short)
  public void setSize3(Short)
  public void setStartTemperature(List)
  public void setStopTemperature(List)
  public void setStopTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSpeedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSpeedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSpeedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSpeed()
  public void setSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSpeedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSpeed()
  public void setSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSpeedSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSpeed()
  public void setSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanSpeedSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSpeed()
  public void setSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStartTempGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStartTempGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStartTempReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStartTempReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStartTempSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStartTempSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSTATE_BOOST()
  public Short getSTATE_CHIMNEY_FIRE()
  public Short getSTATE_EXHAUST()
  public Short getSTATE_EXTERNAL_ALARM()
  public Short getSTATE_OFF()
  public Short getSTATE_RELOAD()
  public Short getSTATE_SENSOR_FAILURE()
  public Short getSTATE_SERVICE()
  public Short getSTATE_STOP()
  public Short getSTATE_VENTING()
  public Short getSTATE_VENTING_EX()
  public Short getState()
  public void setSTATE_BOOST(Short)
  public void setSTATE_CHIMNEY_FIRE(Short)
  public void setSTATE_EXHAUST(Short)
  public void setSTATE_EXTERNAL_ALARM(Short)
  public void setSTATE_OFF(Short)
  public void setSTATE_RELOAD(Short)
  public void setSTATE_SENSOR_FAILURE(Short)
  public void setSTATE_SERVICE(Short)
  public void setSTATE_STOP(Short)
  public void setSTATE_VENTING(Short)
  public void setSTATE_VENTING_EX(Short)
  public void setState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSTATE_BOOST()
  public Short getSTATE_CHIMNEY_FIRE()
  public Short getSTATE_EXHAUST()
  public Short getSTATE_EXTERNAL_ALARM()
  public Short getSTATE_OFF()
  public Short getSTATE_RELOAD()
  public Short getSTATE_SENSOR_FAILURE()
  public Short getSTATE_SERVICE()
  public Short getSTATE_STOP()
  public Short getSTATE_VENTING()
  public Short getSTATE_VENTING_EX()
  public Short getState()
  public void setSTATE_BOOST(Short)
  public void setSTATE_CHIMNEY_FIRE(Short)
  public void setSTATE_EXHAUST(Short)
  public void setSTATE_EXTERNAL_ALARM(Short)
  public void setSTATE_OFF(Short)
  public void setSTATE_RELOAD(Short)
  public void setSTATE_SENSOR_FAILURE(Short)
  public void setSTATE_SERVICE(Short)
  public void setSTATE_STOP(Short)
  public void setSTATE_VENTING(Short)
  public void setSTATE_VENTING_EX(Short)
  public void setState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStateSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSTATE_NEXT_STATE()
  public Short getState()
  public void setSTATE_NEXT_STATE(Short)
  public void setState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStateSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSTATE_NEXT_STATE()
  public Short getState()
  public void setSTATE_NEXT_STATE(Short)
  public void setState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAlarmTemperatureExceeded()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getExternalAlarm()
  public Short getNotUsed()
  public List getPayload()
  public Short getPrecision()
  public Short getSTATE_BOOST()
  public Short getSTATE_CHIMNEY_FIRE()
  public Short getSTATE_EXHAUST()
  public Short getSTATE_EXTERNAL_ALARM()
  public Short getSTATE_OFF()
  public Short getSTATE_RELOAD()
  public Short getSTATE_SENSOR_FAILURE()
  public Short getSTATE_SERVICE()
  public Short getSTATE_STOP()
  public Short getSTATE_VENTING()
  public Short getSTATE_VENTING_EX()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Boolean getSensorError()
  public Boolean getService()
  public Short getSize()
  public Short getSpeed()
  public Boolean getSpeedChangeEnable()
  public Boolean getStartTemperatureExceeded()
  public Short getState()
  public List getValue()
  public void setAlarmTemperatureExceeded(Boolean)
  public void setExternalAlarm(Boolean)
  public void setNotUsed(Short)
  public void setPrecision(Short)
  public void setSTATE_BOOST(Short)
  public void setSTATE_CHIMNEY_FIRE(Short)
  public void setSTATE_EXHAUST(Short)
  public void setSTATE_EXTERNAL_ALARM(Short)
  public void setSTATE_OFF(Short)
  public void setSTATE_RELOAD(Short)
  public void setSTATE_SENSOR_FAILURE(Short)
  public void setSTATE_SERVICE(Short)
  public void setSTATE_STOP(Short)
  public void setSTATE_VENTING(Short)
  public void setSTATE_VENTING_EX(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSensorError(Boolean)
  public void setService(Boolean)
  public void setSize(Short)
  public void setSpeed(Short)
  public void setSpeedChangeEnable(Boolean)
  public void setStartTemperatureExceeded(Boolean)
  public void setState(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAlarmTemperatureExceeded()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getExternalAlarm()
  public Short getNotUsed()
  public List getPayload()
  public Short getPrecision()
  public Short getSTATE_BOOST()
  public Short getSTATE_CHIMNEY_FIRE()
  public Short getSTATE_EXHAUST()
  public Short getSTATE_EXTERNAL_ALARM()
  public Short getSTATE_OFF()
  public Short getSTATE_RELOAD()
  public Short getSTATE_SENSOR_FAILURE()
  public Short getSTATE_SERVICE()
  public Short getSTATE_STOP()
  public Short getSTATE_VENTING()
  public Short getSTATE_VENTING_EX()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Boolean getSensorError()
  public Boolean getService()
  public Short getSize()
  public Short getSpeed()
  public Boolean getSpeedChangeEnable()
  public Boolean getStartTemperatureExceeded()
  public Short getState()
  public List getValue()
  public void setAlarmTemperatureExceeded(Boolean)
  public void setExternalAlarm(Boolean)
  public void setNotUsed(Short)
  public void setPrecision(Short)
  public void setSTATE_BOOST(Short)
  public void setSTATE_CHIMNEY_FIRE(Short)
  public void setSTATE_EXHAUST(Short)
  public void setSTATE_EXTERNAL_ALARM(Short)
  public void setSTATE_OFF(Short)
  public void setSTATE_RELOAD(Short)
  public void setSTATE_SENSOR_FAILURE(Short)
  public void setSTATE_SERVICE(Short)
  public void setSTATE_STOP(Short)
  public void setSTATE_VENTING(Short)
  public void setSTATE_VENTING_EX(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSensorError(Boolean)
  public void setService(Boolean)
  public void setSize(Short)
  public void setSpeed(Short)
  public void setSpeedChangeEnable(Boolean)
  public void setStartTemperatureExceeded(Boolean)
  public void setState(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTempGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTempGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTempReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTempReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTempSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTempSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTimeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTimeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTimeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTime()
  public void setTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTimeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTime()
  public void setTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTimeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTime()
  public void setTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.chimneyfanv1.ChimneyFanStopTimeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTime()
  public void setTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleChangedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleChangedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleChangedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChangecounter()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setChangecounter(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleChangedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChangecounter()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setChangecounter(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getWeekday()
  public void setWeekday(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getWeekday()
  public void setWeekday(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleOverrideGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleOverrideGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleOverrideReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short OVERRIDE_STATE_NO_OVERRIDE = 0
  public static Short OVERRIDE_STATE_PERMANENT_OVERRIDE = 2
  public static Short OVERRIDE_STATE_RESERVED3 = 3
  public static Short OVERRIDE_STATE_TEMPORARY_OVERRIDE = 1
  public Short getOverrideState()
  public Short getOverrideType()
  public List getPayload()
  public void setOverrideState(Short)
  public void setOverrideType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleOverrideReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short OVERRIDE_STATE_NO_OVERRIDE = 0
  public static Short OVERRIDE_STATE_PERMANENT_OVERRIDE = 2
  public static Short OVERRIDE_STATE_RESERVED3 = 3
  public static Short OVERRIDE_STATE_TEMPORARY_OVERRIDE = 1
  public Short getOverrideState()
  public Short getOverrideType()
  public List getPayload()
  public void setOverrideState(Short)
  public void setOverrideType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleOverrideSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short OVERRIDE_STATE_NO_OVERRIDE = 0
  public static Short OVERRIDE_STATE_PERMANENT_OVERRIDE = 2
  public static Short OVERRIDE_STATE_RESERVED3 = 3
  public static Short OVERRIDE_STATE_TEMPORARY_OVERRIDE = 1
  public Short getOverrideState()
  public Short getOverrideType()
  public List getPayload()
  public void setOverrideState(Short)
  public void setOverrideType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleOverrideSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short OVERRIDE_STATE_NO_OVERRIDE = 0
  public static Short OVERRIDE_STATE_PERMANENT_OVERRIDE = 2
  public static Short OVERRIDE_STATE_RESERVED3 = 3
  public static Short OVERRIDE_STATE_TEMPORARY_OVERRIDE = 1
  public Short getOverrideState()
  public Short getOverrideType()
  public List getPayload()
  public void setOverrideState(Short)
  public void setOverrideType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Integer getSwitchpoint0()
  public Integer getSwitchpoint1()
  public Integer getSwitchpoint2()
  public Integer getSwitchpoint3()
  public Integer getSwitchpoint4()
  public Integer getSwitchpoint5()
  public Integer getSwitchpoint6()
  public Integer getSwitchpoint7()
  public Integer getSwitchpoint8()
  public Short getWeekday()
  public void setSwitchpoint0(Integer)
  public void setSwitchpoint1(Integer)
  public void setSwitchpoint2(Integer)
  public void setSwitchpoint3(Integer)
  public void setSwitchpoint4(Integer)
  public void setSwitchpoint5(Integer)
  public void setSwitchpoint6(Integer)
  public void setSwitchpoint7(Integer)
  public void setSwitchpoint8(Integer)
  public void setWeekday(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Integer getSwitchpoint0()
  public Integer getSwitchpoint1()
  public Integer getSwitchpoint2()
  public Integer getSwitchpoint3()
  public Integer getSwitchpoint4()
  public Integer getSwitchpoint5()
  public Integer getSwitchpoint6()
  public Integer getSwitchpoint7()
  public Integer getSwitchpoint8()
  public Short getWeekday()
  public void setSwitchpoint0(Integer)
  public void setSwitchpoint1(Integer)
  public void setSwitchpoint2(Integer)
  public void setSwitchpoint3(Integer)
  public void setSwitchpoint4(Integer)
  public void setSwitchpoint5(Integer)
  public void setSwitchpoint6(Integer)
  public void setSwitchpoint7(Integer)
  public void setSwitchpoint8(Integer)
  public void setWeekday(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Integer getSwitchpoint0()
  public Integer getSwitchpoint1()
  public Integer getSwitchpoint2()
  public Integer getSwitchpoint3()
  public Integer getSwitchpoint4()
  public Integer getSwitchpoint5()
  public Integer getSwitchpoint6()
  public Integer getSwitchpoint7()
  public Integer getSwitchpoint8()
  public Short getWeekday()
  public void setSwitchpoint0(Integer)
  public void setSwitchpoint1(Integer)
  public void setSwitchpoint2(Integer)
  public void setSwitchpoint3(Integer)
  public void setSwitchpoint4(Integer)
  public void setSwitchpoint5(Integer)
  public void setSwitchpoint6(Integer)
  public void setSwitchpoint7(Integer)
  public void setSwitchpoint8(Integer)
  public void setWeekday(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.climatecontrolschedulev1.ScheduleSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Integer getSwitchpoint0()
  public Integer getSwitchpoint1()
  public Integer getSwitchpoint2()
  public Integer getSwitchpoint3()
  public Integer getSwitchpoint4()
  public Integer getSwitchpoint5()
  public Integer getSwitchpoint6()
  public Integer getSwitchpoint7()
  public Integer getSwitchpoint8()
  public Short getWeekday()
  public void setSwitchpoint0(Integer)
  public void setSwitchpoint1(Integer)
  public void setSwitchpoint2(Integer)
  public void setSwitchpoint3(Integer)
  public void setSwitchpoint4(Integer)
  public void setSwitchpoint5(Integer)
  public void setSwitchpoint6(Integer)
  public void setSwitchpoint7(Integer)
  public void setSwitchpoint8(Integer)
  public void setWeekday(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.clockv1.ClockGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.clockv1.ClockGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.clockv1.ClockReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHour()
  public Short getMinute()
  public List getPayload()
  public Short getWeekday()
  public void setHour(Short)
  public void setMinute(Short)
  public void setWeekday(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.clockv1.ClockReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHour()
  public Short getMinute()
  public List getPayload()
  public Short getWeekday()
  public void setHour(Short)
  public void setMinute(Short)
  public void setWeekday(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.clockv1.ClockSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHour()
  public Short getMinute()
  public List getPayload()
  public Short getWeekday()
  public void setHour(Short)
  public void setMinute(Short)
  public void setWeekday(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.clockv1.ClockSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHour()
  public Short getMinute()
  public List getPayload()
  public Short getWeekday()
  public void setHour(Short)
  public void setMinute(Short)
  public void setWeekday(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv1.ConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getParameterNumber()
  public List getPayload()
  public void setParameterNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv1.ConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getParameterNumber()
  public List getPayload()
  public void setParameterNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv1.ConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getConfigurationValue()
  public Short getParameterNumber()
  public List getPayload()
  public java.math.BigInteger getScaledConfigurationValue()
  public Short getSize()
  public void setConfigurationValue(List)
  public void setParameterNumber(Short)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv1.ConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getConfigurationValue()
  public Short getParameterNumber()
  public List getPayload()
  public java.math.BigInteger getScaledConfigurationValue()
  public Short getSize()
  public void setConfigurationValue(List)
  public void setParameterNumber(Short)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv1.ConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getConfigurationValue()
  public Boolean getDefaultValue()
  public Short getParameterNumber()
  public List getPayload()
  public Short getReserved11()
  public java.math.BigInteger getScaledConfigurationValue()
  public Short getSize()
  public void setConfigurationValue(List)
  public void setDefaultValue(Boolean)
  public void setParameterNumber(Short)
  public void setReserved11(Short)
  public void setScaledConfigurationValue(java.math.BigInteger)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv1.ConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getConfigurationValue()
  public Boolean getDefaultValue()
  public Short getParameterNumber()
  public List getPayload()
  public Short getReserved11()
  public java.math.BigInteger getScaledConfigurationValue()
  public Short getSize()
  public void setConfigurationValue(List)
  public void setDefaultValue(Boolean)
  public void setParameterNumber(Short)
  public void setReserved11(Short)
  public void setScaledConfigurationValue(java.math.BigInteger)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationBulkGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfParameters()
  public Integer getParameterOffset()
  public List getPayload()
  public void setNumberOfParameters(Short)
  public void setParameterOffset(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationBulkGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfParameters()
  public Integer getParameterOffset()
  public List getPayload()
  public void setNumberOfParameters(Short)
  public void setParameterOffset(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationBulkReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDefaultValue()
  public Boolean getHandshake()
  public Short getNumberOfParameters()
  public Integer getParameterOffset()
  public List getPayload()
  public Short getReportsToFollow()
  public Short getSize()
  public void setDefaultValue(Boolean)
  public void setHandshake(Boolean)
  public void setNumberOfParameters(Short)
  public void setParameterOffset(Integer)
  public void setReportsToFollow(Short)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationBulkReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDefaultValue()
  public Boolean getHandshake()
  public Short getNumberOfParameters()
  public Integer getParameterOffset()
  public List getPayload()
  public Short getReportsToFollow()
  public Short getSize()
  public void setDefaultValue(Boolean)
  public void setHandshake(Boolean)
  public void setNumberOfParameters(Short)
  public void setParameterOffset(Integer)
  public void setReportsToFollow(Short)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationBulkSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDefaultValue()
  public Boolean getHandshake()
  public Short getNumberOfParameters()
  public Integer getParameterOffset()
  public List getPayload()
  public Short getSize()
  public void setDefaultValue(Boolean)
  public void setHandshake(Boolean)
  public void setNumberOfParameters(Short)
  public void setParameterOffset(Integer)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationBulkSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDefaultValue()
  public Boolean getHandshake()
  public Short getNumberOfParameters()
  public Integer getParameterOffset()
  public List getPayload()
  public Short getSize()
  public void setDefaultValue(Boolean)
  public void setHandshake(Boolean)
  public void setNumberOfParameters(Short)
  public void setParameterOffset(Integer)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.configurationv1.ConfigurationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationGet.getParameterNumber()
  public List hubitat.zwave.commands.configurationv1.ConfigurationGet.getPayload()
  public void hubitat.zwave.commands.configurationv1.ConfigurationGet.setParameterNumber(Short)
  public List hubitat.zwave.commands.configurationv1.ConfigurationGet.super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.configurationv1.ConfigurationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationGet.getParameterNumber()
  public List hubitat.zwave.commands.configurationv1.ConfigurationGet.getPayload()
  public void hubitat.zwave.commands.configurationv1.ConfigurationGet.setParameterNumber(Short)
  public List hubitat.zwave.commands.configurationv1.ConfigurationGet.super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.configurationv1.ConfigurationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.configurationv1.ConfigurationReport.getConfigurationValue()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationReport.getParameterNumber()
  public List hubitat.zwave.commands.configurationv1.ConfigurationReport.getPayload()
  public java.math.BigInteger hubitat.zwave.commands.configurationv1.ConfigurationReport.getScaledConfigurationValue()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationReport.getSize()
  public void hubitat.zwave.commands.configurationv1.ConfigurationReport.setConfigurationValue(List)
  public void hubitat.zwave.commands.configurationv1.ConfigurationReport.setParameterNumber(Short)
  public void hubitat.zwave.commands.configurationv1.ConfigurationReport.setSize(Short)
  public List hubitat.zwave.commands.configurationv1.ConfigurationReport.super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.configurationv1.ConfigurationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.configurationv1.ConfigurationReport.getConfigurationValue()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationReport.getParameterNumber()
  public List hubitat.zwave.commands.configurationv1.ConfigurationReport.getPayload()
  public java.math.BigInteger hubitat.zwave.commands.configurationv1.ConfigurationReport.getScaledConfigurationValue()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationReport.getSize()
  public void hubitat.zwave.commands.configurationv1.ConfigurationReport.setConfigurationValue(List)
  public void hubitat.zwave.commands.configurationv1.ConfigurationReport.setParameterNumber(Short)
  public void hubitat.zwave.commands.configurationv1.ConfigurationReport.setSize(Short)
  public List hubitat.zwave.commands.configurationv1.ConfigurationReport.super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.configurationv1.ConfigurationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.configurationv1.ConfigurationSet.getConfigurationValue()
  public Boolean hubitat.zwave.commands.configurationv1.ConfigurationSet.getDefaultValue()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationSet.getParameterNumber()
  public List hubitat.zwave.commands.configurationv1.ConfigurationSet.getPayload()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationSet.getReserved11()
  public java.math.BigInteger hubitat.zwave.commands.configurationv1.ConfigurationSet.getScaledConfigurationValue()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationSet.getSize()
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setConfigurationValue(List)
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setDefaultValue(Boolean)
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setParameterNumber(Short)
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setReserved11(Short)
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setScaledConfigurationValue(java.math.BigInteger)
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setSize(Short)
  public List hubitat.zwave.commands.configurationv1.ConfigurationSet.super$2$getPayload()
]
class hubitat.zwave.commands.configurationv2.ConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.configurationv1.ConfigurationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.configurationv1.ConfigurationSet.getConfigurationValue()
  public Boolean hubitat.zwave.commands.configurationv1.ConfigurationSet.getDefaultValue()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationSet.getParameterNumber()
  public List hubitat.zwave.commands.configurationv1.ConfigurationSet.getPayload()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationSet.getReserved11()
  public java.math.BigInteger hubitat.zwave.commands.configurationv1.ConfigurationSet.getScaledConfigurationValue()
  public Short hubitat.zwave.commands.configurationv1.ConfigurationSet.getSize()
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setConfigurationValue(List)
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setDefaultValue(Boolean)
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setParameterNumber(Short)
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setReserved11(Short)
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setScaledConfigurationValue(java.math.BigInteger)
  public void hubitat.zwave.commands.configurationv1.ConfigurationSet.setSize(Short)
  public List hubitat.zwave.commands.configurationv1.ConfigurationSet.super$2$getPayload()
]
class hubitat.zwave.commands.controllerreplicationv1.CtrlReplicationTransferGroup:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupId()
  public Short getNodeId()
  public List getPayload()
  public Short getSequenceNumber()
  public void setGroupId(Short)
  public void setNodeId(Short)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.controllerreplicationv1.CtrlReplicationTransferGroup:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupId()
  public Short getNodeId()
  public List getPayload()
  public Short getSequenceNumber()
  public void setGroupId(Short)
  public void setNodeId(Short)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.controllerreplicationv1.CtrlReplicationTransferGroupName:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupId()
  public List getGroupName()
  public List getPayload()
  public Short getSequenceNumber()
  public void setGroupId(Short)
  public void setGroupName(List)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.controllerreplicationv1.CtrlReplicationTransferGroupName:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupId()
  public List getGroupName()
  public List getPayload()
  public Short getSequenceNumber()
  public void setGroupId(Short)
  public void setGroupName(List)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.controllerreplicationv1.CtrlReplicationTransferScene:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLevel()
  public Short getNodeId()
  public List getPayload()
  public Short getSceneId()
  public Short getSequenceNumber()
  public void setLevel(Short)
  public void setNodeId(Short)
  public void setSceneId(Short)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.controllerreplicationv1.CtrlReplicationTransferScene:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLevel()
  public Short getNodeId()
  public List getPayload()
  public Short getSceneId()
  public Short getSequenceNumber()
  public void setLevel(Short)
  public void setNodeId(Short)
  public void setSceneId(Short)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.controllerreplicationv1.CtrlReplicationTransferSceneName:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSceneId()
  public List getSceneName()
  public Short getSequenceNumber()
  public void setSceneId(Short)
  public void setSceneName(List)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.controllerreplicationv1.CtrlReplicationTransferSceneName:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSceneId()
  public List getSceneName()
  public Short getSequenceNumber()
  public void setSceneId(Short)
  public void setSceneName(List)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.crc16encapv1.Crc16Encap:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short getCommand()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public List getPayload()
  public void setChecksum(Integer)
  public void setCommand(Short)
  public void setCommandClass(Short)
  public void setData(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.crc16encapv1.Crc16Encap:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short getCommand()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public List getPayload()
  public void setChecksum(Integer)
  public void setCommand(Short)
  public void setCommandClass(Short)
  public void setData(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpconfigv1.DcpListRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpconfigv1.DcpListRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpconfigv1.DcpListSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getDcpRateId()
  public Short getDurationHourTime()
  public Short getDurationMinuteTime()
  public Short getDurationSecondTime()
  public Short getEventPriority()
  public Short getHourLocalTime()
  public Short getLoadShedding()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Short getNumberOfDc()
  public List getPayload()
  public Short getRandomizationInterval()
  public Short getSecondLocalTime()
  public Short getStartAssociationGroup()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopAssociationGroup()
  public Integer getYear()
  public void setDay(Short)
  public void setDcpRateId(Short)
  public void setDurationHourTime(Short)
  public void setDurationMinuteTime(Short)
  public void setDurationSecondTime(Short)
  public void setEventPriority(Short)
  public void setHourLocalTime(Short)
  public void setLoadShedding(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setNumberOfDc(Short)
  public void setRandomizationInterval(Short)
  public void setSecondLocalTime(Short)
  public void setStartAssociationGroup(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopAssociationGroup(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpconfigv1.DcpListSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getDcpRateId()
  public Short getDurationHourTime()
  public Short getDurationMinuteTime()
  public Short getDurationSecondTime()
  public Short getEventPriority()
  public Short getHourLocalTime()
  public Short getLoadShedding()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Short getNumberOfDc()
  public List getPayload()
  public Short getRandomizationInterval()
  public Short getSecondLocalTime()
  public Short getStartAssociationGroup()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopAssociationGroup()
  public Integer getYear()
  public void setDay(Short)
  public void setDcpRateId(Short)
  public void setDurationHourTime(Short)
  public void setDurationMinuteTime(Short)
  public void setDurationSecondTime(Short)
  public void setEventPriority(Short)
  public void setHourLocalTime(Short)
  public void setLoadShedding(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setNumberOfDc(Short)
  public void setRandomizationInterval(Short)
  public void setSecondLocalTime(Short)
  public void setStartAssociationGroup(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopAssociationGroup(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpconfigv1.DcpListSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpconfigv1.DcpListSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpconfigv1.DcpListSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDcpListSize()
  public Short getFreeDcpListEntries()
  public List getPayload()
  public void setDcpListSize(Short)
  public void setFreeDcpListEntries(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpconfigv1.DcpListSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDcpListSize()
  public Short getFreeDcpListEntries()
  public List getPayload()
  public void setDcpListSize(Short)
  public void setFreeDcpListEntries(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpmonitorv1.DcpEventStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpmonitorv1.DcpEventStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpmonitorv1.DcpEventStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getEventStatus()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDay(Short)
  public void setEventStatus(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpmonitorv1.DcpEventStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getEventStatus()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDay(Short)
  public void setEventStatus(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpmonitorv1.DcpListGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpmonitorv1.DcpListGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpmonitorv1.DcpListReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getDcpId()
  public Short getDurationHourTime()
  public Short getDurationMinuteTime()
  public Short getDurationSecondTime()
  public Short getEventPriority()
  public Short getHourLocalTime()
  public Short getLoadShedding()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Short getNumberOfDc()
  public List getPayload()
  public Short getRandomizationInterval()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Short getStartAssociationGroup()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopAssociationGroup()
  public Integer getYear()
  public void setDay(Short)
  public void setDcpId(Short)
  public void setDurationHourTime(Short)
  public void setDurationMinuteTime(Short)
  public void setDurationSecondTime(Short)
  public void setEventPriority(Short)
  public void setHourLocalTime(Short)
  public void setLoadShedding(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setNumberOfDc(Short)
  public void setRandomizationInterval(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setStartAssociationGroup(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopAssociationGroup(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dcpmonitorv1.DcpListReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getDcpId()
  public Short getDurationHourTime()
  public Short getDurationMinuteTime()
  public Short getDurationSecondTime()
  public Short getEventPriority()
  public Short getHourLocalTime()
  public Short getLoadShedding()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Short getNumberOfDc()
  public List getPayload()
  public Short getRandomizationInterval()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Short getStartAssociationGroup()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopAssociationGroup()
  public Integer getYear()
  public void setDay(Short)
  public void setDcpId(Short)
  public void setDurationHourTime(Short)
  public void setDurationMinuteTime(Short)
  public void setDurationSecondTime(Short)
  public void setEventPriority(Short)
  public void setHourLocalTime(Short)
  public void setLoadShedding(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setNumberOfDc(Short)
  public void setRandomizationInterval(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setStartAssociationGroup(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopAssociationGroup(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.deviceresetlocallyv1.DeviceResetLocallyNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.deviceresetlocallyv1.DeviceResetLocallyNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxAddressGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxAddressGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxAddressReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChannelId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getPageId()
  public List getPayload()
  public void setChannelId(Short)
  public void setPageId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxAddressReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChannelId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getPageId()
  public List getPayload()
  public void setChannelId(Short)
  public void setPageId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxAddressSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChannelId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getPageId()
  public List getPayload()
  public void setChannelId(Short)
  public void setPageId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxAddressSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChannelId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getPageId()
  public List getPayload()
  public void setChannelId(Short)
  public void setPageId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChannelId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setChannelId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChannelId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setChannelId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxCapabilityReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChannelId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDeviceChannels()
  public Short getMaxChannels()
  public List getPayload()
  public Integer getPropertyId()
  public void setChannelId(Short)
  public void setDeviceChannels(Short)
  public void setMaxChannels(Short)
  public void setPropertyId(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxCapabilityReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChannelId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDeviceChannels()
  public Short getMaxChannels()
  public List getPayload()
  public Integer getPropertyId()
  public void setChannelId(Short)
  public void setDeviceChannels(Short)
  public void setMaxChannels(Short)
  public void setPropertyId(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxData:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getDmxChannel()
  public Short getPage()
  public List getPayload()
  public Short getSequenceNo()
  public Short getSource()
  public void setDmxChannel(List)
  public void setPage(Short)
  public void setSequenceNo(Short)
  public void setSource(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.dmxv1.DmxData:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getDmxChannel()
  public Short getPage()
  public List getPayload()
  public Short getSequenceNo()
  public Short getSource()
  public void setDmxChannel(List)
  public void setPage(Short)
  public void setSequenceNo(Short)
  public void setSource(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockloggingv1.DoorLockLoggingRecordsSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockloggingv1.DoorLockLoggingRecordsSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockloggingv1.DoorLockLoggingRecordsSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaxRecordsStored()
  public List getPayload()
  public void setMaxRecordsStored(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockloggingv1.DoorLockLoggingRecordsSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaxRecordsStored()
  public List getPayload()
  public void setMaxRecordsStored(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockloggingv1.RecordGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRecordNumber()
  public void setRecordNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockloggingv1.RecordGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRecordNumber()
  public void setRecordNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockloggingv1.RecordReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getEventType()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getRecordNumber()
  public Short getRecordStatus()
  public Short getSecondLocalTime()
  public List getUserCode()
  public Short getUserCodeLength()
  public Short getUserIdentifier()
  public Integer getYear()
  public void setDay(Short)
  public void setEventType(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setRecordNumber(Short)
  public void setRecordStatus(Short)
  public void setSecondLocalTime(Short)
  public void setUserCode(List)
  public void setUserCodeLength(Short)
  public void setUserIdentifier(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockloggingv1.RecordReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getEventType()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getRecordNumber()
  public Short getRecordStatus()
  public Short getSecondLocalTime()
  public List getUserCode()
  public Short getUserCodeLength()
  public Short getUserIdentifier()
  public Integer getYear()
  public void setDay(Short)
  public void setEventType(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setRecordNumber(Short)
  public void setRecordStatus(Short)
  public void setSecondLocalTime(Short)
  public void setUserCode(List)
  public void setUserCodeLength(Short)
  public void setUserIdentifier(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getInsideDoorHandlesState()
  public Short getLockTimeoutMinutes()
  public Short getLockTimeoutSeconds()
  public static Short OPERATION_TYPE_CONSTANT_OPERATION = 1
  public static Short OPERATION_TYPE_TIMED_OPERATION = 2
  public Short getOperationType()
  public Short getOutsideDoorHandlesState()
  public List getPayload()
  public void setInsideDoorHandlesState(Short)
  public void setLockTimeoutMinutes(Short)
  public void setLockTimeoutSeconds(Short)
  public void setOperationType(Short)
  public void setOutsideDoorHandlesState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getInsideDoorHandlesState()
  public Short getLockTimeoutMinutes()
  public Short getLockTimeoutSeconds()
  public static Short OPERATION_TYPE_CONSTANT_OPERATION = 1
  public static Short OPERATION_TYPE_TIMED_OPERATION = 2
  public Short getOperationType()
  public Short getOutsideDoorHandlesState()
  public List getPayload()
  public void setInsideDoorHandlesState(Short)
  public void setLockTimeoutMinutes(Short)
  public void setLockTimeoutSeconds(Short)
  public void setOperationType(Short)
  public void setOutsideDoorHandlesState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getInsideDoorHandlesState()
  public Short getLockTimeoutMinutes()
  public Short getLockTimeoutSeconds()
  public static Short OPERATION_TYPE_CONSTANT_OPERATION = 1
  public static Short OPERATION_TYPE_TIMED_OPERATION = 2
  public Short getOperationType()
  public Short getOutsideDoorHandlesState()
  public List getPayload()
  public void setInsideDoorHandlesState(Short)
  public void setLockTimeoutMinutes(Short)
  public void setLockTimeoutSeconds(Short)
  public void setOperationType(Short)
  public void setOutsideDoorHandlesState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getInsideDoorHandlesState()
  public Short getLockTimeoutMinutes()
  public Short getLockTimeoutSeconds()
  public static Short OPERATION_TYPE_CONSTANT_OPERATION = 1
  public static Short OPERATION_TYPE_TIMED_OPERATION = 2
  public Short getOperationType()
  public Short getOutsideDoorHandlesState()
  public List getPayload()
  public void setInsideDoorHandlesState(Short)
  public void setLockTimeoutMinutes(Short)
  public void setLockTimeoutSeconds(Short)
  public void setOperationType(Short)
  public void setOutsideDoorHandlesState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockOperationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockOperationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockOperationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short DOOR_LOCK_MODE_DOOR_SECURED = 255
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED = 0
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES = 16
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT = 17
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES = 32
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT = 33
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_WITH_TIMEOUT = 1
  public Short getDoorCondition()
  public Short getDoorLockMode()
  public Short getInsideDoorHandlesMode()
  public Short getLockTimeoutMinutes()
  public Short getLockTimeoutSeconds()
  public Short getOutsideDoorHandlesMode()
  public List getPayload()
  public void setDoorCondition(Short)
  public void setDoorLockMode(Short)
  public void setInsideDoorHandlesMode(Short)
  public void setLockTimeoutMinutes(Short)
  public void setLockTimeoutSeconds(Short)
  public void setOutsideDoorHandlesMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockOperationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short DOOR_LOCK_MODE_DOOR_SECURED = 255
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED = 0
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES = 16
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT = 17
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES = 32
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT = 33
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_WITH_TIMEOUT = 1
  public Short getDoorCondition()
  public Short getDoorLockMode()
  public Short getInsideDoorHandlesMode()
  public Short getLockTimeoutMinutes()
  public Short getLockTimeoutSeconds()
  public Short getOutsideDoorHandlesMode()
  public List getPayload()
  public void setDoorCondition(Short)
  public void setDoorLockMode(Short)
  public void setInsideDoorHandlesMode(Short)
  public void setLockTimeoutMinutes(Short)
  public void setLockTimeoutSeconds(Short)
  public void setOutsideDoorHandlesMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockOperationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommandClassId()
  public Short getCommandId()
  public static Short DOOR_LOCK_MODE_DOOR_SECURED = 255
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED = 0
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES = 16
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT = 17
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES = 32
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT = 33
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_WITH_TIMEOUT = 1
  public Short getDoorLockMode()
  public List getPayload()
  public void setDoorLockMode(Short)
  public Short super$2$getCommandClassId()
  public Short super$2$getCommandId()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.doorlockv1.DoorLockOperationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommandClassId()
  public Short getCommandId()
  public static Short DOOR_LOCK_MODE_DOOR_SECURED = 255
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED = 0
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES = 16
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT = 17
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES = 32
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT = 33
  public static Short DOOR_LOCK_MODE_DOOR_UNSECURED_WITH_TIMEOUT = 1
  public Short getDoorLockMode()
  public List getPayload()
  public void setDoorLockMode(Short)
  public Short super$2$getCommandClassId()
  public Short super$2$getCommandId()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.energyproductionv1.EnergyProductionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short PARAMETER_NUMBER_ENERGY_PRODUCTION_TODAY = 2
  public static Short PARAMETER_NUMBER_INSTANT_ENERGY_PRODUCTION = 0
  public static Short PARAMETER_NUMBER_TOTAL_ENERGY_PRODUCTION = 1
  public static Short PARAMETER_NUMBER_TOTAL_PRODUCTION_TIME = 3
  public Short getParameterNumber()
  public List getPayload()
  public void setParameterNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.energyproductionv1.EnergyProductionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short PARAMETER_NUMBER_ENERGY_PRODUCTION_TODAY = 2
  public static Short PARAMETER_NUMBER_INSTANT_ENERGY_PRODUCTION = 0
  public static Short PARAMETER_NUMBER_TOTAL_ENERGY_PRODUCTION = 1
  public static Short PARAMETER_NUMBER_TOTAL_PRODUCTION_TIME = 3
  public Short getParameterNumber()
  public List getPayload()
  public void setParameterNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.energyproductionv1.EnergyProductionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short PARAMETER_NUMBER_ENERGY_PRODUCTION_TODAY = 2
  public static Short PARAMETER_NUMBER_INSTANT_ENERGY_PRODUCTION = 0
  public static Short PARAMETER_NUMBER_TOTAL_ENERGY_PRODUCTION = 1
  public static Short PARAMETER_NUMBER_TOTAL_PRODUCTION_TIME = 3
  public Short getParameterNumber()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setParameterNumber(Short)
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.energyproductionv1.EnergyProductionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short PARAMETER_NUMBER_ENERGY_PRODUCTION_TODAY = 2
  public static Short PARAMETER_NUMBER_INSTANT_ENERGY_PRODUCTION = 0
  public static Short PARAMETER_NUMBER_TOTAL_ENERGY_PRODUCTION = 1
  public static Short PARAMETER_NUMBER_TOTAL_PRODUCTION_TIME = 3
  public Short getParameterNumber()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public List getValue()
  public void setParameterNumber(Short)
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getKeyCacheSize()
  public Short getKeyCacheTimeout()
  public List getPayload()
  public void setKeyCacheSize(Short)
  public void setKeyCacheTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getKeyCacheSize()
  public Short getKeyCacheTimeout()
  public List getPayload()
  public void setKeyCacheSize(Short)
  public void setKeyCacheTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getKeyCacheSize()
  public Short getKeyCacheTimeout()
  public List getPayload()
  public void setKeyCacheSize(Short)
  public void setKeyCacheTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getKeyCacheSize()
  public Short getKeyCacheTimeout()
  public List getPayload()
  public void setKeyCacheSize(Short)
  public void setKeyCacheTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlEventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlEventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getDataTypeSupportedBitMask()
  public List getEventTypeSupportedBitMask()
  public Integer getKeyCachedSizeMax()
  public Integer getKeyCachedTimeoutMax()
  public List getPayload()
  public void setDataTypeSupportedBitMask(List)
  public void setEventTypeSupportedBitMask(List)
  public void setKeyCachedSizeMax(Integer)
  public void setKeyCachedTimeoutMax(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlEventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getDataTypeSupportedBitMask()
  public List getEventTypeSupportedBitMask()
  public Integer getKeyCachedSizeMax()
  public Integer getKeyCachedTimeoutMax()
  public List getPayload()
  public void setDataTypeSupportedBitMask(List)
  public void setEventTypeSupportedBitMask(List)
  public void setKeyCachedSizeMax(Integer)
  public void setKeyCachedTimeoutMax(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlKeySupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlKeySupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBitMaskLength()
  public List getBitmask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBitMaskLength(Short)
  public void setBitmask(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlKeySupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBitMaskLength()
  public List getBitmask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBitMaskLength(Short)
  public void setBitmask(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short DATA_TYPE_ASCII = 2
  public static Short DATA_TYPE_MD5 = 3
  public static Short DATA_TYPE_NA = 0
  public static Short DATA_TYPE_RAW = 1
  public Short getDataType()
  public static Short EVENT_TYPE_ALERT_MEDICAL = 19
  public static Short EVENT_TYPE_ALERT_PANIC = 18
  public static Short EVENT_TYPE_ARM_1 = 8
  public static Short EVENT_TYPE_ARM_2 = 9
  public static Short EVENT_TYPE_ARM_3 = 10
  public static Short EVENT_TYPE_ARM_4 = 11
  public static Short EVENT_TYPE_ARM_5 = 12
  public static Short EVENT_TYPE_ARM_6 = 13
  public static Short EVENT_TYPE_ARM_ALL = 4
  public static Short EVENT_TYPE_ARM_AWAY = 5
  public static Short EVENT_TYPE_ARM_HOME = 6
  public static Short EVENT_TYPE_BELL = 15
  public static Short EVENT_TYPE_CACHED_KEYS = 1
  public static Short EVENT_TYPE_CACHING = 0
  public static Short EVENT_TYPE_CANCEL = 25
  public static Short EVENT_TYPE_DISARM_ALL = 3
  public static Short EVENT_TYPE_ENTER = 2
  public static Short EVENT_TYPE_EXIT_DELAY = 7
  public static Short EVENT_TYPE_FIRE = 16
  public static Short EVENT_TYPE_GATE_CLOSE = 21
  public static Short EVENT_TYPE_GATE_OPEN = 20
  public static Short EVENT_TYPE_LOCK = 22
  public static Short EVENT_TYPE_POLICE = 17
  public static Short EVENT_TYPE_RFID = 14
  public static Short EVENT_TYPE_TEST = 24
  public static Short EVENT_TYPE_UNLOCK = 23
  public List getEventData()
  public Short getEventType()
  public List getPayload()
  public Short getSequenceNumber()
  public void setDataType(Short)
  public void setEventData(List)
  public void setEventType(Short)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.entrycontrolv1.EntryControlNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short DATA_TYPE_ASCII = 2
  public static Short DATA_TYPE_MD5 = 3
  public static Short DATA_TYPE_NA = 0
  public static Short DATA_TYPE_RAW = 1
  public Short getDataType()
  public static Short EVENT_TYPE_ALERT_MEDICAL = 19
  public static Short EVENT_TYPE_ALERT_PANIC = 18
  public static Short EVENT_TYPE_ARM_1 = 8
  public static Short EVENT_TYPE_ARM_2 = 9
  public static Short EVENT_TYPE_ARM_3 = 10
  public static Short EVENT_TYPE_ARM_4 = 11
  public static Short EVENT_TYPE_ARM_5 = 12
  public static Short EVENT_TYPE_ARM_6 = 13
  public static Short EVENT_TYPE_ARM_ALL = 4
  public static Short EVENT_TYPE_ARM_AWAY = 5
  public static Short EVENT_TYPE_ARM_HOME = 6
  public static Short EVENT_TYPE_BELL = 15
  public static Short EVENT_TYPE_CACHED_KEYS = 1
  public static Short EVENT_TYPE_CACHING = 0
  public static Short EVENT_TYPE_CANCEL = 25
  public static Short EVENT_TYPE_DISARM_ALL = 3
  public static Short EVENT_TYPE_ENTER = 2
  public static Short EVENT_TYPE_EXIT_DELAY = 7
  public static Short EVENT_TYPE_FIRE = 16
  public static Short EVENT_TYPE_GATE_CLOSE = 21
  public static Short EVENT_TYPE_GATE_OPEN = 20
  public static Short EVENT_TYPE_LOCK = 22
  public static Short EVENT_TYPE_POLICE = 17
  public static Short EVENT_TYPE_RFID = 14
  public static Short EVENT_TYPE_TEST = 24
  public static Short EVENT_TYPE_UNLOCK = 23
  public List getEventData()
  public Short getEventType()
  public List getPayload()
  public Short getSequenceNumber()
  public void setDataType(Short)
  public void setEventData(List)
  public void setEventType(Short)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public Integer getManufacturerId()
  public List getPayload()
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setManufacturerId(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public Integer getManufacturerId()
  public List getPayload()
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setManufacturerId(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfReports()
  public List getPayload()
  public Integer getReportNumber()
  public void setNumberOfReports(Short)
  public void setReportNumber(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfReports()
  public List getPayload()
  public Integer getReportNumber()
  public void setNumberOfReports(Short)
  public void setReportNumber(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public Boolean getLast()
  public List getPayload()
  public Integer getReportNumber()
  public void setData(List)
  public void setLast(Boolean)
  public void setReportNumber(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public Boolean getLast()
  public List getPayload()
  public Integer getReportNumber()
  public void setData(List)
  public void setLast(Boolean)
  public void setReportNumber(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public Integer getManufacturerId()
  public List getPayload()
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setManufacturerId(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public Integer getManufacturerId()
  public List getPayload()
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setManufacturerId(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short getStatus()
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short getStatus()
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short getStatus()
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short getStatus()
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getPayload()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getPayload()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getNumberOfReports()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setNumberOfReports(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getNumberOfReports()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setNumberOfReports(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public Boolean getLast()
  public List getPayload()
  public Integer getReportNumber()
  public void setChecksum(Integer)
  public void setData(List)
  public void setLast(Boolean)
  public void setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getData()
  public Boolean super$3$getLast()
  public List super$3$getPayload()
  public Integer super$3$getReportNumber()
  public void super$3$setData(List)
  public void super$3$setLast(Boolean)
  public void super$3$setReportNumber(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public Boolean getLast()
  public List getPayload()
  public Integer getReportNumber()
  public void setChecksum(Integer)
  public void setData(List)
  public void setLast(Boolean)
  public void setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getData()
  public Boolean super$3$getLast()
  public List super$3$getPayload()
  public Integer super$3$getReportNumber()
  public void super$3$setData(List)
  public void super$3$setLast(Boolean)
  public void super$3$setReportNumber(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getPayload()
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getPayload()
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getPayload()
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getPayload()
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getPayload()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getPayload()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public List getFirmwareIds()
  public Boolean getFirmwareUpgradable()
  public Integer getManufacturerId()
  public Integer getMaxFragmentSize()
  public Short getNumberOfTargets()
  public List getPayload()
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareIds(List)
  public void setFirmwareUpgradable(Boolean)
  public void setManufacturerId(Integer)
  public void setMaxFragmentSize(Integer)
  public void setNumberOfTargets(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.super$2$getPayload()
  public String super$3$getCMD()
  public Integer super$3$getChecksum()
  public Integer super$3$getFirmwareId()
  public Integer super$3$getManufacturerId()
  public List super$3$getPayload()
  public void super$3$setChecksum(Integer)
  public void super$3$setFirmwareId(Integer)
  public void super$3$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public List getFirmwareIds()
  public Boolean getFirmwareUpgradable()
  public Integer getManufacturerId()
  public Integer getMaxFragmentSize()
  public Short getNumberOfTargets()
  public List getPayload()
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareIds(List)
  public void setFirmwareUpgradable(Boolean)
  public void setManufacturerId(Integer)
  public void setMaxFragmentSize(Integer)
  public void setNumberOfTargets(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.super$2$getPayload()
  public String super$3$getCMD()
  public Integer super$3$getChecksum()
  public Integer super$3$getFirmwareId()
  public Integer super$3$getManufacturerId()
  public List super$3$getPayload()
  public void super$3$setChecksum(Integer)
  public void super$3$setFirmwareId(Integer)
  public void super$3$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getNumberOfReports()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setNumberOfReports(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getNumberOfReports()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setNumberOfReports(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getCMD()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setReportNumber(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getCMD()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setReportNumber(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public Short getFirmwareTarget()
  public Integer getFragmentSize()
  public Integer getManufacturerId()
  public List getPayload()
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareTarget(Short)
  public void setFragmentSize(Integer)
  public void setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.super$2$getPayload()
  public String super$3$getCMD()
  public Integer super$3$getChecksum()
  public Integer super$3$getFirmwareId()
  public Integer super$3$getManufacturerId()
  public List super$3$getPayload()
  public void super$3$setChecksum(Integer)
  public void super$3$setFirmwareId(Integer)
  public void super$3$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public Short getFirmwareTarget()
  public Integer getFragmentSize()
  public Integer getManufacturerId()
  public List getPayload()
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareTarget(Short)
  public void setFragmentSize(Integer)
  public void setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.super$2$getPayload()
  public String super$3$getCMD()
  public Integer super$3$getChecksum()
  public Integer super$3$getFirmwareId()
  public Integer super$3$getManufacturerId()
  public List super$3$getPayload()
  public void super$3$setChecksum(Integer)
  public void super$3$setFirmwareId(Integer)
  public void super$3$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getPayload()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getPayload()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getFirmwareId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getFirmwareIds()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getFirmwareUpgradable()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getManufacturerId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getMaxFragmentSize()
  public Short hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getNumberOfTargets()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setFirmwareIds(List)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setFirmwareUpgradable(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setManufacturerId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setMaxFragmentSize(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setNumberOfTargets(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getFirmwareId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getFirmwareIds()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getFirmwareUpgradable()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getManufacturerId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getMaxFragmentSize()
  public Short hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getNumberOfTargets()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setFirmwareIds(List)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setFirmwareUpgradable(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setManufacturerId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setMaxFragmentSize(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.setNumberOfTargets(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getNumberOfReports()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setNumberOfReports(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getNumberOfReports()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setNumberOfReports(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getCMD()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setReportNumber(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getCMD()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setReportNumber(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getActivation()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public Short getFirmwareTarget()
  public Integer getFragmentSize()
  public Integer getManufacturerId()
  public List getPayload()
  public void setActivation(Boolean)
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareTarget(Short)
  public void setFragmentSize(Integer)
  public void setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setManufacturerId(Integer)
  public String super$5$getCMD()
  public Integer super$5$getChecksum()
  public Integer super$5$getFirmwareId()
  public Short super$5$getFirmwareTarget()
  public Integer super$5$getFragmentSize()
  public Integer super$5$getManufacturerId()
  public List super$5$getPayload()
  public void super$5$setChecksum(Integer)
  public void super$5$setFirmwareId(Integer)
  public void super$5$setFirmwareTarget(Short)
  public void super$5$setFragmentSize(Integer)
  public void super$5$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getActivation()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public Short getFirmwareTarget()
  public Integer getFragmentSize()
  public Integer getManufacturerId()
  public List getPayload()
  public void setActivation(Boolean)
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareTarget(Short)
  public void setFragmentSize(Integer)
  public void setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setManufacturerId(Integer)
  public String super$5$getCMD()
  public Integer super$5$getChecksum()
  public Integer super$5$getFirmwareId()
  public Short super$5$getFirmwareTarget()
  public Integer super$5$getFragmentSize()
  public Integer super$5$getManufacturerId()
  public List super$5$getPayload()
  public void super$5$setChecksum(Integer)
  public void super$5$setFirmwareId(Integer)
  public void super$5$setFirmwareTarget(Short)
  public void super$5$setFragmentSize(Integer)
  public void super$5$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getPayload()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getPayload()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public List getFirmwareIds()
  public Boolean getFirmwareUpgradable()
  public Short getHardwareVersion()
  public Integer getManufacturerId()
  public Integer getMaxFragmentSize()
  public Short getNumberOfTargets()
  public List getPayload()
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareIds(List)
  public void setFirmwareUpgradable(Boolean)
  public void setHardwareVersion(Short)
  public void setManufacturerId(Integer)
  public void setMaxFragmentSize(Integer)
  public void setNumberOfTargets(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setManufacturerId(Integer)
  public String super$5$getCMD()
  public Integer super$5$getChecksum()
  public Integer super$5$getFirmwareId()
  public List super$5$getFirmwareIds()
  public Boolean super$5$getFirmwareUpgradable()
  public Integer super$5$getManufacturerId()
  public Integer super$5$getMaxFragmentSize()
  public Short super$5$getNumberOfTargets()
  public List super$5$getPayload()
  public void super$5$setChecksum(Integer)
  public void super$5$setFirmwareId(Integer)
  public void super$5$setFirmwareIds(List)
  public void super$5$setFirmwareUpgradable(Boolean)
  public void super$5$setManufacturerId(Integer)
  public void super$5$setMaxFragmentSize(Integer)
  public void super$5$setNumberOfTargets(Short)
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public List getFirmwareIds()
  public Boolean getFirmwareUpgradable()
  public Short getHardwareVersion()
  public Integer getManufacturerId()
  public Integer getMaxFragmentSize()
  public Short getNumberOfTargets()
  public List getPayload()
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareIds(List)
  public void setFirmwareUpgradable(Boolean)
  public void setHardwareVersion(Short)
  public void setManufacturerId(Integer)
  public void setMaxFragmentSize(Integer)
  public void setNumberOfTargets(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setManufacturerId(Integer)
  public String super$5$getCMD()
  public Integer super$5$getChecksum()
  public Integer super$5$getFirmwareId()
  public List super$5$getFirmwareIds()
  public Boolean super$5$getFirmwareUpgradable()
  public Integer super$5$getManufacturerId()
  public Integer super$5$getMaxFragmentSize()
  public Short super$5$getNumberOfTargets()
  public List super$5$getPayload()
  public void super$5$setChecksum(Integer)
  public void super$5$setFirmwareId(Integer)
  public void super$5$setFirmwareIds(List)
  public void super$5$setFirmwareUpgradable(Boolean)
  public void super$5$setManufacturerId(Integer)
  public void super$5$setMaxFragmentSize(Integer)
  public void super$5$setNumberOfTargets(Short)
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getNumberOfReports()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setNumberOfReports(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getNumberOfReports()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setNumberOfReports(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getCMD()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setReportNumber(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getCMD()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setReportNumber(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getActivation()
  public String hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getFirmwareId()
  public Short hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getFirmwareTarget()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getFragmentSize()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setActivation(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setFirmwareTarget(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setFragmentSize(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setManufacturerId(Integer)
  public String hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFirmwareId()
  public Short hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFirmwareTarget()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFragmentSize()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFirmwareTarget(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFragmentSize(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getActivation()
  public String hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getFirmwareId()
  public Short hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getFirmwareTarget()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getFragmentSize()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setActivation(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setFirmwareTarget(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setFragmentSize(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setManufacturerId(Integer)
  public String hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFirmwareId()
  public Short hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFirmwareTarget()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFragmentSize()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFirmwareTarget(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFragmentSize(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INVALID_HARDWARE_VERSION = 4
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INVALID_HARDWARE_VERSION = 4
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INVALID_HARDWARE_VERSION = 4
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv5.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INVALID_HARDWARE_VERSION = 4
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getPayload()
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getPayload()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.getPayload()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Boolean getCc()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public List getFirmwareIds()
  public Boolean getFirmwareUpgradable()
  public Short getHardwareVersion()
  public Integer getManufacturerId()
  public Integer getMaxFragmentSize()
  public Short getNumberOfTargets()
  public List getPayload()
  public void setCc(Boolean)
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareIds(List)
  public void setFirmwareUpgradable(Boolean)
  public void setHardwareVersion(Short)
  public void setManufacturerId(Integer)
  public void setMaxFragmentSize(Integer)
  public void setNumberOfTargets(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setManufacturerId(Integer)
  public String hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getFirmwareId()
  public List hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getFirmwareIds()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getFirmwareUpgradable()
  public Integer hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getManufacturerId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getMaxFragmentSize()
  public Short hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getNumberOfTargets()
  public List hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setFirmwareIds(List)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setFirmwareUpgradable(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setManufacturerId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setMaxFragmentSize(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setNumberOfTargets(Short)
  public String super$7$getCMD()
  public Integer super$7$getChecksum()
  public Integer super$7$getFirmwareId()
  public List super$7$getFirmwareIds()
  public Boolean super$7$getFirmwareUpgradable()
  public Short super$7$getHardwareVersion()
  public Integer super$7$getManufacturerId()
  public Integer super$7$getMaxFragmentSize()
  public Short super$7$getNumberOfTargets()
  public List super$7$getPayload()
  public void super$7$setChecksum(Integer)
  public void super$7$setFirmwareId(Integer)
  public void super$7$setFirmwareIds(List)
  public void super$7$setFirmwareUpgradable(Boolean)
  public void super$7$setHardwareVersion(Short)
  public void super$7$setManufacturerId(Integer)
  public void super$7$setMaxFragmentSize(Integer)
  public void super$7$setNumberOfTargets(Short)
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Boolean getCc()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public List getFirmwareIds()
  public Boolean getFirmwareUpgradable()
  public Short getHardwareVersion()
  public Integer getManufacturerId()
  public Integer getMaxFragmentSize()
  public Short getNumberOfTargets()
  public List getPayload()
  public void setCc(Boolean)
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareIds(List)
  public void setFirmwareUpgradable(Boolean)
  public void setHardwareVersion(Short)
  public void setManufacturerId(Integer)
  public void setMaxFragmentSize(Integer)
  public void setNumberOfTargets(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareMdReport.super$3$setManufacturerId(Integer)
  public String hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getFirmwareId()
  public List hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getFirmwareIds()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getFirmwareUpgradable()
  public Integer hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getManufacturerId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getMaxFragmentSize()
  public Short hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getNumberOfTargets()
  public List hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setFirmwareIds(List)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setFirmwareUpgradable(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setManufacturerId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setMaxFragmentSize(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv5.FirmwareMdReport.super$5$setNumberOfTargets(Short)
  public String super$7$getCMD()
  public Integer super$7$getChecksum()
  public Integer super$7$getFirmwareId()
  public List super$7$getFirmwareIds()
  public Boolean super$7$getFirmwareUpgradable()
  public Short super$7$getHardwareVersion()
  public Integer super$7$getManufacturerId()
  public Integer super$7$getMaxFragmentSize()
  public Short super$7$getNumberOfTargets()
  public List super$7$getPayload()
  public void super$7$setChecksum(Integer)
  public void super$7$setFirmwareId(Integer)
  public void super$7$setFirmwareIds(List)
  public void super$7$setFirmwareUpgradable(Boolean)
  public void super$7$setHardwareVersion(Short)
  public void super$7$setManufacturerId(Integer)
  public void super$7$setMaxFragmentSize(Integer)
  public void super$7$setNumberOfTargets(Short)
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getNumberOfReports()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setNumberOfReports(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareUpdateMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getNumberOfReports()
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setNumberOfReports(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdGet.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getCMD()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setReportNumber(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareUpdateMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.setReportNumber(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdReport.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getCMD()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getData()
  public Boolean hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getLast()
  public List hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getPayload()
  public Integer hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$getReportNumber()
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setData(List)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setLast(Boolean)
  public void hubitat.zwave.commands.firmwareupdatemdv2.FirmwareUpdateMdReport.super$3$setReportNumber(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getActivation()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public Short getFirmwareTarget()
  public Integer getFragmentSize()
  public Short getHardwareVersion()
  public Integer getManufacturerId()
  public List getPayload()
  public void setActivation(Boolean)
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareTarget(Short)
  public void setFragmentSize(Integer)
  public void setHardwareVersion(Short)
  public void setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setManufacturerId(Integer)
  public String hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFirmwareId()
  public Short hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFirmwareTarget()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFragmentSize()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFirmwareTarget(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFragmentSize(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setManufacturerId(Integer)
  public Boolean super$6$getActivation()
  public String super$6$getCMD()
  public Integer super$6$getChecksum()
  public Integer super$6$getFirmwareId()
  public Short super$6$getFirmwareTarget()
  public Integer super$6$getFragmentSize()
  public Integer super$6$getManufacturerId()
  public List super$6$getPayload()
  public void super$6$setActivation(Boolean)
  public void super$6$setChecksum(Integer)
  public void super$6$setFirmwareId(Integer)
  public void super$6$setFirmwareTarget(Short)
  public void super$6$setFragmentSize(Integer)
  public void super$6$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareUpdateMdRequestGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getActivation()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFirmwareId()
  public Short getFirmwareTarget()
  public Integer getFragmentSize()
  public Short getHardwareVersion()
  public Integer getManufacturerId()
  public List getPayload()
  public void setActivation(Boolean)
  public void setChecksum(Integer)
  public void setFirmwareId(Integer)
  public void setFirmwareTarget(Short)
  public void setFragmentSize(Integer)
  public void setHardwareVersion(Short)
  public void setManufacturerId(Integer)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestGet.super$2$getPayload()
  public String hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getFirmwareId()
  public Integer hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv3.FirmwareUpdateMdRequestGet.super$3$setManufacturerId(Integer)
  public String hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getCMD()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getChecksum()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFirmwareId()
  public Short hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFirmwareTarget()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getFragmentSize()
  public Integer hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getManufacturerId()
  public List hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$getPayload()
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setChecksum(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFirmwareId(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFirmwareTarget(Short)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setFragmentSize(Integer)
  public void hubitat.zwave.commands.firmwareupdatemdv4.FirmwareUpdateMdRequestGet.super$5$setManufacturerId(Integer)
  public Boolean super$6$getActivation()
  public String super$6$getCMD()
  public Integer super$6$getChecksum()
  public Integer super$6$getFirmwareId()
  public Short super$6$getFirmwareTarget()
  public Integer super$6$getFragmentSize()
  public Integer super$6$getManufacturerId()
  public List super$6$getPayload()
  public void super$6$setActivation(Boolean)
  public void super$6$setChecksum(Integer)
  public void super$6$setFirmwareId(Integer)
  public void super$6$setFirmwareTarget(Short)
  public void super$6$setFragmentSize(Integer)
  public void super$6$setManufacturerId(Integer)
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INVALID_HARDWARE_VERSION = 4
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getPayload()
  public static Short STATUS_ANOTHER_TRANSFER_IN_PROGRESS = 5
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_INSUFFICIENT_BATTERY_LEVEL = 6
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareUpdateMdRequestReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INVALID_HARDWARE_VERSION = 4
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getPayload()
  public static Short STATUS_ANOTHER_TRANSFER_IN_PROGRESS = 5
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_INSUFFICIENT_BATTERY_LEVEL = 6
  public static Short STATUS_INVALID_COMBINATION = 0
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_REQUIRES_AUTHENTICATION = 1
  public static Short STATUS_VALID_COMBINATION = 255
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdRequestReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INVALID_HARDWARE_VERSION = 4
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getPayload()
  public static Short STATUS_ANOTHER_TRANSFER_IN_PROGRESS = 5
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_INSUFFICIENT_BATTERY_LEVEL = 6
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.super$2$getPayload()
]
class hubitat.zwave.commands.firmwareupdatemdv6.FirmwareUpdateMdStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INVALID_HARDWARE_VERSION = 4
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getPayload()
  public static Short STATUS_ANOTHER_TRANSFER_IN_PROGRESS = 5
  public static Short STATUS_IINVALID_FRAGMENT_SIZE = 2
  public static Short STATUS_INSUFFICIENT_BATTERY_LEVEL = 6
  public static Short STATUS_NOT_DOWNLOADABLE = 3
  public static Short STATUS_SUCCESSFULLY = 255
  public static Short STATUS_UNABLE_TO_RECEIVE = 1
  public static Short STATUS_UNABLE_TO_RECEIVE_WITHOUT_CHECKSUM_ERROR = 0
  public Short hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.getStatus()
  public void hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.setStatus(Short)
  public List hubitat.zwave.commands.firmwareupdatemdv1.FirmwareUpdateMdStatusReport.super$2$getPayload()
]
class hubitat.zwave.commands.geographiclocationv1.GeographicLocationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.geographiclocationv1.GeographicLocationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.geographiclocationv1.GeographicLocationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getLatSign()
  public Short getLatitudeDegrees()
  public Short getLatitudeMinutes()
  public Boolean getLongSign()
  public Short getLongitudeDegrees()
  public Short getLongitudeMinutes()
  public List getPayload()
  public void setLatSign(Boolean)
  public void setLatitudeDegrees(Short)
  public void setLatitudeMinutes(Short)
  public void setLongSign(Boolean)
  public void setLongitudeDegrees(Short)
  public void setLongitudeMinutes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.geographiclocationv1.GeographicLocationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getLatSign()
  public Short getLatitudeDegrees()
  public Short getLatitudeMinutes()
  public Boolean getLongSign()
  public Short getLongitudeDegrees()
  public Short getLongitudeMinutes()
  public List getPayload()
  public void setLatSign(Boolean)
  public void setLatitudeDegrees(Short)
  public void setLatitudeMinutes(Short)
  public void setLongSign(Boolean)
  public void setLongitudeDegrees(Short)
  public void setLongitudeMinutes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.geographiclocationv1.GeographicLocationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getLatSign()
  public Short getLatitudeDegrees()
  public Short getLatitudeMinutes()
  public Boolean getLongSign()
  public Short getLongitudeDegrees()
  public Short getLongitudeMinutes()
  public List getPayload()
  public void setLatSign(Boolean)
  public void setLatitudeDegrees(Short)
  public void setLatitudeMinutes(Short)
  public void setLongSign(Boolean)
  public void setLongitudeDegrees(Short)
  public void setLongitudeMinutes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.geographiclocationv1.GeographicLocationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getLatSign()
  public Short getLatitudeDegrees()
  public Short getLatitudeMinutes()
  public Boolean getLongSign()
  public Short getLongitudeDegrees()
  public Short getLongitudeMinutes()
  public List getPayload()
  public void setLatSign(Boolean)
  public void setLatitudeDegrees(Short)
  public void setLatitudeMinutes(Short)
  public void setLongSign(Boolean)
  public void setLongitudeDegrees(Short)
  public void setLongitudeMinutes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.groupingnamev1.GroupingNameGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.groupingnamev1.GroupingNameGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.groupingnamev1.GroupingNameReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getGrouping()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setGrouping(List)
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.groupingnamev1.GroupingNameReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getGrouping()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setGrouping(List)
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.groupingnamev1.GroupingNameSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getGrouping()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setGrouping(List)
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.groupingnamev1.GroupingNameSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getGrouping()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setGrouping(List)
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hailv1.Hail:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hailv1.Hail:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlBypassGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlBypassGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlBypassReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBypass()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBypass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlBypassReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBypass()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBypass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlBypassSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBypass()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBypass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlBypassSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBypass()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBypass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_DEMAND_AUTOMATIC = 1
  public static Short MODE_ENERGY_SAVINGS_MODE = 3
  public static Short MODE_MANUAL = 4
  public static Short MODE_OFF = 0
  public static Short MODE_SCHEDULE = 2
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_DEMAND_AUTOMATIC = 1
  public static Short MODE_ENERGY_SAVINGS_MODE = 3
  public static Short MODE_MANUAL = 4
  public static Short MODE_OFF = 0
  public static Short MODE_SCHEDULE = 2
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_DEMAND_AUTOMATIC = 1
  public static Short MODE_ENERGY_SAVINGS_MODE = 3
  public static Short MODE_MANUAL = 4
  public static Short MODE_OFF = 0
  public static Short MODE_SCHEDULE = 2
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_DEMAND_AUTOMATIC = 1
  public static Short MODE_ENERGY_SAVINGS_MODE = 3
  public static Short MODE_MANUAL = 4
  public static Short MODE_OFF = 0
  public static Short MODE_SCHEDULE = 2
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDemandAutomatic()
  public Boolean getEnergySavingsMode()
  public static Short MANUAL_CONTROL_SUPPORTED_BYPASS_AUTO = 1
  public static Short MANUAL_CONTROL_SUPPORTED_BYPASS_OPEN_CLOSE = 0
  public static Short MANUAL_CONTROL_SUPPORTED_MODULATED_BYPASS = 2
  public static Short MANUAL_CONTROL_SUPPORTED_VENTILATION_RATE = 3
  public Boolean getManual()
  public Short getManualControlSupported()
  public Boolean getOff()
  public List getPayload()
  public Boolean getSchedule()
  public void setDemandAutomatic(Boolean)
  public void setEnergySavingsMode(Boolean)
  public void setManual(Boolean)
  public void setManualControlSupported(Short)
  public void setOff(Boolean)
  public void setSchedule(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDemandAutomatic()
  public Boolean getEnergySavingsMode()
  public static Short MANUAL_CONTROL_SUPPORTED_BYPASS_AUTO = 1
  public static Short MANUAL_CONTROL_SUPPORTED_BYPASS_OPEN_CLOSE = 0
  public static Short MANUAL_CONTROL_SUPPORTED_MODULATED_BYPASS = 2
  public static Short MANUAL_CONTROL_SUPPORTED_VENTILATION_RATE = 3
  public Boolean getManual()
  public Short getManualControlSupported()
  public Boolean getOff()
  public List getPayload()
  public Boolean getSchedule()
  public void setDemandAutomatic(Boolean)
  public void setEnergySavingsMode(Boolean)
  public void setManual(Boolean)
  public void setManualControlSupported(Short)
  public void setOff(Boolean)
  public void setSchedule(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlVentilationRateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlVentilationRateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlVentilationRateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getVentilationRate()
  public void setVentilationRate(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlVentilationRateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getVentilationRate()
  public void setVentilationRate(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlVentilationRateSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getVentilationRate()
  public void setVentilationRate(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvcontrolv1.HrvControlVentilationRateSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getVentilationRate()
  public void setVentilationRate(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvstatusv1.HrvStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_PARAMETER_DISCHARGE_AIR_TEMPERATURE = 3
  public static Short STATUS_PARAMETER_EXHAUST_AIR_TEMPERATURE = 2
  public static Short STATUS_PARAMETER_OUTDOOR_AIR_TEMPERATURE = 0
  public static Short STATUS_PARAMETER_RELATIVE_HUMIDITY_IN_ROOM = 5
  public static Short STATUS_PARAMETER_REMAINING_FILTER_LIFE = 6
  public static Short STATUS_PARAMETER_ROOM_TEMPERATURE = 4
  public static Short STATUS_PARAMETER_SUPPLY_AIR_TEMPERATURE = 1
  public Short getStatusParameter()
  public void setStatusParameter(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvstatusv1.HrvStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_PARAMETER_DISCHARGE_AIR_TEMPERATURE = 3
  public static Short STATUS_PARAMETER_EXHAUST_AIR_TEMPERATURE = 2
  public static Short STATUS_PARAMETER_OUTDOOR_AIR_TEMPERATURE = 0
  public static Short STATUS_PARAMETER_RELATIVE_HUMIDITY_IN_ROOM = 5
  public static Short STATUS_PARAMETER_REMAINING_FILTER_LIFE = 6
  public static Short STATUS_PARAMETER_ROOM_TEMPERATURE = 4
  public static Short STATUS_PARAMETER_SUPPLY_AIR_TEMPERATURE = 1
  public Short getStatusParameter()
  public void setStatusParameter(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvstatusv1.HrvStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static Short STATUS_PARAMETER_DISCHARGE_AIR_TEMPERATURE = 3
  public static Short STATUS_PARAMETER_EXHAUST_AIR_TEMPERATURE = 2
  public static Short STATUS_PARAMETER_OUTDOOR_AIR_TEMPERATURE = 0
  public static Short STATUS_PARAMETER_RELATIVE_HUMIDITY_IN_ROOM = 5
  public static Short STATUS_PARAMETER_REMAINING_FILTER_LIFE = 6
  public static Short STATUS_PARAMETER_ROOM_TEMPERATURE = 4
  public static Short STATUS_PARAMETER_SUPPLY_AIR_TEMPERATURE = 1
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public Short getStatusParameter()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setStatusParameter(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvstatusv1.HrvStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static Short STATUS_PARAMETER_DISCHARGE_AIR_TEMPERATURE = 3
  public static Short STATUS_PARAMETER_EXHAUST_AIR_TEMPERATURE = 2
  public static Short STATUS_PARAMETER_OUTDOOR_AIR_TEMPERATURE = 0
  public static Short STATUS_PARAMETER_RELATIVE_HUMIDITY_IN_ROOM = 5
  public static Short STATUS_PARAMETER_REMAINING_FILTER_LIFE = 6
  public static Short STATUS_PARAMETER_ROOM_TEMPERATURE = 4
  public static Short STATUS_PARAMETER_SUPPLY_AIR_TEMPERATURE = 1
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSize()
  public Short getStatusParameter()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSize(Short)
  public void setStatusParameter(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvstatusv1.HrvStatusSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvstatusv1.HrvStatusSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvstatusv1.HrvStatusSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDischargeAirTemperature()
  public Boolean getExhaustAirTemperature()
  public Boolean getOutdoorAirTemperature()
  public List getPayload()
  public Boolean getRelativeHumidityInRoom()
  public Boolean getRemainingFilterLife()
  public Boolean getRoomTemperature()
  public Boolean getSupplyAirTemperature()
  public void setDischargeAirTemperature(Boolean)
  public void setExhaustAirTemperature(Boolean)
  public void setOutdoorAirTemperature(Boolean)
  public void setRelativeHumidityInRoom(Boolean)
  public void setRemainingFilterLife(Boolean)
  public void setRoomTemperature(Boolean)
  public void setSupplyAirTemperature(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.hrvstatusv1.HrvStatusSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDischargeAirTemperature()
  public Boolean getExhaustAirTemperature()
  public Boolean getOutdoorAirTemperature()
  public List getPayload()
  public Boolean getRelativeHumidityInRoom()
  public Boolean getRemainingFilterLife()
  public Boolean getRoomTemperature()
  public Boolean getSupplyAirTemperature()
  public void setDischargeAirTemperature(Boolean)
  public void setExhaustAirTemperature(Boolean)
  public void setOutdoorAirTemperature(Boolean)
  public void setRelativeHumidityInRoom(Boolean)
  public void setRemainingFilterLife(Boolean)
  public void setRoomTemperature(Boolean)
  public void setSupplyAirTemperature(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_DEHUMIDIFY = 2
  public static short MODE_HUMIDIFY = 1
  public static short MODE_OFF = 0
  public Short getMode()
  public List getPayload()
  public Short setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_DEHUMIDIFY = 2
  public static short MODE_HUMIDIFY = 1
  public static short MODE_OFF = 0
  public Short getMode()
  public List getPayload()
  public Short setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_DEHUMIDIFY = 2
  public static short MODE_HUMIDIFY = 1
  public static short MODE_OFF = 0
  public Short getMode()
  public List getPayload()
  public Short setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBitmask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getModeDehumidify()
  public Boolean getModeHumidify()
  public Boolean getModeOff()
  public List getPayload()
  public void setBitmask(Short)
  public void setModeDehumidify(Boolean)
  public void setModeHumidify(Boolean)
  public void setModeOff(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBitmask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getModeDehumidify()
  public Boolean getModeHumidify()
  public Boolean getModeOff()
  public List getPayload()
  public void setBitmask(Short)
  public void setModeDehumidify(Boolean)
  public void setModeHumidify(Boolean)
  public void setModeOff(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev2.HumidityControlModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeGet.getPayload()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev2.HumidityControlModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeGet.getPayload()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev2.HumidityControlModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_DEHUMIDIFY = 2
  public static short MODE_HUMIDIFY = 1
  public static short MODE_OFF = 0
  public Short hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeReport.getMode()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeReport.getPayload()
  public Short hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeReport.setMode(Short)
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev2.HumidityControlModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_DEHUMIDIFY = 2
  public static short MODE_HUMIDIFY = 1
  public static short MODE_OFF = 0
  public Short hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet.getMode()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet.getPayload()
  public Short hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet.setMode(Short)
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev2.HumidityControlModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_DEHUMIDIFY = 2
  public static short MODE_HUMIDIFY = 1
  public static short MODE_OFF = 0
  public Short hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet.getMode()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet.getPayload()
  public Short hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet.setMode(Short)
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev2.HumidityControlModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev2.HumidityControlModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev2.HumidityControlModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getBitmask()
  public String hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getModeAuto()
  public Boolean hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getModeDehumidify()
  public Boolean hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getModeHumidify()
  public Boolean hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getModeOff()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getPayload()
  public void hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.setBitmask(Short)
  public void setModeAuto(Boolean)
  public void hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.setModeDehumidify(Boolean)
  public void hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.setModeHumidify(Boolean)
  public void hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.setModeOff(Boolean)
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolmodev2.HumidityControlModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getBitmask()
  public String hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getModeAuto()
  public Boolean hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getModeDehumidify()
  public Boolean hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getModeHumidify()
  public Boolean hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getModeOff()
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.getPayload()
  public void hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.setBitmask(Short)
  public void setModeAuto(Boolean)
  public void hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.setModeDehumidify(Boolean)
  public void hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.setModeHumidify(Boolean)
  public void hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.setModeOff(Boolean)
  public List hubitat.zwave.commands.humiditycontrolmodev1.HumidityControlModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontroloperatingstatev1.HumidityControlOperatingStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontroloperatingstatev1.HumidityControlOperatingStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontroloperatingstatev1.HumidityControlOperatingStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short OPERATING_STATE_DEHUMIDIFYING = 2
  public static short OPERATING_STATE_HUMIDIFYING = 1
  public static short OPERATING_STATE_IDLE = 0
  public Short getOperatingState()
  public List getPayload()
  public void setOperatingState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontroloperatingstatev1.HumidityControlOperatingStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short OPERATING_STATE_DEHUMIDIFYING = 2
  public static short OPERATING_STATE_HUMIDIFYING = 1
  public static short OPERATING_STATE_IDLE = 0
  public Short getOperatingState()
  public List getPayload()
  public void setOperatingState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getSetpointType()
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getSetpointType()
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaximumPrecision()
  public Short getMaximumScale()
  public BigDecimal getMaximumScaledValue()
  public Short getMaximumSize()
  public List getMaximumValue()
  public Short getMinimumPrecision()
  public Short getMinimumScale()
  public BigDecimal getMinimumScaledValue()
  public Short getMinimumSize()
  public List getMinimumValue()
  public List getPayload()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getSetpointType()
  public void setMaximumPrecision(Short)
  public void setMaximumScale(Short)
  public void setMaximumScaledValue(BigDecimal)
  public void setMaximumSize(Short)
  public void setMaximumValue(List)
  public void setMinimumPrecision(Short)
  public void setMinimumScale(Short)
  public void setMinimumScaledValue(BigDecimal)
  public void setMinimumSize(Short)
  public void setMinimumValue(List)
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaximumPrecision()
  public Short getMaximumScale()
  public BigDecimal getMaximumScaledValue()
  public Short getMaximumSize()
  public List getMaximumValue()
  public Short getMinimumPrecision()
  public Short getMinimumScale()
  public BigDecimal getMinimumScaledValue()
  public Short getMinimumSize()
  public List getMinimumValue()
  public List getPayload()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getSetpointType()
  public void setMaximumPrecision(Short)
  public void setMaximumScale(Short)
  public void setMaximumScaledValue(BigDecimal)
  public void setMaximumSize(Short)
  public void setMaximumValue(List)
  public void setMinimumPrecision(Short)
  public void setMinimumScale(Short)
  public void setMinimumScaledValue(BigDecimal)
  public void setMinimumSize(Short)
  public void setMinimumValue(List)
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getSetpointType()
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getSetpointType()
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointType()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointType(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointType()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointType(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getSetpointType()
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getSetpointType()
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAbsolute()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Boolean getPercentage()
  public Short getScaleBitmask()
  public void setAbsolute(Boolean)
  public void setPercentage(Boolean)
  public Short setScaleBitmask(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAbsolute()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Boolean getPercentage()
  public Short getScaleBitmask()
  public void setAbsolute(Boolean)
  public void setPercentage(Boolean)
  public Short setScaleBitmask(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointType()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointType(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointType()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointType(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBitmask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDehumidifier()
  public Boolean getHumidifier()
  public List getPayload()
  public void setBitmask(Short)
  public void setDehumidifier(Boolean)
  public void setHumidifier(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBitmask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDehumidifier()
  public Boolean getHumidifier()
  public List getPayload()
  public void setBitmask(Short)
  public void setDehumidifier(Boolean)
  public void setHumidifier(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet.getPayload()
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet.getSetpointType()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet.setSetpointType(Short)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet.getPayload()
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet.getSetpointType()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet.setSetpointType(Short)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMaximumPrecision()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMaximumScale()
  public BigDecimal hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMaximumScaledValue()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMaximumSize()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMaximumValue()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMinimumPrecision()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMinimumScale()
  public BigDecimal hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMinimumScaledValue()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMinimumSize()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMinimumValue()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getPayload()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getSetpointType()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMaximumPrecision(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMaximumScale(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMaximumScaledValue(BigDecimal)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMaximumSize(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMaximumValue(List)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMinimumPrecision(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMinimumScale(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMinimumScaledValue(BigDecimal)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMinimumSize(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMinimumValue(List)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setSetpointType(Short)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMaximumPrecision()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMaximumScale()
  public BigDecimal hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMaximumScaledValue()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMaximumSize()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMaximumValue()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMinimumPrecision()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMinimumScale()
  public BigDecimal hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMinimumScaledValue()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMinimumSize()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getMinimumValue()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getPayload()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.getSetpointType()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMaximumPrecision(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMaximumScale(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMaximumScaledValue(BigDecimal)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMaximumSize(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMaximumValue(List)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMinimumPrecision(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMinimumScale(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMinimumScaledValue(BigDecimal)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMinimumSize(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setMinimumValue(List)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.setSetpointType(Short)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointCapabilitiesReport.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet.getPayload()
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet.getSetpointType()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet.setSetpointType(Short)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet.getPayload()
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet.getSetpointType()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet.setSetpointType(Short)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getPayload()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getPrecision()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getScale()
  public BigDecimal hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getScaledValue()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getSetpointType()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getSize()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getValue()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setPrecision(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setScale(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setSetpointType(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setSize(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setValue(List)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getPayload()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getPrecision()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getScale()
  public BigDecimal hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getScaledValue()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getSetpointType()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getSize()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.getValue()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setPrecision(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setScale(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setSetpointType(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setSize(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.setValue(List)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointReport.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointScaleSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet.getPayload()
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet.getSetpointType()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet.setSetpointType(Short)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointScaleSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet.getPayload()
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet.getSetpointType()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet.setSetpointType(Short)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointScaleSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.getAbsolute()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.getPayload()
  public Boolean hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.getPercentage()
  public static short SETPOINT_TYPE_AUTO = 3
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.getScaleBitmask()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.setAbsolute(Boolean)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.setPercentage(Boolean)
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.setScaleBitmask(Short)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointScaleSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.getAbsolute()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.getPayload()
  public Boolean hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.getPercentage()
  public static short SETPOINT_TYPE_AUTO = 3
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.getScaleBitmask()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.setAbsolute(Boolean)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.setPercentage(Boolean)
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.setScaleBitmask(Short)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointScaleSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getPayload()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getPrecision()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getScale()
  public BigDecimal hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getScaledValue()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getSetpointType()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getSize()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getValue()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setPrecision(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setScale(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setSetpointType(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setSize(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setValue(List)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getPayload()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getPrecision()
  public static short SCALE_ABSOLUTE = 1
  public static short SCALE_PERCENTAGE = 0
  public static short SETPOINT_TYPE_AUTO = 3
  public static short SETPOINT_TYPE_DEHUMIDIFIER = 2
  public static short SETPOINT_TYPE_HUMIDIFIER = 1
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getScale()
  public BigDecimal hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getScaledValue()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getSetpointType()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getSize()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.getValue()
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setPrecision(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setScale(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setSetpointType(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setSize(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.setValue(List)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedGet.getPayload()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedGet.getPayload()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAuto()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.getBitmask()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.getDehumidifier()
  public Boolean hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.getHumidifier()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.getPayload()
  public void setAuto(Boolean)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.setBitmask(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.setDehumidifier(Boolean)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.setHumidifier(Boolean)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.humiditycontrolsetpointv2.HumidityControlSetpointSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAuto()
  public Short hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.getBitmask()
  public String hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.getDehumidifier()
  public Boolean hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.getHumidifier()
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.getPayload()
  public void setAuto(Boolean)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.setBitmask(Short)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.setDehumidifier(Boolean)
  public void hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.setHumidifier(Boolean)
  public List hubitat.zwave.commands.humiditycontrolsetpointv1.HumidityControlSetpointSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv1.IndicatorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv1.IndicatorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv1.IndicatorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv1.IndicatorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv1.IndicatorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv1.IndicatorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv2.IndicatorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getIndicatorId()
  public List getPayload()
  public void setIndicatorId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv2.IndicatorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getIndicatorId()
  public List getPayload()
  public void setIndicatorId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv2.IndicatorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short getIndicatorCount()
  public List getIndicatorValues()
  public List getPayload()
  public Short getValue()
  public void setIndicatorCount(Short)
  public void setIndicatorValues(List)
  public void setValue(Short)
  public List hubitat.zwave.commands.indicatorv1.IndicatorReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getValue()
  public void super$3$setValue(Short)
]
class hubitat.zwave.commands.indicatorv2.IndicatorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short getIndicatorCount()
  public List getIndicatorValues()
  public List getPayload()
  public Short getValue()
  public void setIndicatorCount(Short)
  public void setIndicatorValues(List)
  public void setValue(Short)
  public List hubitat.zwave.commands.indicatorv1.IndicatorReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getValue()
  public void super$3$setValue(Short)
]
class hubitat.zwave.commands.indicatorv2.IndicatorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short getIndicatorCount()
  public List getIndicatorValues()
  public List getPayload()
  public Short getValue()
  public void setIndicatorCount(Short)
  public void setIndicatorValues(List)
  public void setValue(Short)
  public List hubitat.zwave.commands.indicatorv1.IndicatorSet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getValue()
  public void super$3$setValue(Short)
]
class hubitat.zwave.commands.indicatorv2.IndicatorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short getIndicatorCount()
  public List getIndicatorValues()
  public List getPayload()
  public Short getValue()
  public void setIndicatorCount(Short)
  public void setIndicatorValues(List)
  public void setValue(Short)
  public List hubitat.zwave.commands.indicatorv1.IndicatorSet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getValue()
  public void super$3$setValue(Short)
]
class hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getIndicatorId()
  public List getPayload()
  public void setIndicatorId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getIndicatorId()
  public List getPayload()
  public void setIndicatorId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv2.IndicatorSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getBinary()
  public Short getBitMaskLength()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short getIndicatorId()
  public Boolean getLowPower()
  public Boolean getMultiLevel()
  public Short getNextIndicatorId()
  public List getPayload()
  public Boolean getTogglingCycles()
  public Boolean getTogglingPeriods()
  public void setBinary(Boolean)
  public void setBitMaskLength(Short)
  public void setIndicatorId(Short)
  public void setLowPower(Boolean)
  public void setMultiLevel(Boolean)
  public void setNextIndicatorId(Short)
  public void setTogglingCycles(Boolean)
  public void setTogglingPeriods(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv2.IndicatorSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getBinary()
  public Short getBitMaskLength()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short getIndicatorId()
  public Boolean getLowPower()
  public Boolean getMultiLevel()
  public Short getNextIndicatorId()
  public List getPayload()
  public Boolean getTogglingCycles()
  public Boolean getTogglingPeriods()
  public void setBinary(Boolean)
  public void setBitMaskLength(Short)
  public void setIndicatorId(Short)
  public void setLowPower(Boolean)
  public void setMultiLevel(Boolean)
  public void setNextIndicatorId(Short)
  public void setTogglingCycles(Boolean)
  public void setTogglingPeriods(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv3.IndicatorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.indicatorv2.IndicatorGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorGet.getIndicatorId()
  public List hubitat.zwave.commands.indicatorv2.IndicatorGet.getPayload()
  public void hubitat.zwave.commands.indicatorv2.IndicatorGet.setIndicatorId(Short)
  public List hubitat.zwave.commands.indicatorv2.IndicatorGet.super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv3.IndicatorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.indicatorv2.IndicatorGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorGet.getIndicatorId()
  public List hubitat.zwave.commands.indicatorv2.IndicatorGet.getPayload()
  public void hubitat.zwave.commands.indicatorv2.IndicatorGet.setIndicatorId(Short)
  public List hubitat.zwave.commands.indicatorv2.IndicatorGet.super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv3.IndicatorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.indicatorv2.IndicatorReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ALARM = 12
  public static Short INDICATOR_TYPE_ALARM_BURGLAR = 13
  public static Short INDICATOR_TYPE_ALARM_CO = 15
  public static Short INDICATOR_TYPE_ALARM_SMOKE = 14
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_AWAY = 11
  public static Short INDICATOR_TYPE_ARMED_STAY = 10
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_BYPASS_CHALLENGE = 16
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_ENTRY_DELAY = 17
  public static Short INDICATOR_TYPE_EXIT_DELAY = 18
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_IDENTIFY = 80
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short hubitat.zwave.commands.indicatorv2.IndicatorReport.getIndicatorCount()
  public List hubitat.zwave.commands.indicatorv2.IndicatorReport.getIndicatorValues()
  public List hubitat.zwave.commands.indicatorv2.IndicatorReport.getPayload()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorReport.getValue()
  public void hubitat.zwave.commands.indicatorv2.IndicatorReport.setIndicatorCount(Short)
  public void hubitat.zwave.commands.indicatorv2.IndicatorReport.setIndicatorValues(List)
  public void hubitat.zwave.commands.indicatorv2.IndicatorReport.setValue(Short)
  public List hubitat.zwave.commands.indicatorv1.IndicatorReport.super$2$getPayload()
  public String hubitat.zwave.commands.indicatorv2.IndicatorReport.super$3$getCMD()
  public List hubitat.zwave.commands.indicatorv2.IndicatorReport.super$3$getPayload()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorReport.super$3$getValue()
  public void hubitat.zwave.commands.indicatorv2.IndicatorReport.super$3$setValue(Short)
]
class hubitat.zwave.commands.indicatorv3.IndicatorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.indicatorv2.IndicatorReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ALARM = 12
  public static Short INDICATOR_TYPE_ALARM_BURGLAR = 13
  public static Short INDICATOR_TYPE_ALARM_CO = 15
  public static Short INDICATOR_TYPE_ALARM_SMOKE = 14
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_AWAY = 11
  public static Short INDICATOR_TYPE_ARMED_STAY = 10
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_BYPASS_CHALLENGE = 16
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_ENTRY_DELAY = 17
  public static Short INDICATOR_TYPE_EXIT_DELAY = 18
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_IDENTIFY = 80
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short hubitat.zwave.commands.indicatorv2.IndicatorReport.getIndicatorCount()
  public List hubitat.zwave.commands.indicatorv2.IndicatorReport.getIndicatorValues()
  public List hubitat.zwave.commands.indicatorv2.IndicatorReport.getPayload()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorReport.getValue()
  public void hubitat.zwave.commands.indicatorv2.IndicatorReport.setIndicatorCount(Short)
  public void hubitat.zwave.commands.indicatorv2.IndicatorReport.setIndicatorValues(List)
  public void hubitat.zwave.commands.indicatorv2.IndicatorReport.setValue(Short)
  public List hubitat.zwave.commands.indicatorv1.IndicatorReport.super$2$getPayload()
  public String hubitat.zwave.commands.indicatorv2.IndicatorReport.super$3$getCMD()
  public List hubitat.zwave.commands.indicatorv2.IndicatorReport.super$3$getPayload()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorReport.super$3$getValue()
  public void hubitat.zwave.commands.indicatorv2.IndicatorReport.super$3$setValue(Short)
]
class hubitat.zwave.commands.indicatorv3.IndicatorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.indicatorv2.IndicatorSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ALARM = 12
  public static Short INDICATOR_TYPE_ALARM_BURGLAR = 13
  public static Short INDICATOR_TYPE_ALARM_CO = 15
  public static Short INDICATOR_TYPE_ALARM_SMOKE = 14
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_AWAY = 11
  public static Short INDICATOR_TYPE_ARMED_STAY = 10
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_BYPASS_CHALLENGE = 16
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_ENTRY_DELAY = 17
  public static Short INDICATOR_TYPE_EXIT_DELAY = 18
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_IDENTIFY = 80
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short hubitat.zwave.commands.indicatorv2.IndicatorSet.getIndicatorCount()
  public List hubitat.zwave.commands.indicatorv2.IndicatorSet.getIndicatorValues()
  public List hubitat.zwave.commands.indicatorv2.IndicatorSet.getPayload()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorSet.getValue()
  public void hubitat.zwave.commands.indicatorv2.IndicatorSet.setIndicatorCount(Short)
  public void hubitat.zwave.commands.indicatorv2.IndicatorSet.setIndicatorValues(List)
  public void hubitat.zwave.commands.indicatorv2.IndicatorSet.setValue(Short)
  public List hubitat.zwave.commands.indicatorv1.IndicatorSet.super$2$getPayload()
  public String hubitat.zwave.commands.indicatorv2.IndicatorSet.super$3$getCMD()
  public List hubitat.zwave.commands.indicatorv2.IndicatorSet.super$3$getPayload()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorSet.super$3$getValue()
  public void hubitat.zwave.commands.indicatorv2.IndicatorSet.super$3$setValue(Short)
]
class hubitat.zwave.commands.indicatorv3.IndicatorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.indicatorv2.IndicatorSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ALARM = 12
  public static Short INDICATOR_TYPE_ALARM_BURGLAR = 13
  public static Short INDICATOR_TYPE_ALARM_CO = 15
  public static Short INDICATOR_TYPE_ALARM_SMOKE = 14
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_AWAY = 11
  public static Short INDICATOR_TYPE_ARMED_STAY = 10
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_BYPASS_CHALLENGE = 16
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_ENTRY_DELAY = 17
  public static Short INDICATOR_TYPE_EXIT_DELAY = 18
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_IDENTIFY = 80
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short hubitat.zwave.commands.indicatorv2.IndicatorSet.getIndicatorCount()
  public List hubitat.zwave.commands.indicatorv2.IndicatorSet.getIndicatorValues()
  public List hubitat.zwave.commands.indicatorv2.IndicatorSet.getPayload()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorSet.getValue()
  public void hubitat.zwave.commands.indicatorv2.IndicatorSet.setIndicatorCount(Short)
  public void hubitat.zwave.commands.indicatorv2.IndicatorSet.setIndicatorValues(List)
  public void hubitat.zwave.commands.indicatorv2.IndicatorSet.setValue(Short)
  public List hubitat.zwave.commands.indicatorv1.IndicatorSet.super$2$getPayload()
  public String hubitat.zwave.commands.indicatorv2.IndicatorSet.super$3$getCMD()
  public List hubitat.zwave.commands.indicatorv2.IndicatorSet.super$3$getPayload()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorSet.super$3$getValue()
  public void hubitat.zwave.commands.indicatorv2.IndicatorSet.super$3$setValue(Short)
]
class hubitat.zwave.commands.indicatorv3.IndicatorSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet.getIndicatorId()
  public List hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet.getPayload()
  public void hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet.setIndicatorId(Short)
  public List hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv3.IndicatorSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet.getIndicatorId()
  public List hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet.getPayload()
  public void hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet.setIndicatorId(Short)
  public List hubitat.zwave.commands.indicatorv2.IndicatorSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.indicatorv3.IndicatorSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getBinary()
  public Short getBitMaskLength()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ALARM = 12
  public static Short INDICATOR_TYPE_ALARM_BURGLAR = 13
  public static Short INDICATOR_TYPE_ALARM_CO = 15
  public static Short INDICATOR_TYPE_ALARM_SMOKE = 14
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_AWAY = 11
  public static Short INDICATOR_TYPE_ARMED_STAY = 10
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_BYPASS_CHALLENGE = 16
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_ENTRY_DELAY = 17
  public static Short INDICATOR_TYPE_EXIT_DELAY = 18
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_IDENTIFY = 80
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short getIndicatorId()
  public Boolean getLowPower()
  public Boolean getMultiLevel()
  public Boolean getMultilevelSound()
  public Short getNextIndicatorId()
  public List getPayload()
  public Boolean getTimeoutCentiSeconds()
  public Boolean getTimeoutMinutes()
  public Boolean getTimeoutSeconds()
  public Boolean getTogglingCycles()
  public Boolean getTogglingOnTime()
  public Boolean getTogglingPeriods()
  public void setBinary(Boolean)
  public void setBitMaskLength(Short)
  public void setIndicatorId(Short)
  public void setLowPower(Boolean)
  public void setMultiLevel(Boolean)
  public void setMultilevelSound(Boolean)
  public void setNextIndicatorId(Short)
  public void setTimeoutCentiSeconds(Boolean)
  public void setTimeoutMinutes(Boolean)
  public void setTimeoutSeconds(Boolean)
  public void setTogglingCycles(Boolean)
  public void setTogglingOnTime(Boolean)
  public void setTogglingPeriods(Boolean)
  public List hubitat.zwave.commands.indicatorv2.IndicatorSupportedReport.super$2$getPayload()
  public Boolean super$3$getBinary()
  public Short super$3$getBitMaskLength()
  public String super$3$getCMD()
  public Short super$3$getIndicatorId()
  public Boolean super$3$getLowPower()
  public Boolean super$3$getMultiLevel()
  public Short super$3$getNextIndicatorId()
  public List super$3$getPayload()
  public Boolean super$3$getTogglingCycles()
  public Boolean super$3$getTogglingPeriods()
  public void super$3$setBinary(Boolean)
  public void super$3$setBitMaskLength(Short)
  public void super$3$setIndicatorId(Short)
  public void super$3$setLowPower(Boolean)
  public void super$3$setMultiLevel(Boolean)
  public void super$3$setNextIndicatorId(Short)
  public void super$3$setTogglingCycles(Boolean)
  public void super$3$setTogglingPeriods(Boolean)
]
class hubitat.zwave.commands.indicatorv3.IndicatorSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getBinary()
  public Short getBitMaskLength()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short INDICATOR_TYPE_ALARM = 12
  public static Short INDICATOR_TYPE_ALARM_BURGLAR = 13
  public static Short INDICATOR_TYPE_ALARM_CO = 15
  public static Short INDICATOR_TYPE_ALARM_SMOKE = 14
  public static Short INDICATOR_TYPE_ARMED = 1
  public static Short INDICATOR_TYPE_ARMED_AWAY = 11
  public static Short INDICATOR_TYPE_ARMED_STAY = 10
  public static Short INDICATOR_TYPE_ARMED_ZONE_1 = 32
  public static Short INDICATOR_TYPE_ARMED_ZONE_2 = 33
  public static Short INDICATOR_TYPE_ARMED_ZONE_3 = 34
  public static Short INDICATOR_TYPE_ARMED_ZONE_4 = 35
  public static Short INDICATOR_TYPE_ARMED_ZONE_5 = 36
  public static Short INDICATOR_TYPE_ARMED_ZONE_6 = 37
  public static Short INDICATOR_TYPE_BACKLIGHT_COMMANDS = 66
  public static Short INDICATOR_TYPE_BACKLIGHT_DIGITS = 65
  public static Short INDICATOR_TYPE_BACKLIGHT_LCD = 48
  public static Short INDICATOR_TYPE_BACKLIGHT_LETTERS = 64
  public static Short INDICATOR_TYPE_BUSY = 5
  public static Short INDICATOR_TYPE_BUZZER = 240
  public static Short INDICATOR_TYPE_BYPASS_CHALLENGE = 16
  public static Short INDICATOR_TYPE_CODE_ACCEPTED = 8
  public static Short INDICATOR_TYPE_CODE_REJECTED = 9
  public static Short INDICATOR_TYPE_DISARMED = 2
  public static Short INDICATOR_TYPE_ENTER_ID = 6
  public static Short INDICATOR_TYPE_ENTER_PIN = 7
  public static Short INDICATOR_TYPE_ENTRY_DELAY = 17
  public static Short INDICATOR_TYPE_EXIT_DELAY = 18
  public static Short INDICATOR_TYPE_FAULT = 4
  public static Short INDICATOR_TYPE_IDENTIFY = 80
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_1 = 67
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_10 = 76
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_11 = 77
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_12 = 78
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_2 = 68
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_3 = 69
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_4 = 70
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_5 = 71
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_6 = 72
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_7 = 73
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_8 = 74
  public static Short INDICATOR_TYPE_INDICATION_BUTTON_9 = 75
  public static Short INDICATOR_TYPE_READY = 3
  public static Short INDICATOR_TYPE_RESERVED = 0
  public Short getIndicatorId()
  public Boolean getLowPower()
  public Boolean getMultiLevel()
  public Boolean getMultilevelSound()
  public Short getNextIndicatorId()
  public List getPayload()
  public Boolean getTimeoutCentiSeconds()
  public Boolean getTimeoutMinutes()
  public Boolean getTimeoutSeconds()
  public Boolean getTogglingCycles()
  public Boolean getTogglingOnTime()
  public Boolean getTogglingPeriods()
  public void setBinary(Boolean)
  public void setBitMaskLength(Short)
  public void setIndicatorId(Short)
  public void setLowPower(Boolean)
  public void setMultiLevel(Boolean)
  public void setMultilevelSound(Boolean)
  public void setNextIndicatorId(Short)
  public void setTimeoutCentiSeconds(Boolean)
  public void setTimeoutMinutes(Boolean)
  public void setTimeoutSeconds(Boolean)
  public void setTogglingCycles(Boolean)
  public void setTogglingOnTime(Boolean)
  public void setTogglingPeriods(Boolean)
  public List hubitat.zwave.commands.indicatorv2.IndicatorSupportedReport.super$2$getPayload()
  public Boolean super$3$getBinary()
  public Short super$3$getBitMaskLength()
  public String super$3$getCMD()
  public Short super$3$getIndicatorId()
  public Boolean super$3$getLowPower()
  public Boolean super$3$getMultiLevel()
  public Short super$3$getNextIndicatorId()
  public List super$3$getPayload()
  public Boolean super$3$getTogglingCycles()
  public Boolean super$3$getTogglingPeriods()
  public void super$3$setBinary(Boolean)
  public void super$3$setBitMaskLength(Short)
  public void super$3$setIndicatorId(Short)
  public void super$3$setLowPower(Boolean)
  public void super$3$setMultiLevel(Boolean)
  public void super$3$setNextIndicatorId(Short)
  public void super$3$setTogglingCycles(Boolean)
  public void super$3$setTogglingPeriods(Boolean)
]
class hubitat.zwave.commands.ipconfigurationv1.IpConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ipconfigurationv1.IpConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ipconfigurationv1.IpConfigurationRelease:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ipconfigurationv1.IpConfigurationRelease:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ipconfigurationv1.IpConfigurationRenew:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ipconfigurationv1.IpConfigurationRenew:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ipconfigurationv1.IpConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAutoDns()
  public Boolean getAutoIp()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDns1()
  public Integer getDns2()
  public Integer getGateway()
  public Integer getIpAddress()
  public Integer getLeasetime()
  public List getPayload()
  public Integer getSubnetMask()
  public void setAutoDns(Boolean)
  public void setAutoIp(Boolean)
  public void setDns1(Integer)
  public void setDns2(Integer)
  public void setGateway(Integer)
  public void setIpAddress(Integer)
  public void setLeasetime(Integer)
  public void setSubnetMask(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ipconfigurationv1.IpConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAutoDns()
  public Boolean getAutoIp()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDns1()
  public Integer getDns2()
  public Integer getGateway()
  public Integer getIpAddress()
  public Integer getLeasetime()
  public List getPayload()
  public Integer getSubnetMask()
  public void setAutoDns(Boolean)
  public void setAutoIp(Boolean)
  public void setDns1(Integer)
  public void setDns2(Integer)
  public void setGateway(Integer)
  public void setIpAddress(Integer)
  public void setLeasetime(Integer)
  public void setSubnetMask(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ipconfigurationv1.IpConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAutoDns()
  public Boolean getAutoIp()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDns1()
  public Integer getDns2()
  public Integer getGateway()
  public Integer getIpAddress()
  public List getPayload()
  public Integer getSubnetMask()
  public void setAutoDns(Boolean)
  public void setAutoIp(Boolean)
  public void setDns1(Integer)
  public void setDns2(Integer)
  public void setGateway(Integer)
  public void setIpAddress(Integer)
  public void setSubnetMask(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ipconfigurationv1.IpConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAutoDns()
  public Boolean getAutoIp()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDns1()
  public Integer getDns2()
  public Integer getGateway()
  public Integer getIpAddress()
  public List getPayload()
  public Integer getSubnetMask()
  public void setAutoDns(Boolean)
  public void setAutoIp(Boolean)
  public void setDns1(Integer)
  public void setDns2(Integer)
  public void setGateway(Integer)
  public void setIpAddress(Integer)
  public void setSubnetMask(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemConfigGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemConfigGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemConfigReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHighPressureThresholdPrecision()
  public Short getHighPressureThresholdScale()
  public Short getHighPressureThresholdSize()
  public List getHighPressureThresholdValue()
  public Short getLowPressureThresholdPrecision()
  public Short getLowPressureThresholdScale()
  public Short getLowPressureThresholdSize()
  public List getLowPressureThresholdValue()
  public Short getMasterValveDelay()
  public List getPayload()
  public static short SENSOR_POLARITY_MOISTURE_SENSOR_POLARITY = 1
  public static short SENSOR_POLARITY_RAIN_SENSOR_POLARITY = 0
  public static short SENSOR_POLARITY_VALID = 7
  public BigDecimal getScaledHighPressureThreshold()
  public BigDecimal getScaledLowPressureThresholdPressure()
  public Short getSensorPolarity()
  public void setHighPressureThresholdPrecision(Short)
  public void setHighPressureThresholdScale(Short)
  public void setHighPressureThresholdSize(Short)
  public void setHighPressureThresholdValue(List)
  public void setLowPressureThresholdPrecision(Short)
  public void setLowPressureThresholdScale(Short)
  public void setLowPressureThresholdSize(Short)
  public void setLowPressureThresholdValue(List)
  public void setMasterValveDelay(Short)
  public void setScaledHighPressureThreshold(BigDecimal)
  public void setScaledLowPressureThresholdPressure(BigDecimal)
  public void setSensorPolarity(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemConfigReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHighPressureThresholdPrecision()
  public Short getHighPressureThresholdScale()
  public Short getHighPressureThresholdSize()
  public List getHighPressureThresholdValue()
  public Short getLowPressureThresholdPrecision()
  public Short getLowPressureThresholdScale()
  public Short getLowPressureThresholdSize()
  public List getLowPressureThresholdValue()
  public Short getMasterValveDelay()
  public List getPayload()
  public static short SENSOR_POLARITY_MOISTURE_SENSOR_POLARITY = 1
  public static short SENSOR_POLARITY_RAIN_SENSOR_POLARITY = 0
  public static short SENSOR_POLARITY_VALID = 7
  public BigDecimal getScaledHighPressureThreshold()
  public BigDecimal getScaledLowPressureThresholdPressure()
  public Short getSensorPolarity()
  public void setHighPressureThresholdPrecision(Short)
  public void setHighPressureThresholdScale(Short)
  public void setHighPressureThresholdSize(Short)
  public void setHighPressureThresholdValue(List)
  public void setLowPressureThresholdPrecision(Short)
  public void setLowPressureThresholdScale(Short)
  public void setLowPressureThresholdSize(Short)
  public void setLowPressureThresholdValue(List)
  public void setMasterValveDelay(Short)
  public void setScaledHighPressureThreshold(BigDecimal)
  public void setScaledLowPressureThresholdPressure(BigDecimal)
  public void setSensorPolarity(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemConfigSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHighPressureThresholdPrecision()
  public Short getHighPressureThresholdScale()
  public Short getHighPressureThresholdSize()
  public List getHighPressureThresholdValue()
  public Short getLowPressureThresholdPrecision()
  public Short getLowPressureThresholdScale()
  public Short getLowPressureThresholdSize()
  public List getLowPressureThresholdValue()
  public Short getMasterValveDelay()
  public List getPayload()
  public static short SENSOR_POLARITY_MOISTURE_SENSOR_POLARITY = 1
  public static short SENSOR_POLARITY_RAIN_SENSOR_POLARITY = 0
  public static short SENSOR_POLARITY_VALID = 7
  public BigDecimal getScaledHighPressureThreshold()
  public BigDecimal getScaledLowPressureThresholdPressure()
  public Short getSensorPolarity()
  public void setHighPressureThresholdPrecision(Short)
  public void setHighPressureThresholdScale(Short)
  public void setHighPressureThresholdSize(Short)
  public void setHighPressureThresholdValue(List)
  public void setLowPressureThresholdPrecision(Short)
  public void setLowPressureThresholdScale(Short)
  public void setLowPressureThresholdSize(Short)
  public void setLowPressureThresholdValue(List)
  public void setMasterValveDelay(Short)
  public void setScaledHighPressureThreshold(BigDecimal)
  public void setScaledLowPressureThresholdPressure(BigDecimal)
  public void setSensorPolarity(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemConfigSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHighPressureThresholdPrecision()
  public Short getHighPressureThresholdScale()
  public Short getHighPressureThresholdSize()
  public List getHighPressureThresholdValue()
  public Short getLowPressureThresholdPrecision()
  public Short getLowPressureThresholdScale()
  public Short getLowPressureThresholdSize()
  public List getLowPressureThresholdValue()
  public Short getMasterValveDelay()
  public List getPayload()
  public static short SENSOR_POLARITY_MOISTURE_SENSOR_POLARITY = 1
  public static short SENSOR_POLARITY_RAIN_SENSOR_POLARITY = 0
  public static short SENSOR_POLARITY_VALID = 7
  public BigDecimal getScaledHighPressureThreshold()
  public BigDecimal getScaledLowPressureThresholdPressure()
  public Short getSensorPolarity()
  public void setHighPressureThresholdPrecision(Short)
  public void setHighPressureThresholdScale(Short)
  public void setHighPressureThresholdSize(Short)
  public void setHighPressureThresholdValue(List)
  public void setLowPressureThresholdPrecision(Short)
  public void setLowPressureThresholdScale(Short)
  public void setLowPressureThresholdSize(Short)
  public void setLowPressureThresholdValue(List)
  public void setMasterValveDelay(Short)
  public void setScaledHighPressureThreshold(BigDecimal)
  public void setScaledLowPressureThresholdPressure(BigDecimal)
  public void setSensorPolarity(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMasterValve()
  public List getPayload()
  public Short getTotalNumberOfValveTables()
  public Short getTotalNumberOfValves()
  public Short getValveTableMaxSize()
  public void setMasterValve(Boolean)
  public void setTotalNumberOfValveTables(Short)
  public void setTotalNumberOfValves(Short)
  public void setValveTableMaxSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMasterValve()
  public List getPayload()
  public Short getTotalNumberOfValveTables()
  public Short getTotalNumberOfValves()
  public Short getValveTableMaxSize()
  public void setMasterValve(Boolean)
  public void setTotalNumberOfValveTables(Short)
  public void setTotalNumberOfValves(Short)
  public void setValveTableMaxSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemShutoff:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public List getPayload()
  public void setDuration(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemShutoff:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public List getPayload()
  public void setDuration(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short ERROR_STATUS_EMERGENCY_SHUTDOWN = 1
  public static short ERROR_STATUS_HIGH_THRESHOLD_TRIGGERED = 2
  public static short ERROR_STATUS_LOW_THRESHOLD_TRIGGERED = 3
  public static short ERROR_STATUS_NOT_PROGRAMMED = 0
  public static short ERROR_STATUS_VALVE_ERRORS = 4
  public Short getFlowPrecision()
  public Short getFlowScale()
  public Short getFlowSize()
  public List getFlowValue()
  public Boolean getMasterValve()
  public List getPayload()
  public Short getPressurePrecision()
  public Short getPressureScale()
  public Short getPressureSize()
  public List getPressureValue()
  public static short STATUS_FLOW_SENSOR_DETECTED = 0
  public static short STATUS_MOISTURE_SENSOR_DETECTED = 3
  public static short STATUS_PRESSURE_SENSOR_DETECTED = 1
  public static short STATUS_RAIN_SENSOR_DETECTED = 2
  public BigDecimal getScaledFlow()
  public BigDecimal getScaledPressure()
  public Short getSensorStatus()
  public Short getShutoffDuration()
  public Short getSystemErrorStatus()
  public Short getSystemVoltage()
  public Short getValveID()
  public void setFlowPrecision(Short)
  public void setFlowScale(Short)
  public void setFlowSize(Short)
  public void setFlowValue(List)
  public void setMasterValve(Boolean)
  public void setPressurePrecision(Short)
  public void setPressureScale(Short)
  public void setPressureSize(Short)
  public void setPressureValue(List)
  public void setScaledFlow(BigDecimal)
  public void setScaledPressure(BigDecimal)
  public void setSensorStatus(Short)
  public void setShutoffDuration(Short)
  public void setSystemErrorStatus(Short)
  public void setSystemVoltage(Short)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationSystemStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short ERROR_STATUS_EMERGENCY_SHUTDOWN = 1
  public static short ERROR_STATUS_HIGH_THRESHOLD_TRIGGERED = 2
  public static short ERROR_STATUS_LOW_THRESHOLD_TRIGGERED = 3
  public static short ERROR_STATUS_NOT_PROGRAMMED = 0
  public static short ERROR_STATUS_VALVE_ERRORS = 4
  public Short getFlowPrecision()
  public Short getFlowScale()
  public Short getFlowSize()
  public List getFlowValue()
  public Boolean getMasterValve()
  public List getPayload()
  public Short getPressurePrecision()
  public Short getPressureScale()
  public Short getPressureSize()
  public List getPressureValue()
  public static short STATUS_FLOW_SENSOR_DETECTED = 0
  public static short STATUS_MOISTURE_SENSOR_DETECTED = 3
  public static short STATUS_PRESSURE_SENSOR_DETECTED = 1
  public static short STATUS_RAIN_SENSOR_DETECTED = 2
  public BigDecimal getScaledFlow()
  public BigDecimal getScaledPressure()
  public Short getSensorStatus()
  public Short getShutoffDuration()
  public Short getSystemErrorStatus()
  public Short getSystemVoltage()
  public Short getValveID()
  public void setFlowPrecision(Short)
  public void setFlowScale(Short)
  public void setFlowSize(Short)
  public void setFlowValue(List)
  public void setMasterValve(Boolean)
  public void setPressurePrecision(Short)
  public void setPressureScale(Short)
  public void setPressureSize(Short)
  public void setPressureValue(List)
  public void setScaledFlow(BigDecimal)
  public void setScaledPressure(BigDecimal)
  public void setSensorStatus(Short)
  public void setShutoffDuration(Short)
  public void setSystemErrorStatus(Short)
  public void setSystemVoltage(Short)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveConfigGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMasterValve()
  public List getPayload()
  public Short getValveID()
  public void setMasterValve(Boolean)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveConfigGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMasterValve()
  public List getPayload()
  public Short getValveID()
  public void setMasterValve(Boolean)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveConfigReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getFlowHighThresholdPrecision()
  public Short getFlowHighThresholdScale()
  public Short getFlowHighThresholdSize()
  public List getFlowHighThresholdValue()
  public Short getFlowLowThresholdPrecision()
  public Short getFlowLowThresholdScale()
  public Short getFlowLowThresholdSize()
  public List getFlowLowThresholdValue()
  public Boolean getMasterValve()
  public Short getMaximumFlowPrecision()
  public Short getMaximumFlowScale()
  public Short getMaximumFlowSize()
  public List getMaximumFlowValue()
  public Short getNominalCurrentHighThreshold()
  public Short getNominalCurrentLowThreshold()
  public List getPayload()
  public static short SENSOR_USAGE_USE_MOISTURE_SENSOR = 1
  public static short SENSOR_USAGE_USE_RAIN_SENSOR = 0
  public BigDecimal getScaledFlowHighThreshold()
  public BigDecimal getScaledFlowLowThreshold()
  public BigDecimal getScaledMaximumFlow()
  public Short getSensorUsage()
  public Short getValveID()
  public void setFlowHighThresholdPrecision(Short)
  public void setFlowHighThresholdScale(Short)
  public void setFlowHighThresholdSize(Short)
  public void setFlowHighThresholdValue(List)
  public void setFlowLowThresholdPrecision(Short)
  public void setFlowLowThresholdScale(Short)
  public void setFlowLowThresholdSize(Short)
  public void setFlowLowThresholdValue(List)
  public void setMasterValve(Boolean)
  public void setMaximumFlowPrecision(Short)
  public void setMaximumFlowScale(Short)
  public void setMaximumFlowSize(Short)
  public void setMaximumFlowValue(List)
  public void setNominalCurrentHighThreshold(Short)
  public void setNominalCurrentLowThreshold(Short)
  public void setScaledFlowHighThreshold(BigDecimal)
  public void setScaledFlowLowThreshold(BigDecimal)
  public void setScaledMaximumFlow(BigDecimal)
  public void setSensorUsage(Short)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveConfigReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getFlowHighThresholdPrecision()
  public Short getFlowHighThresholdScale()
  public Short getFlowHighThresholdSize()
  public List getFlowHighThresholdValue()
  public Short getFlowLowThresholdPrecision()
  public Short getFlowLowThresholdScale()
  public Short getFlowLowThresholdSize()
  public List getFlowLowThresholdValue()
  public Boolean getMasterValve()
  public Short getMaximumFlowPrecision()
  public Short getMaximumFlowScale()
  public Short getMaximumFlowSize()
  public List getMaximumFlowValue()
  public Short getNominalCurrentHighThreshold()
  public Short getNominalCurrentLowThreshold()
  public List getPayload()
  public static short SENSOR_USAGE_USE_MOISTURE_SENSOR = 1
  public static short SENSOR_USAGE_USE_RAIN_SENSOR = 0
  public BigDecimal getScaledFlowHighThreshold()
  public BigDecimal getScaledFlowLowThreshold()
  public BigDecimal getScaledMaximumFlow()
  public Short getSensorUsage()
  public Short getValveID()
  public void setFlowHighThresholdPrecision(Short)
  public void setFlowHighThresholdScale(Short)
  public void setFlowHighThresholdSize(Short)
  public void setFlowHighThresholdValue(List)
  public void setFlowLowThresholdPrecision(Short)
  public void setFlowLowThresholdScale(Short)
  public void setFlowLowThresholdSize(Short)
  public void setFlowLowThresholdValue(List)
  public void setMasterValve(Boolean)
  public void setMaximumFlowPrecision(Short)
  public void setMaximumFlowScale(Short)
  public void setMaximumFlowSize(Short)
  public void setMaximumFlowValue(List)
  public void setNominalCurrentHighThreshold(Short)
  public void setNominalCurrentLowThreshold(Short)
  public void setScaledFlowHighThreshold(BigDecimal)
  public void setScaledFlowLowThreshold(BigDecimal)
  public void setScaledMaximumFlow(BigDecimal)
  public void setSensorUsage(Short)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveConfigSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getFlowHighThresholdPrecision()
  public Short getFlowHighThresholdScale()
  public Short getFlowHighThresholdSize()
  public List getFlowHighThresholdValue()
  public Short getFlowLowThresholdPrecision()
  public Short getFlowLowThresholdScale()
  public Short getFlowLowThresholdSize()
  public List getFlowLowThresholdValue()
  public Boolean getMasterValve()
  public Short getMaximumFlowPrecision()
  public Short getMaximumFlowScale()
  public Short getMaximumFlowSize()
  public List getMaximumFlowValue()
  public Short getNominalCurrentHighThreshold()
  public Short getNominalCurrentLowThreshold()
  public List getPayload()
  public static short SENSOR_USAGE_USE_MOISTURE_SENSOR = 1
  public static short SENSOR_USAGE_USE_RAIN_SENSOR = 0
  public BigDecimal getScaledFlowHighThreshold()
  public BigDecimal getScaledFlowLowThreshold()
  public BigDecimal getScaledMaximumFlow()
  public Short getSensorUsage()
  public Short getValveID()
  public void setFlowHighThresholdPrecision(Short)
  public void setFlowHighThresholdScale(Short)
  public void setFlowHighThresholdSize(Short)
  public void setFlowHighThresholdValue(List)
  public void setFlowLowThresholdPrecision(Short)
  public void setFlowLowThresholdScale(Short)
  public void setFlowLowThresholdSize(Short)
  public void setFlowLowThresholdValue(List)
  public void setMasterValve(Boolean)
  public void setMaximumFlowPrecision(Short)
  public void setMaximumFlowScale(Short)
  public void setMaximumFlowSize(Short)
  public void setMaximumFlowValue(List)
  public void setNominalCurrentHighThreshold(Short)
  public void setNominalCurrentLowThreshold(Short)
  public void setScaledFlowHighThreshold(BigDecimal)
  public void setScaledFlowLowThreshold(BigDecimal)
  public void setScaledMaximumFlow(BigDecimal)
  public void setSensorUsage(Short)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveConfigSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getFlowHighThresholdPrecision()
  public Short getFlowHighThresholdScale()
  public Short getFlowHighThresholdSize()
  public List getFlowHighThresholdValue()
  public Short getFlowLowThresholdPrecision()
  public Short getFlowLowThresholdScale()
  public Short getFlowLowThresholdSize()
  public List getFlowLowThresholdValue()
  public Boolean getMasterValve()
  public Short getMaximumFlowPrecision()
  public Short getMaximumFlowScale()
  public Short getMaximumFlowSize()
  public List getMaximumFlowValue()
  public Short getNominalCurrentHighThreshold()
  public Short getNominalCurrentLowThreshold()
  public List getPayload()
  public static short SENSOR_USAGE_USE_MOISTURE_SENSOR = 1
  public static short SENSOR_USAGE_USE_RAIN_SENSOR = 0
  public BigDecimal getScaledFlowHighThreshold()
  public BigDecimal getScaledFlowLowThreshold()
  public BigDecimal getScaledMaximumFlow()
  public Short getSensorUsage()
  public Short getValveID()
  public void setFlowHighThresholdPrecision(Short)
  public void setFlowHighThresholdScale(Short)
  public void setFlowHighThresholdSize(Short)
  public void setFlowHighThresholdValue(List)
  public void setFlowLowThresholdPrecision(Short)
  public void setFlowLowThresholdScale(Short)
  public void setFlowLowThresholdSize(Short)
  public void setFlowLowThresholdValue(List)
  public void setMasterValve(Boolean)
  public void setMaximumFlowPrecision(Short)
  public void setMaximumFlowScale(Short)
  public void setMaximumFlowSize(Short)
  public void setMaximumFlowValue(List)
  public void setNominalCurrentHighThreshold(Short)
  public void setNominalCurrentLowThreshold(Short)
  public void setScaledFlowHighThreshold(BigDecimal)
  public void setScaledFlowLowThreshold(BigDecimal)
  public void setScaledMaximumFlow(BigDecimal)
  public void setSensorUsage(Short)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMasterValve()
  public List getPayload()
  public Short getValveID()
  public void setMasterValve(Boolean)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMasterValve()
  public List getPayload()
  public Short getValveID()
  public void setMasterValve(Boolean)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getConnected()
  public Boolean getMaster()
  public Short getNominalCurrent()
  public List getPayload()
  public static short VALVE_ERROR_CURRENT_HIGH_THRESHOLD = 1
  public static short VALVE_ERROR_CURRENT_LOW_THRESHOLD = 2
  public static short VALVE_ERROR_FLOW_HIGH_THRESHOLD = 4
  public static short VALVE_ERROR_FLOW_LOW_THRESHOLD = 5
  public static short VALVE_ERROR_MAXIMUM_FLOW = 3
  public static short VALVE_ERROR_SHORT_CIRCUIT = 0
  public Short getValveErrorStatus()
  public Short getValveID()
  public void setConnected(Boolean)
  public void setMaster(Boolean)
  public void setNominalCurrent(Short)
  public void setValveErrorStatus(Short)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getConnected()
  public Boolean getMaster()
  public Short getNominalCurrent()
  public List getPayload()
  public static short VALVE_ERROR_CURRENT_HIGH_THRESHOLD = 1
  public static short VALVE_ERROR_CURRENT_LOW_THRESHOLD = 2
  public static short VALVE_ERROR_FLOW_HIGH_THRESHOLD = 4
  public static short VALVE_ERROR_FLOW_LOW_THRESHOLD = 5
  public static short VALVE_ERROR_MAXIMUM_FLOW = 3
  public static short VALVE_ERROR_SHORT_CIRCUIT = 0
  public Short getValveErrorStatus()
  public Short getValveID()
  public void setConnected(Boolean)
  public void setMaster(Boolean)
  public void setNominalCurrent(Short)
  public void setValveErrorStatus(Short)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveRun:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDuration()
  public Boolean getMasterValve()
  public List getPayload()
  public Short getValveID()
  public void setDuration(Integer)
  public void setMasterValve(Boolean)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveRun:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDuration()
  public Boolean getMasterValve()
  public List getPayload()
  public Short getValveID()
  public void setDuration(Integer)
  public void setMasterValve(Boolean)
  public void setValveID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveTableGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValveTableID()
  public void setValveTableID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveTableGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValveTableID()
  public void setValveTableID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveTableReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List getValveTable()
  public Short getValveTableID()
  public void setValveTable(List)
  public void setValveTableID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveTableReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List getValveTable()
  public Short getValveTableID()
  public void setValveTable(List)
  public void setValveTableID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveTableRun:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List getValveTableID()
  public void setValveTableID(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveTableRun:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List getValveTableID()
  public void setValveTableID(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveTableSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List getValveTable()
  public Short getValveTableID()
  public void setValveTable(List)
  public void setValveTableID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.irrigationv1.IrrigationValveTableSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List getValveTable()
  public Short getValveTableID()
  public void setValveTable(List)
  public void setValveTableID(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.languagev1.LanguageGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.languagev1.LanguageGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.languagev1.LanguageReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCountry()
  public Integer getLanguage()
  public List getPayload()
  public void setCountry(Integer)
  public void setLanguage(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.languagev1.LanguageReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCountry()
  public Integer getLanguage()
  public List getPayload()
  public void setCountry(Integer)
  public void setLanguage(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.languagev1.LanguageSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCountry()
  public Integer getLanguage()
  public List getPayload()
  public void setCountry(Integer)
  public void setLanguage(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.languagev1.LanguageSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCountry()
  public Integer getLanguage()
  public List getPayload()
  public void setCountry(Integer)
  public void setLanguage(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.lockv1.LockGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.lockv1.LockGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.lockv1.LockReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLockState()
  public List getPayload()
  public void setLockState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.lockv1.LockReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLockState()
  public List getPayload()
  public void setLockState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.lockv1.LockSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLockState()
  public List getPayload()
  public void setLockState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.lockv1.LockSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLockState()
  public List getPayload()
  public void setLockState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getManufacturerId()
  public String getManufacturerName()
  public List getPayload()
  public Integer getProductId()
  public Integer getProductTypeId()
  public void setManufacturerId(Integer)
  public void setProductId(Integer)
  public void setProductTypeId(Integer)
  public List super$2$getPayload()
  public Object this$dist$get$2(String)
  public Object this$dist$invoke$2(String,Object)
  public void this$dist$set$2(String,Object)
]
class hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getManufacturerId()
  public String getManufacturerName()
  public List getPayload()
  public Integer getProductId()
  public Integer getProductTypeId()
  public void setManufacturerId(Integer)
  public void setProductId(Integer)
  public void setProductTypeId(Integer)
  public List super$2$getPayload()
  public Object this$dist$get$2(String)
  public Object this$dist$invoke$2(String,Object)
  public void this$dist$set$2(String,Object)
]
class hubitat.zwave.commands.manufacturerspecificv2.DeviceSpecificGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short DEVICE_ID_TYPE_FACTORY_DEFAULT = 0
  public static Short DEVICE_ID_TYPE_PSEUDO_RANDOM = 2
  public static Short DEVICE_ID_TYPE_SERIAL_NUMBER = 1
  public Short getDeviceIdType()
  public List getPayload()
  public void setDeviceIdType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.manufacturerspecificv2.DeviceSpecificGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short DEVICE_ID_TYPE_FACTORY_DEFAULT = 0
  public static Short DEVICE_ID_TYPE_PSEUDO_RANDOM = 2
  public static Short DEVICE_ID_TYPE_SERIAL_NUMBER = 1
  public Short getDeviceIdType()
  public List getPayload()
  public void setDeviceIdType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.manufacturerspecificv2.DeviceSpecificReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short DEVICE_ID_DATA_FORMAT_BINARY = 1
  public static Short DEVICE_ID_DATA_FORMAT_UTF8 = 0
  public static Short DEVICE_ID_TYPE_FACTORY_DEFAULT = 0
  public static Short DEVICE_ID_TYPE_PSEUDO_RANDOM = 2
  public static Short DEVICE_ID_TYPE_SERIAL_NUMBER = 1
  public List getDeviceIdData()
  public Short getDeviceIdDataFormat()
  public Short getDeviceIdDataLengthIndicator()
  public Short getDeviceIdType()
  public List getPayload()
  public void setDeviceIdData(List)
  public void setDeviceIdDataFormat(Short)
  public void setDeviceIdDataLengthIndicator(Short)
  public void setDeviceIdType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.manufacturerspecificv2.DeviceSpecificReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short DEVICE_ID_DATA_FORMAT_BINARY = 1
  public static Short DEVICE_ID_DATA_FORMAT_UTF8 = 0
  public static Short DEVICE_ID_TYPE_FACTORY_DEFAULT = 0
  public static Short DEVICE_ID_TYPE_PSEUDO_RANDOM = 2
  public static Short DEVICE_ID_TYPE_SERIAL_NUMBER = 1
  public List getDeviceIdData()
  public Short getDeviceIdDataFormat()
  public Short getDeviceIdDataLengthIndicator()
  public Short getDeviceIdType()
  public List getPayload()
  public void setDeviceIdData(List)
  public void setDeviceIdDataFormat(Short)
  public void setDeviceIdDataLengthIndicator(Short)
  public void setDeviceIdType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.manufacturerspecificv2.ManufacturerSpecificGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificGet.getPayload()
  public List hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificGet.super$2$getPayload()
]
class hubitat.zwave.commands.manufacturerspecificv2.ManufacturerSpecificGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificGet.getPayload()
  public List hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificGet.super$2$getPayload()
]
class hubitat.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getManufacturerId()
  public String hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getManufacturerName()
  public List hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getPayload()
  public Integer hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getProductId()
  public Integer hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getProductTypeId()
  public void hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.setManufacturerId(Integer)
  public void hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.setProductId(Integer)
  public void hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.setProductTypeId(Integer)
  public List hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.super$2$getPayload()
  public Object hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.this$dist$get$2(String)
  public Object hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.this$dist$invoke$2(String,Object)
  public void hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.this$dist$set$2(String,Object)
]
class hubitat.zwave.commands.manufacturerspecificv2.ManufacturerSpecificReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getManufacturerId()
  public String hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getManufacturerName()
  public List hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getPayload()
  public Integer hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getProductId()
  public Integer hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.getProductTypeId()
  public void hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.setManufacturerId(Integer)
  public void hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.setProductId(Integer)
  public void hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.setProductTypeId(Integer)
  public List hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.super$2$getPayload()
  public Object hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.this$dist$get$2(String)
  public Object hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.this$dist$invoke$2(String,Object)
  public void hubitat.zwave.commands.manufacturerspecificv1.ManufacturerSpecificReport.this$dist$set$2(String,Object)
]
class hubitat.zwave.commands.meterpulsev1.MeterPulseGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterpulsev1.MeterPulseGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterpulsev1.MeterPulseReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Integer getPulseCount()
  public void setPulseCount(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterpulsev1.MeterPulseReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Integer getPulseCount()
  public void setPulseCount(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblconfigv1.MeterTblTablePointAdmNoSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMeterPointAdmNumberCharacter()
  public Short getNumberOfCharacters()
  public List getPayload()
  public void setMeterPointAdmNumberCharacter(List)
  public void setNumberOfCharacters(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblconfigv1.MeterTblTablePointAdmNoSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMeterPointAdmNumberCharacter()
  public Short getNumberOfCharacters()
  public List getPayload()
  public void setMeterPointAdmNumberCharacter(List)
  public void setNumberOfCharacters(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblCurrentDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDatasetRequested()
  public List getPayload()
  public void setDatasetRequested(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblCurrentDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDatasetRequested()
  public List getPayload()
  public void setDatasetRequested(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblCurrentDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getRateType()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setRateType(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblCurrentDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getRateType()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setRateType(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblHistoricalDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getHistoricalDatasetRequested()
  public Short getMaximumReports()
  public List getPayload()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Short getStopSecondLocalTime()
  public Integer getStopYear()
  public void setHistoricalDatasetRequested(Integer)
  public void setMaximumReports(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopSecondLocalTime(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblHistoricalDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getHistoricalDatasetRequested()
  public Short getMaximumReports()
  public List getPayload()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Short getStopSecondLocalTime()
  public Integer getStopYear()
  public void setHistoricalDatasetRequested(Integer)
  public void setMaximumReports(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopSecondLocalTime(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblHistoricalDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getRateType()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setRateType(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblHistoricalDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getRateType()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setRateType(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataHistorySupported()
  public Integer getDatasetHistorySupported()
  public Integer getDatasetSupported()
  public Short getMeterType()
  public static Short PAY_METER_CREDITMETER = 1
  public static Short PAY_METER_PREPAYMENT_METER = 2
  public static Short PAY_METER_PREPAYMENT_METER_DEBT = 3
  public static Short PAY_METER_RESERVED0 = 0
  public Short getPayMeter()
  public List getPayload()
  public Short getRateType()
  public void setDataHistorySupported(Integer)
  public void setDatasetHistorySupported(Integer)
  public void setDatasetSupported(Integer)
  public void setMeterType(Short)
  public void setPayMeter(Short)
  public void setRateType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataHistorySupported()
  public Integer getDatasetHistorySupported()
  public Integer getDatasetSupported()
  public Short getMeterType()
  public static Short PAY_METER_CREDITMETER = 1
  public static Short PAY_METER_PREPAYMENT_METER = 2
  public static Short PAY_METER_PREPAYMENT_METER_DEBT = 3
  public static Short PAY_METER_RESERVED0 = 0
  public Short getPayMeter()
  public List getPayload()
  public Short getRateType()
  public void setDataHistorySupported(Integer)
  public void setDatasetHistorySupported(Integer)
  public void setDatasetSupported(Integer)
  public void setMeterType(Short)
  public void setPayMeter(Short)
  public void setRateType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblStatusDateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaximumReports()
  public List getPayload()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Short getStopSecondLocalTime()
  public Integer getStopYear()
  public void setMaximumReports(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopSecondLocalTime(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblStatusDateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaximumReports()
  public List getPayload()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Short getStopSecondLocalTime()
  public Integer getStopYear()
  public void setMaximumReports(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopSecondLocalTime(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblStatusDepthGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getStatusEventLogDepth()
  public void setStatusEventLogDepth(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblStatusDepthGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getStatusEventLogDepth()
  public void setStatusEventLogDepth(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCurrentOperatingStatus()
  public List getPayload()
  public Short getReportsToFollow()
  public void setCurrentOperatingStatus(Integer)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCurrentOperatingStatus()
  public List getPayload()
  public Short getReportsToFollow()
  public void setCurrentOperatingStatus(Integer)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblStatusSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblStatusSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblStatusSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getStatusEventLogDepth()
  public Integer getSupportedOperatingStatus()
  public void setStatusEventLogDepth(Short)
  public void setSupportedOperatingStatus(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblStatusSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getStatusEventLogDepth()
  public Integer getSupportedOperatingStatus()
  public void setStatusEventLogDepth(Short)
  public void setSupportedOperatingStatus(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblTableCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblTableCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblTableIdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblTableIdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblTableIdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMeterIdCharacter()
  public Short getNumberOfCharacters()
  public List getPayload()
  public void setMeterIdCharacter(List)
  public void setNumberOfCharacters(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblTableIdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMeterIdCharacter()
  public Short getNumberOfCharacters()
  public List getPayload()
  public void setMeterIdCharacter(List)
  public void setNumberOfCharacters(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblTablePointAdmNoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblTablePointAdmNoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblTablePointAdmNoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMeterPointAdmNumberCharacter()
  public Short getNumberOfCharacters()
  public List getPayload()
  public void setMeterPointAdmNumberCharacter(List)
  public void setNumberOfCharacters(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv1.MeterTblTablePointAdmNoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMeterPointAdmNumberCharacter()
  public Short getNumberOfCharacters()
  public List getPayload()
  public void setMeterPointAdmNumberCharacter(List)
  public void setNumberOfCharacters(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblCurrentDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDatasetRequested()
  public List getPayload()
  public void setDatasetRequested(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblCurrentDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDatasetRequested()
  public List getPayload()
  public void setDatasetRequested(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblCurrentDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Boolean getOperatingStatusIndication()
  public List getPayload()
  public Short getRateType()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setOperatingStatusIndication(Boolean)
  public void setRateType(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblCurrentDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Boolean getOperatingStatusIndication()
  public List getPayload()
  public Short getRateType()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setOperatingStatusIndication(Boolean)
  public void setRateType(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblHistoricalDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getHistoricalDatasetRequested()
  public Short getMaximumReports()
  public List getPayload()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Short getStopSecondLocalTime()
  public Integer getStopYear()
  public void setHistoricalDatasetRequested(Integer)
  public void setMaximumReports(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopSecondLocalTime(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblHistoricalDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getHistoricalDatasetRequested()
  public Short getMaximumReports()
  public List getPayload()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Short getStopSecondLocalTime()
  public Integer getStopYear()
  public void setHistoricalDatasetRequested(Integer)
  public void setMaximumReports(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopSecondLocalTime(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblHistoricalDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Boolean getOperatingStatusIndication()
  public List getPayload()
  public Short getRateType()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setOperatingStatusIndication(Boolean)
  public void setRateType(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblHistoricalDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Boolean getOperatingStatusIndication()
  public List getPayload()
  public Short getRateType()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setOperatingStatusIndication(Boolean)
  public void setRateType(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataHistorySupported()
  public Integer getDatasetHistorySupported()
  public Integer getDatasetSupported()
  public Short getMeterType()
  public static Short PAY_METER_CREDITMETER = 1
  public static Short PAY_METER_PREPAYMENT_METER = 2
  public static Short PAY_METER_PREPAYMENT_METER_DEBT = 3
  public static Short PAY_METER_RESERVED0 = 0
  public Short getPayMeter()
  public List getPayload()
  public Short getRateType()
  public void setDataHistorySupported(Integer)
  public void setDatasetHistorySupported(Integer)
  public void setDatasetSupported(Integer)
  public void setMeterType(Short)
  public void setPayMeter(Short)
  public void setRateType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataHistorySupported()
  public Integer getDatasetHistorySupported()
  public Integer getDatasetSupported()
  public Short getMeterType()
  public static Short PAY_METER_CREDITMETER = 1
  public static Short PAY_METER_PREPAYMENT_METER = 2
  public static Short PAY_METER_PREPAYMENT_METER_DEBT = 3
  public static Short PAY_METER_RESERVED0 = 0
  public Short getPayMeter()
  public List getPayload()
  public Short getRateType()
  public void setDataHistorySupported(Integer)
  public void setDatasetHistorySupported(Integer)
  public void setDatasetSupported(Integer)
  public void setMeterType(Short)
  public void setPayMeter(Short)
  public void setRateType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblStatusDateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaximumReports()
  public List getPayload()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Short getStopSecondLocalTime()
  public Integer getStopYear()
  public void setMaximumReports(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopSecondLocalTime(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblStatusDateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaximumReports()
  public List getPayload()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Short getStopSecondLocalTime()
  public Integer getStopYear()
  public void setMaximumReports(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopSecondLocalTime(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblStatusDepthGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getStatusEventLogDepth()
  public void setStatusEventLogDepth(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblStatusDepthGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getStatusEventLogDepth()
  public void setStatusEventLogDepth(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCurrentOperatingStatus()
  public List getPayload()
  public Short getReportsToFollow()
  public void setCurrentOperatingStatus(Integer)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCurrentOperatingStatus()
  public List getPayload()
  public Short getReportsToFollow()
  public void setCurrentOperatingStatus(Integer)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblStatusSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblStatusSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblStatusSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getStatusEventLogDepth()
  public Integer getSupportedOperatingStatus()
  public void setStatusEventLogDepth(Short)
  public void setSupportedOperatingStatus(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblStatusSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getStatusEventLogDepth()
  public Integer getSupportedOperatingStatus()
  public void setStatusEventLogDepth(Short)
  public void setSupportedOperatingStatus(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblTableCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblTableCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblTableIdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblTableIdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblTableIdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMeterIdCharacter()
  public Short getNumberOfCharacters()
  public List getPayload()
  public void setMeterIdCharacter(List)
  public void setNumberOfCharacters(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblTableIdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMeterIdCharacter()
  public Short getNumberOfCharacters()
  public List getPayload()
  public void setMeterIdCharacter(List)
  public void setNumberOfCharacters(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblTablePointAdmNoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblTablePointAdmNoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblTablePointAdmNoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMeterPointAdmNumberCharacter()
  public Short getNumberOfCharacters()
  public List getPayload()
  public void setMeterPointAdmNumberCharacter(List)
  public void setNumberOfCharacters(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblmonitorv2.MeterTblTablePointAdmNoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getMeterPointAdmNumberCharacter()
  public Short getNumberOfCharacters()
  public List getPayload()
  public void setMeterPointAdmNumberCharacter(List)
  public void setNumberOfCharacters(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblpushv1.MeterTblPushConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblpushv1.MeterTblPushConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblpushv1.MeterTblPushConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getIntervalDays()
  public Short getIntervalHours()
  public Short getIntervalMinutes()
  public Short getIntervalMonths()
  public Short getOperatingStatusPushMode()
  public List getPayload()
  public Boolean getPs()
  public Integer getPushDataset()
  public Short getPushNodeId()
  public void setIntervalDays(Short)
  public void setIntervalHours(Short)
  public void setIntervalMinutes(Short)
  public void setIntervalMonths(Short)
  public void setOperatingStatusPushMode(Short)
  public void setPs(Boolean)
  public void setPushDataset(Integer)
  public void setPushNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblpushv1.MeterTblPushConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getIntervalDays()
  public Short getIntervalHours()
  public Short getIntervalMinutes()
  public Short getIntervalMonths()
  public Short getOperatingStatusPushMode()
  public List getPayload()
  public Boolean getPs()
  public Integer getPushDataset()
  public Short getPushNodeId()
  public void setIntervalDays(Short)
  public void setIntervalHours(Short)
  public void setIntervalMinutes(Short)
  public void setIntervalMonths(Short)
  public void setOperatingStatusPushMode(Short)
  public void setPs(Boolean)
  public void setPushDataset(Integer)
  public void setPushNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblpushv1.MeterTblPushConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getIntervalDays()
  public Short getIntervalHours()
  public Short getIntervalMinutes()
  public Short getIntervalMonths()
  public Short getOperatingStatusPushMode()
  public List getPayload()
  public Boolean getPs()
  public Integer getPushDataset()
  public Short getPushNodeId()
  public void setIntervalDays(Short)
  public void setIntervalHours(Short)
  public void setIntervalMinutes(Short)
  public void setIntervalMonths(Short)
  public void setOperatingStatusPushMode(Short)
  public void setPs(Boolean)
  public void setPushDataset(Integer)
  public void setPushNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.metertblpushv1.MeterTblPushConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getIntervalDays()
  public Short getIntervalHours()
  public Short getIntervalMinutes()
  public Short getIntervalMonths()
  public Short getOperatingStatusPushMode()
  public List getPayload()
  public Boolean getPs()
  public Integer getPushDataset()
  public Short getPushNodeId()
  public void setIntervalDays(Short)
  public void setIntervalHours(Short)
  public void setIntervalMinutes(Short)
  public void setIntervalMonths(Short)
  public void setOperatingStatusPushMode(Short)
  public void setPs(Boolean)
  public void setPushDataset(Integer)
  public void setPushNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv1.MeterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv1.MeterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv1.MeterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short METER_TYPE_ELECTRIC_METER = 1
  public static Short METER_TYPE_GAS_METER = 2
  public static Short METER_TYPE_WATER_METER = 3
  public Short getMeterType()
  public List getMeterValue()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledMeterValue()
  public Short getSize()
  public void setMeterType(Short)
  public void setMeterValue(List)
  public void setPrecision(Short)
  public void setScale(Short)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv1.MeterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short METER_TYPE_ELECTRIC_METER = 1
  public static Short METER_TYPE_GAS_METER = 2
  public static Short METER_TYPE_WATER_METER = 3
  public Short getMeterType()
  public List getMeterValue()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledMeterValue()
  public Short getSize()
  public void setMeterType(Short)
  public void setMeterValue(List)
  public void setPrecision(Short)
  public void setScale(Short)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv2.MeterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScale()
  public void setScale(Short)
  public List hubitat.zwave.commands.meterv1.MeterGet.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.meterv2.MeterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScale()
  public void setScale(Short)
  public List hubitat.zwave.commands.meterv1.MeterGet.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.meterv2.MeterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDeltaTime()
  public static Short METER_TYPE_ELECTRIC_METER = 1
  public static Short METER_TYPE_GAS_METER = 2
  public static Short METER_TYPE_WATER_METER = 3
  public Short hubitat.zwave.commands.meterv1.MeterReport.getMeterType()
  public List hubitat.zwave.commands.meterv1.MeterReport.getMeterValue()
  public List getPayload()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getPrecision()
  public List getPreviousMeterValue()
  public Short getRateType()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getScale()
  public BigDecimal hubitat.zwave.commands.meterv1.MeterReport.getScaledMeterValue()
  public BigDecimal getScaledPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getSize()
  public void setDeltaTime(Integer)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterValue(List)
  public void hubitat.zwave.commands.meterv1.MeterReport.setPrecision(Short)
  public void setPreviousMeterValue(List)
  public void setRateType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setScale(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setSize(Short)
  public List hubitat.zwave.commands.meterv1.MeterReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.meterv2.MeterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDeltaTime()
  public static Short METER_TYPE_ELECTRIC_METER = 1
  public static Short METER_TYPE_GAS_METER = 2
  public static Short METER_TYPE_WATER_METER = 3
  public Short hubitat.zwave.commands.meterv1.MeterReport.getMeterType()
  public List hubitat.zwave.commands.meterv1.MeterReport.getMeterValue()
  public List getPayload()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getPrecision()
  public List getPreviousMeterValue()
  public Short getRateType()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getScale()
  public BigDecimal hubitat.zwave.commands.meterv1.MeterReport.getScaledMeterValue()
  public BigDecimal getScaledPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getSize()
  public void setDeltaTime(Integer)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterValue(List)
  public void hubitat.zwave.commands.meterv1.MeterReport.setPrecision(Short)
  public void setPreviousMeterValue(List)
  public void setRateType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setScale(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setSize(Short)
  public List hubitat.zwave.commands.meterv1.MeterReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.meterv2.MeterReset:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv2.MeterReset:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv2.MeterSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv2.MeterSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv2.MeterSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMeterReset()
  public Short getMeterType()
  public List getPayload()
  public Short getScaleSupported()
  public void setMeterReset(Boolean)
  public void setMeterType(Short)
  public void setScaleSupported(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv2.MeterSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMeterReset()
  public Short getMeterType()
  public List getPayload()
  public Short getScaleSupported()
  public void setMeterReset(Boolean)
  public void setMeterType(Short)
  public void setScaleSupported(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.meterv3.MeterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short hubitat.zwave.commands.meterv2.MeterGet.getScale()
  public void hubitat.zwave.commands.meterv2.MeterGet.setScale(Short)
  public List hubitat.zwave.commands.meterv1.MeterGet.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterGet.super$3$getPayload()
  public List super$4$getPayload()
]
class hubitat.zwave.commands.meterv3.MeterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short hubitat.zwave.commands.meterv2.MeterGet.getScale()
  public void hubitat.zwave.commands.meterv2.MeterGet.setScale(Short)
  public List hubitat.zwave.commands.meterv1.MeterGet.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterGet.super$3$getPayload()
  public List super$4$getPayload()
]
class hubitat.zwave.commands.meterv3.MeterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.meterv2.MeterReport.getDeltaTime()
  public static Short METER_TYPE_ELECTRIC_METER = 1
  public static Short METER_TYPE_GAS_METER = 2
  public static Short METER_TYPE_WATER_METER = 3
  public Short hubitat.zwave.commands.meterv1.MeterReport.getMeterType()
  public List hubitat.zwave.commands.meterv1.MeterReport.getMeterValue()
  public List getPayload()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getPrecision()
  public List hubitat.zwave.commands.meterv2.MeterReport.getPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv2.MeterReport.getRateType()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getScale()
  public BigDecimal hubitat.zwave.commands.meterv1.MeterReport.getScaledMeterValue()
  public BigDecimal hubitat.zwave.commands.meterv2.MeterReport.getScaledPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getSize()
  public void hubitat.zwave.commands.meterv2.MeterReport.setDeltaTime(Integer)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterValue(List)
  public void hubitat.zwave.commands.meterv1.MeterReport.setPrecision(Short)
  public void hubitat.zwave.commands.meterv2.MeterReport.setPreviousMeterValue(List)
  public void hubitat.zwave.commands.meterv2.MeterReport.setRateType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setScale(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setSize(Short)
  public List hubitat.zwave.commands.meterv1.MeterReport.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReport.super$3$getPayload()
  public List super$4$getPayload()
]
class hubitat.zwave.commands.meterv3.MeterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.meterv2.MeterReport.getDeltaTime()
  public static Short METER_TYPE_ELECTRIC_METER = 1
  public static Short METER_TYPE_GAS_METER = 2
  public static Short METER_TYPE_WATER_METER = 3
  public Short hubitat.zwave.commands.meterv1.MeterReport.getMeterType()
  public List hubitat.zwave.commands.meterv1.MeterReport.getMeterValue()
  public List getPayload()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getPrecision()
  public List hubitat.zwave.commands.meterv2.MeterReport.getPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv2.MeterReport.getRateType()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getScale()
  public BigDecimal hubitat.zwave.commands.meterv1.MeterReport.getScaledMeterValue()
  public BigDecimal hubitat.zwave.commands.meterv2.MeterReport.getScaledPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getSize()
  public void hubitat.zwave.commands.meterv2.MeterReport.setDeltaTime(Integer)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterValue(List)
  public void hubitat.zwave.commands.meterv1.MeterReport.setPrecision(Short)
  public void hubitat.zwave.commands.meterv2.MeterReport.setPreviousMeterValue(List)
  public void hubitat.zwave.commands.meterv2.MeterReport.setRateType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setScale(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setSize(Short)
  public List hubitat.zwave.commands.meterv1.MeterReport.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReport.super$3$getPayload()
  public List super$4$getPayload()
]
class hubitat.zwave.commands.meterv3.MeterReset:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterReset.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterReset.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReset.super$2$getPayload()
]
class hubitat.zwave.commands.meterv3.MeterReset:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterReset.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterReset.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReset.super$2$getPayload()
]
class hubitat.zwave.commands.meterv3.MeterSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.meterv3.MeterSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.meterv3.MeterSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterReset()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterType()
  public List getPayload()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getScaleSupported()
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterReset(Boolean)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setScaleSupported(Short)
  public List hubitat.zwave.commands.meterv2.MeterSupportedReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.meterv3.MeterSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterReset()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterType()
  public List getPayload()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getScaleSupported()
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterReset(Boolean)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setScaleSupported(Short)
  public List hubitat.zwave.commands.meterv2.MeterSupportedReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.meterv4.MeterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateType()
  public Short hubitat.zwave.commands.meterv2.MeterGet.getScale()
  public Short getScale2()
  public void setRateType(Short)
  public void hubitat.zwave.commands.meterv2.MeterGet.setScale(Short)
  public void setScale2(Short)
  public List hubitat.zwave.commands.meterv1.MeterGet.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterGet.super$3$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterGet.super$4$getPayload()
  public List super$5$getPayload()
]
class hubitat.zwave.commands.meterv4.MeterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateType()
  public Short hubitat.zwave.commands.meterv2.MeterGet.getScale()
  public Short getScale2()
  public void setRateType(Short)
  public void hubitat.zwave.commands.meterv2.MeterGet.setScale(Short)
  public void setScale2(Short)
  public List hubitat.zwave.commands.meterv1.MeterGet.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterGet.super$3$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterGet.super$4$getPayload()
  public List super$5$getPayload()
]
class hubitat.zwave.commands.meterv4.MeterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.meterv2.MeterReport.getDeltaTime()
  public static Short METER_TYPE_ELECTRIC_METER = 1
  public static Short METER_TYPE_GAS_METER = 2
  public static Short METER_TYPE_WATER_METER = 3
  public Short hubitat.zwave.commands.meterv1.MeterReport.getMeterType()
  public List hubitat.zwave.commands.meterv1.MeterReport.getMeterValue()
  public List getPayload()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getPrecision()
  public List hubitat.zwave.commands.meterv2.MeterReport.getPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv2.MeterReport.getRateType()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getScale()
  public Short getScale2()
  public BigDecimal hubitat.zwave.commands.meterv1.MeterReport.getScaledMeterValue()
  public BigDecimal hubitat.zwave.commands.meterv2.MeterReport.getScaledPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getSize()
  public void hubitat.zwave.commands.meterv2.MeterReport.setDeltaTime(Integer)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterValue(List)
  public void hubitat.zwave.commands.meterv1.MeterReport.setPrecision(Short)
  public void hubitat.zwave.commands.meterv2.MeterReport.setPreviousMeterValue(List)
  public void hubitat.zwave.commands.meterv2.MeterReport.setRateType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setScale(Short)
  public void setScale2(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setSize(Short)
  public List hubitat.zwave.commands.meterv1.MeterReport.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReport.super$3$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterReport.super$4$getPayload()
  public List super$5$getPayload()
]
class hubitat.zwave.commands.meterv4.MeterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.meterv2.MeterReport.getDeltaTime()
  public static Short METER_TYPE_ELECTRIC_METER = 1
  public static Short METER_TYPE_GAS_METER = 2
  public static Short METER_TYPE_WATER_METER = 3
  public Short hubitat.zwave.commands.meterv1.MeterReport.getMeterType()
  public List hubitat.zwave.commands.meterv1.MeterReport.getMeterValue()
  public List getPayload()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getPrecision()
  public List hubitat.zwave.commands.meterv2.MeterReport.getPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv2.MeterReport.getRateType()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getScale()
  public Short getScale2()
  public BigDecimal hubitat.zwave.commands.meterv1.MeterReport.getScaledMeterValue()
  public BigDecimal hubitat.zwave.commands.meterv2.MeterReport.getScaledPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getSize()
  public void hubitat.zwave.commands.meterv2.MeterReport.setDeltaTime(Integer)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterValue(List)
  public void hubitat.zwave.commands.meterv1.MeterReport.setPrecision(Short)
  public void hubitat.zwave.commands.meterv2.MeterReport.setPreviousMeterValue(List)
  public void hubitat.zwave.commands.meterv2.MeterReport.setRateType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setScale(Short)
  public void setScale2(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setSize(Short)
  public List hubitat.zwave.commands.meterv1.MeterReport.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReport.super$3$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterReport.super$4$getPayload()
  public List super$5$getPayload()
]
class hubitat.zwave.commands.meterv4.MeterReset:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterReset.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterReset.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReset.super$2$getPayload()
]
class hubitat.zwave.commands.meterv4.MeterReset:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterReset.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterReset.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReset.super$2$getPayload()
]
class hubitat.zwave.commands.meterv4.MeterSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.meterv4.MeterSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.meterv4.MeterSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterReset()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterType()
  public Boolean getMoreScaleTypes()
  public List getPayload()
  public Short getRateType()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getScaleSupported()
  public List getScaleSupportedBytes()
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterReset(Boolean)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterType(Short)
  public void setMoreScaleTypes(Boolean)
  public void setRateType(Short)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setScaleSupported(Short)
  public void setScaleSupportedBytes(List)
  public List hubitat.zwave.commands.meterv2.MeterSupportedReport.super$2$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterSupportedReport.super$3$getPayload()
  public List super$4$getPayload()
]
class hubitat.zwave.commands.meterv4.MeterSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterReset()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterType()
  public Boolean getMoreScaleTypes()
  public List getPayload()
  public Short getRateType()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getScaleSupported()
  public List getScaleSupportedBytes()
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterReset(Boolean)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterType(Short)
  public void setMoreScaleTypes(Boolean)
  public void setRateType(Short)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setScaleSupported(Short)
  public void setScaleSupportedBytes(List)
  public List hubitat.zwave.commands.meterv2.MeterSupportedReport.super$2$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterSupportedReport.super$3$getPayload()
  public List super$4$getPayload()
]
class hubitat.zwave.commands.meterv5.MeterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv4.MeterGet.getPayload()
  public Short hubitat.zwave.commands.meterv4.MeterGet.getRateType()
  public Short hubitat.zwave.commands.meterv2.MeterGet.getScale()
  public Short hubitat.zwave.commands.meterv4.MeterGet.getScale2()
  public void hubitat.zwave.commands.meterv4.MeterGet.setRateType(Short)
  public void hubitat.zwave.commands.meterv2.MeterGet.setScale(Short)
  public void hubitat.zwave.commands.meterv4.MeterGet.setScale2(Short)
  public List hubitat.zwave.commands.meterv1.MeterGet.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterGet.super$3$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterGet.super$4$getPayload()
  public List hubitat.zwave.commands.meterv4.MeterGet.super$5$getPayload()
]
class hubitat.zwave.commands.meterv5.MeterGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv4.MeterGet.getPayload()
  public Short hubitat.zwave.commands.meterv4.MeterGet.getRateType()
  public Short hubitat.zwave.commands.meterv2.MeterGet.getScale()
  public Short hubitat.zwave.commands.meterv4.MeterGet.getScale2()
  public void hubitat.zwave.commands.meterv4.MeterGet.setRateType(Short)
  public void hubitat.zwave.commands.meterv2.MeterGet.setScale(Short)
  public void hubitat.zwave.commands.meterv4.MeterGet.setScale2(Short)
  public List hubitat.zwave.commands.meterv1.MeterGet.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterGet.super$3$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterGet.super$4$getPayload()
  public List hubitat.zwave.commands.meterv4.MeterGet.super$5$getPayload()
]
class hubitat.zwave.commands.meterv5.MeterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.meterv2.MeterReport.getDeltaTime()
  public static Short METER_TYPE_ELECTRIC_METER = 1
  public static Short METER_TYPE_GAS_METER = 2
  public static Short METER_TYPE_WATER_METER = 3
  public Short hubitat.zwave.commands.meterv1.MeterReport.getMeterType()
  public List hubitat.zwave.commands.meterv1.MeterReport.getMeterValue()
  public List hubitat.zwave.commands.meterv4.MeterReport.getPayload()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getPrecision()
  public List hubitat.zwave.commands.meterv2.MeterReport.getPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv2.MeterReport.getRateType()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getScale()
  public Short hubitat.zwave.commands.meterv4.MeterReport.getScale2()
  public BigDecimal hubitat.zwave.commands.meterv1.MeterReport.getScaledMeterValue()
  public BigDecimal hubitat.zwave.commands.meterv2.MeterReport.getScaledPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getSize()
  public void hubitat.zwave.commands.meterv2.MeterReport.setDeltaTime(Integer)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterValue(List)
  public void hubitat.zwave.commands.meterv1.MeterReport.setPrecision(Short)
  public void hubitat.zwave.commands.meterv2.MeterReport.setPreviousMeterValue(List)
  public void hubitat.zwave.commands.meterv2.MeterReport.setRateType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setScale(Short)
  public void hubitat.zwave.commands.meterv4.MeterReport.setScale2(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setSize(Short)
  public List hubitat.zwave.commands.meterv1.MeterReport.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReport.super$3$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterReport.super$4$getPayload()
  public List hubitat.zwave.commands.meterv4.MeterReport.super$5$getPayload()
]
class hubitat.zwave.commands.meterv5.MeterReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv1.MeterReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.meterv2.MeterReport.getDeltaTime()
  public static Short METER_TYPE_ELECTRIC_METER = 1
  public static Short METER_TYPE_GAS_METER = 2
  public static Short METER_TYPE_WATER_METER = 3
  public Short hubitat.zwave.commands.meterv1.MeterReport.getMeterType()
  public List hubitat.zwave.commands.meterv1.MeterReport.getMeterValue()
  public List hubitat.zwave.commands.meterv4.MeterReport.getPayload()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getPrecision()
  public List hubitat.zwave.commands.meterv2.MeterReport.getPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv2.MeterReport.getRateType()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getScale()
  public Short hubitat.zwave.commands.meterv4.MeterReport.getScale2()
  public BigDecimal hubitat.zwave.commands.meterv1.MeterReport.getScaledMeterValue()
  public BigDecimal hubitat.zwave.commands.meterv2.MeterReport.getScaledPreviousMeterValue()
  public Short hubitat.zwave.commands.meterv1.MeterReport.getSize()
  public void hubitat.zwave.commands.meterv2.MeterReport.setDeltaTime(Integer)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setMeterValue(List)
  public void hubitat.zwave.commands.meterv1.MeterReport.setPrecision(Short)
  public void hubitat.zwave.commands.meterv2.MeterReport.setPreviousMeterValue(List)
  public void hubitat.zwave.commands.meterv2.MeterReport.setRateType(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setScale(Short)
  public void hubitat.zwave.commands.meterv4.MeterReport.setScale2(Short)
  public void hubitat.zwave.commands.meterv1.MeterReport.setSize(Short)
  public List hubitat.zwave.commands.meterv1.MeterReport.super$2$getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReport.super$3$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterReport.super$4$getPayload()
  public List hubitat.zwave.commands.meterv4.MeterReport.super$5$getPayload()
]
class hubitat.zwave.commands.meterv5.MeterReset:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterReset.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterReset.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReset.super$2$getPayload()
]
class hubitat.zwave.commands.meterv5.MeterReset:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterReset.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterReset.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterReset.super$2$getPayload()
]
class hubitat.zwave.commands.meterv5.MeterSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.meterv5.MeterSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.getPayload()
  public List hubitat.zwave.commands.meterv2.MeterSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.meterv5.MeterSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterReset()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterType()
  public Boolean hubitat.zwave.commands.meterv4.MeterSupportedReport.getMoreScaleTypes()
  public List hubitat.zwave.commands.meterv4.MeterSupportedReport.getPayload()
  public Short hubitat.zwave.commands.meterv4.MeterSupportedReport.getRateType()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getScaleSupported()
  public List hubitat.zwave.commands.meterv4.MeterSupportedReport.getScaleSupportedBytes()
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterReset(Boolean)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv4.MeterSupportedReport.setMoreScaleTypes(Boolean)
  public void hubitat.zwave.commands.meterv4.MeterSupportedReport.setRateType(Short)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setScaleSupported(Short)
  public void hubitat.zwave.commands.meterv4.MeterSupportedReport.setScaleSupportedBytes(List)
  public List hubitat.zwave.commands.meterv2.MeterSupportedReport.super$2$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterSupportedReport.super$3$getPayload()
  public List hubitat.zwave.commands.meterv4.MeterSupportedReport.super$4$getPayload()
]
class hubitat.zwave.commands.meterv5.MeterSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.meterv2.MeterSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterReset()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getMeterType()
  public Boolean hubitat.zwave.commands.meterv4.MeterSupportedReport.getMoreScaleTypes()
  public List hubitat.zwave.commands.meterv4.MeterSupportedReport.getPayload()
  public Short hubitat.zwave.commands.meterv4.MeterSupportedReport.getRateType()
  public Short hubitat.zwave.commands.meterv2.MeterSupportedReport.getScaleSupported()
  public List hubitat.zwave.commands.meterv4.MeterSupportedReport.getScaleSupportedBytes()
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterReset(Boolean)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setMeterType(Short)
  public void hubitat.zwave.commands.meterv4.MeterSupportedReport.setMoreScaleTypes(Boolean)
  public void hubitat.zwave.commands.meterv4.MeterSupportedReport.setRateType(Short)
  public void hubitat.zwave.commands.meterv2.MeterSupportedReport.setScaleSupported(Short)
  public void hubitat.zwave.commands.meterv4.MeterSupportedReport.setScaleSupportedBytes(List)
  public List hubitat.zwave.commands.meterv2.MeterSupportedReport.super$2$getPayload()
  public List hubitat.zwave.commands.meterv3.MeterSupportedReport.super$3$getPayload()
  public List hubitat.zwave.commands.meterv4.MeterSupportedReport.super$4$getPayload()
]
class hubitat.zwave.commands.mtpwindowcoveringv1.MoveToPositionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.mtpwindowcoveringv1.MoveToPositionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.mtpwindowcoveringv1.MoveToPositionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.mtpwindowcoveringv1.MoveToPositionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.mtpwindowcoveringv1.MoveToPositionSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.mtpwindowcoveringv1.MoveToPositionSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedGroupings()
  public void setSupportedGroupings(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedGroupings()
  public void setSupportedGroupings(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public static Short MULTI_CHANNEL_ASSOCIATION_REMOVE_MARKER = 0
  public List getMultiChannelNodeIds()
  public List getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setMultiChannelNodeIds(List)
  public void setNodeId(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public static Short MULTI_CHANNEL_ASSOCIATION_REMOVE_MARKER = 0
  public List getMultiChannelNodeIds()
  public List getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setMultiChannelNodeIds(List)
  public void setNodeId(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getMaxNodesSupported()
  public List getMultiChannelNodeIds()
  public List getNodeId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setGroupingIdentifier(Short)
  public void setMaxNodesSupported(Short)
  public void setMultiChannelNodeIds(List)
  public void setNodeId(List)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getMaxNodesSupported()
  public List getMultiChannelNodeIds()
  public List getNodeId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setGroupingIdentifier(Short)
  public void setMaxNodesSupported(Short)
  public void setMultiChannelNodeIds(List)
  public void setNodeId(List)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getMultiChannelNodeIds()
  public List getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setMultiChannelNodeIds(List)
  public void setNodeId(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getMultiChannelNodeIds()
  public List getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setMultiChannelNodeIds(List)
  public void setNodeId(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.getPayload()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.getPayload()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getPayload()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getSupportedGroupings()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.setSupportedGroupings(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getPayload()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getSupportedGroupings()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.setSupportedGroupings(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getGroupingIdentifier()
  public static Short MULTI_CHANNEL_ASSOCIATION_REMOVE_MARKER = 0
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setNodeId(List)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getGroupingIdentifier()
  public static Short MULTI_CHANNEL_ASSOCIATION_REMOVE_MARKER = 0
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setNodeId(List)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getMaxNodesSupported()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getPayload()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getReportsToFollow()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setMaxNodesSupported(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setNodeId(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setReportsToFollow(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getMaxNodesSupported()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getPayload()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getReportsToFollow()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setMaxNodesSupported(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setNodeId(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setReportsToFollow(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getGroupingIdentifier()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setNodeId(List)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv3.MultiChannelAssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getGroupingIdentifier()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setNodeId(List)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getGroupingIdentifier()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.setGroupingIdentifier(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.getPayload()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.getPayload()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getPayload()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getSupportedGroupings()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.setSupportedGroupings(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getPayload()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.getSupportedGroupings()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.setSupportedGroupings(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationGroupingsReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getGroupingIdentifier()
  public static Short MULTI_CHANNEL_ASSOCIATION_REMOVE_MARKER = 0
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setNodeId(List)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getGroupingIdentifier()
  public static Short MULTI_CHANNEL_ASSOCIATION_REMOVE_MARKER = 0
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.setNodeId(List)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationRemove.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getMaxNodesSupported()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getPayload()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getReportsToFollow()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setMaxNodesSupported(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setNodeId(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setReportsToFollow(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getGroupingIdentifier()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getMaxNodesSupported()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getPayload()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.getReportsToFollow()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setMaxNodesSupported(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setNodeId(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.setReportsToFollow(Short)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getGroupingIdentifier()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setNodeId(List)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelassociationv4.MultiChannelAssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getGroupingIdentifier()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getMultiChannelNodeIds()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getNodeId()
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.getPayload()
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setGroupingIdentifier(Short)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setMultiChannelNodeIds(List)
  public void hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.setNodeId(List)
  public List hubitat.zwave.commands.multichannelassociationv2.MultiChannelAssociationSet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEndPoint()
  public List getPayload()
  public void setEndPoint(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEndPoint()
  public List getPayload()
  public void setEndPoint(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamic()
  public Short getEndPoint()
  public Short getGenericDeviceClass()
  public List getPayload()
  public Short getSpecificDeviceClass()
  public void setCommandClass(List)
  public void setDynamic(Boolean)
  public void setEndPoint(Short)
  public void setGenericDeviceClass(Short)
  public void setSpecificDeviceClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamic()
  public Short getEndPoint()
  public Short getGenericDeviceClass()
  public List getPayload()
  public Short getSpecificDeviceClass()
  public void setCommandClass(List)
  public void setDynamic(Boolean)
  public void setEndPoint(Short)
  public void setGenericDeviceClass(Short)
  public void setSpecificDeviceClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelCmdEncap:
Methods:[
  public hubitat.zwave.commands.multichannelv2.MultiChannelCmdEncap encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public Boolean getBitAddress()
  public String getCMD()
  public Short getCommand()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDestinationEndPoint()
  public List getParameter()
  public List getPayload()
  public Boolean getRes01()
  public Short getSourceEndPoint()
  public void setBitAddress(Boolean)
  public void setCommand(Short)
  public void setCommandClass(Short)
  public void setDestinationEndPoint(Short)
  public void setParameter(List)
  public void setRes01(Boolean)
  public void setSourceEndPoint(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelCmdEncap:
Methods:[
  public hubitat.zwave.commands.multichannelv2.MultiChannelCmdEncap encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public Boolean getBitAddress()
  public String getCMD()
  public Short getCommand()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDestinationEndPoint()
  public List getParameter()
  public List getPayload()
  public Boolean getRes01()
  public Short getSourceEndPoint()
  public void setBitAddress(Boolean)
  public void setCommand(Short)
  public void setCommandClass(Short)
  public void setDestinationEndPoint(Short)
  public void setParameter(List)
  public void setRes01(Boolean)
  public void setSourceEndPoint(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGenericDeviceClass()
  public List getPayload()
  public Short getSpecificDeviceClass()
  public void setGenericDeviceClass(Short)
  public void setSpecificDeviceClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGenericDeviceClass()
  public List getPayload()
  public Short getSpecificDeviceClass()
  public void setGenericDeviceClass(Short)
  public void setSpecificDeviceClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getEndPoints()
  public Short getGenericDeviceClass()
  public List getPayload()
  public Short getReportsToFollow()
  public Short getSpecificDeviceClass()
  public void setEndPoints(List)
  public void setGenericDeviceClass(Short)
  public void setReportsToFollow(Short)
  public void setSpecificDeviceClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getEndPoints()
  public Short getGenericDeviceClass()
  public List getPayload()
  public Short getReportsToFollow()
  public Short getSpecificDeviceClass()
  public void setEndPoints(List)
  public void setGenericDeviceClass(Short)
  public void setReportsToFollow(Short)
  public void setSpecificDeviceClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelEndPointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamic()
  public Short getEndPoints()
  public Boolean getIdentical()
  public List getPayload()
  public void setDynamic(Boolean)
  public void setEndPoints(Short)
  public void setIdentical(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv2.MultiChannelEndPointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamic()
  public Short getEndPoints()
  public Boolean getIdentical()
  public List getPayload()
  public void setDynamic(Boolean)
  public void setEndPoints(Short)
  public void setIdentical(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getEndPoint()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getPayload()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.setEndPoint(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getEndPoint()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getPayload()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.setEndPoint(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelCapabilityReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getCMD()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getDynamic()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getEndPoint()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setCommandClass(List)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setDynamic(Boolean)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setEndPoint(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelCapabilityReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getCMD()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getDynamic()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getEndPoint()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setCommandClass(List)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setDynamic(Boolean)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setEndPoint(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelCmdEncap:
Methods:[
  public hubitat.zwave.commands.multichannelv3.MultiChannelCmdEncap encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public Boolean getBitAddress()
  public String getCMD()
  public Short getCommand()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDestinationEndPoint()
  public List getParameter()
  public List getPayload()
  public Boolean getRes01()
  public Short getSourceEndPoint()
  public void setBitAddress(Boolean)
  public void setCommand(Short)
  public void setCommandClass(Short)
  public void setDestinationEndPoint(Short)
  public void setParameter(List)
  public void setRes01(Boolean)
  public void setSourceEndPoint(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelCmdEncap:
Methods:[
  public hubitat.zwave.commands.multichannelv3.MultiChannelCmdEncap encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public Boolean getBitAddress()
  public String getCMD()
  public Short getCommand()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDestinationEndPoint()
  public List getParameter()
  public List getPayload()
  public Boolean getRes01()
  public Short getSourceEndPoint()
  public void setBitAddress(Boolean)
  public void setCommand(Short)
  public void setCommandClass(Short)
  public void setDestinationEndPoint(Short)
  public void setParameter(List)
  public void setRes01(Boolean)
  public void setSourceEndPoint(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelEndPointFind:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelEndPointFind:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelEndPointFindReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getEndPoints()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getReportsToFollow()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setEndPoints(List)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setReportsToFollow(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelEndPointFindReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getEndPoints()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getReportsToFollow()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setEndPoints(List)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setReportsToFollow(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelEndPointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.getPayload()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelEndPointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.getPayload()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamic()
  public Short getEndPoints()
  public Boolean getIdentical()
  public List getPayload()
  public void setDynamic(Boolean)
  public void setEndPoints(Short)
  public void setIdentical(Boolean)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointReport.super$2$getPayload()
  public String super$3$getCMD()
  public Boolean super$3$getDynamic()
  public Short super$3$getEndPoints()
  public Boolean super$3$getIdentical()
  public List super$3$getPayload()
  public void super$3$setDynamic(Boolean)
  public void super$3$setEndPoints(Short)
  public void super$3$setIdentical(Boolean)
]
class hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamic()
  public Short getEndPoints()
  public Boolean getIdentical()
  public List getPayload()
  public void setDynamic(Boolean)
  public void setEndPoints(Short)
  public void setIdentical(Boolean)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointReport.super$2$getPayload()
  public String super$3$getCMD()
  public Boolean super$3$getDynamic()
  public Short super$3$getEndPoints()
  public Boolean super$3$getIdentical()
  public List super$3$getPayload()
  public void super$3$setDynamic(Boolean)
  public void super$3$setEndPoints(Short)
  public void super$3$setIdentical(Boolean)
]
class hubitat.zwave.commands.multichannelv4.MultiChannelAggregatedMembersGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAggregatedEndPoint()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setAggregatedEndPoint(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelAggregatedMembersGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAggregatedEndPoint()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setAggregatedEndPoint(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelAggregatedMembersReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAggregatedEndPoint()
  public List getAggregatedMembers()
  public Short getBitMasks()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setAggregatedEndPoint(Short)
  public void setAggregatedMembers(List)
  public void setBitMasks(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelAggregatedMembersReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAggregatedEndPoint()
  public List getAggregatedMembers()
  public Short getBitMasks()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setAggregatedEndPoint(Short)
  public void setAggregatedMembers(List)
  public void setBitMasks(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getEndPoint()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getPayload()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.setEndPoint(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelCapabilityGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getEndPoint()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.getPayload()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.setEndPoint(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelCapabilityReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getCMD()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getDynamic()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getEndPoint()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setCommandClass(List)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setDynamic(Boolean)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setEndPoint(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelCapabilityReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getCMD()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getDynamic()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getEndPoint()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setCommandClass(List)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setDynamic(Boolean)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setEndPoint(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelCapabilityReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelCmdEncap:
Methods:[
  public hubitat.zwave.commands.multichannelv4.MultiChannelCmdEncap encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public Boolean getBitAddress()
  public String getCMD()
  public Short getCommand()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDestinationEndPoint()
  public List getParameter()
  public List getPayload()
  public Boolean getRes01()
  public Short getSourceEndPoint()
  public void setBitAddress(Boolean)
  public void setCommand(Short)
  public void setCommandClass(Short)
  public void setDestinationEndPoint(Short)
  public void setParameter(List)
  public void setRes01(Boolean)
  public void setSourceEndPoint(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelCmdEncap:
Methods:[
  public hubitat.zwave.commands.multichannelv4.MultiChannelCmdEncap encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public Boolean getBitAddress()
  public String getCMD()
  public Short getCommand()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDestinationEndPoint()
  public List getParameter()
  public List getPayload()
  public Boolean getRes01()
  public Short getSourceEndPoint()
  public void setBitAddress(Boolean)
  public void setCommand(Short)
  public void setCommandClass(Short)
  public void setDestinationEndPoint(Short)
  public void setParameter(List)
  public void setRes01(Boolean)
  public void setSourceEndPoint(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelEndPointFind:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelEndPointFind:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFind.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelEndPointFindReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getEndPoints()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getReportsToFollow()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setEndPoints(List)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setReportsToFollow(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelEndPointFindReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getEndPoints()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getGenericDeviceClass()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getPayload()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getReportsToFollow()
  public Short hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.getSpecificDeviceClass()
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setEndPoints(List)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setGenericDeviceClass(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setReportsToFollow(Short)
  public void hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.setSpecificDeviceClass(Short)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointFindReport.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelEndPointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.getPayload()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelEndPointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.getPayload()
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointGet.super$2$getPayload()
]
class hubitat.zwave.commands.multichannelv4.MultiChannelEndPointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAggregatedEndPoints()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamic()
  public Short getEndPoints()
  public Boolean getIdentical()
  public List getPayload()
  public void setAggregatedEndPoints(Short)
  public void setDynamic(Boolean)
  public void setEndPoints(Short)
  public void setIdentical(Boolean)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointReport.super$2$getPayload()
  public String hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$getDynamic()
  public Short hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$getEndPoints()
  public Boolean hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$getIdentical()
  public List hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$getPayload()
  public void hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$setDynamic(Boolean)
  public void hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$setEndPoints(Short)
  public void hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$setIdentical(Boolean)
  public String super$4$getCMD()
  public Boolean super$4$getDynamic()
  public Short super$4$getEndPoints()
  public Boolean super$4$getIdentical()
  public List super$4$getPayload()
  public void super$4$setDynamic(Boolean)
  public void super$4$setEndPoints(Short)
  public void super$4$setIdentical(Boolean)
]
class hubitat.zwave.commands.multichannelv4.MultiChannelEndPointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getAggregatedEndPoints()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDynamic()
  public Short getEndPoints()
  public Boolean getIdentical()
  public List getPayload()
  public void setAggregatedEndPoints(Short)
  public void setDynamic(Boolean)
  public void setEndPoints(Short)
  public void setIdentical(Boolean)
  public List hubitat.zwave.commands.multichannelv2.MultiChannelEndPointReport.super$2$getPayload()
  public String hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$getDynamic()
  public Short hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$getEndPoints()
  public Boolean hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$getIdentical()
  public List hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$getPayload()
  public void hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$setDynamic(Boolean)
  public void hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$setEndPoints(Short)
  public void hubitat.zwave.commands.multichannelv3.MultiChannelEndPointReport.super$3$setIdentical(Boolean)
  public String super$4$getCMD()
  public Boolean super$4$getDynamic()
  public Short super$4$getEndPoints()
  public Boolean super$4$getIdentical()
  public List super$4$getPayload()
  public void super$4$setDynamic(Boolean)
  public void super$4$setEndPoints(Short)
  public void super$4$setIdentical(Boolean)
]
class hubitat.zwave.commands.multicmdv1.MultiCmdEncap:
Methods:[
  public hubitat.zwave.commands.multicmdv1.MultiCmdEncap encapsulate(List)
  public List encapsulatedCommands(Map)
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public Short getNumberOfCommands()
  public List getPayload()
  public void setData(List)
  public void setNumberOfCommands(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multicmdv1.MultiCmdEncap:
Methods:[
  public hubitat.zwave.commands.multicmdv1.MultiCmdEncap encapsulate(List)
  public List encapsulatedCommands(Map)
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public Short getNumberOfCommands()
  public List getPayload()
  public void setData(List)
  public void setNumberOfCommands(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationGroupingsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedGroupings()
  public void setSupportedGroupings(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationGroupingsReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedGroupings()
  public void setSupportedGroupings(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Object getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setNodeId(Object)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Object getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setNodeId(Object)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getMaxNodesSupported()
  public List getNodeId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setGroupingIdentifier(Short)
  public void setMaxNodesSupported(Short)
  public void setNodeId(List)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public Short getMaxNodesSupported()
  public List getNodeId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setGroupingIdentifier(Short)
  public void setMaxNodesSupported(Short)
  public void setNodeId(List)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setNodeId(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstanceassociationv1.MultiInstanceAssociationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getNodeId()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public void setNodeId(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstancev1.MultiInstanceCmdEncap:
Methods:[
  public hubitat.zwave.commands.multiinstancev1.MultiInstanceCmdEncap encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommand()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getInstance()
  public List getParameter()
  public List getPayload()
  public void setCommand(Short)
  public void setCommandClass(Short)
  public void setInstance(Short)
  public void setParameter(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstancev1.MultiInstanceCmdEncap:
Methods:[
  public hubitat.zwave.commands.multiinstancev1.MultiInstanceCmdEncap encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommand()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getInstance()
  public List getParameter()
  public List getPayload()
  public void setCommand(Short)
  public void setCommandClass(Short)
  public void setInstance(Short)
  public void setParameter(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstancev1.MultiInstanceGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setCommandClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstancev1.MultiInstanceGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setCommandClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstancev1.MultiInstanceReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getInstances()
  public List getPayload()
  public void setCommandClass(Short)
  public void setInstances(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.multiinstancev1.MultiInstanceReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getInstances()
  public List getPayload()
  public void setCommandClass(Short)
  public void setInstances(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRouteNodeId()
  public void setRouteNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRouteNodeId()
  public void setRouteNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRepeater1()
  public Short getRepeater2()
  public Short getRepeater3()
  public Short getRepeater4()
  public Short getRouteNodeId()
  public Short getRouteType()
  public static Short SPEED_100 = 3
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public Short getSpeed()
  public static Short ZW_PRIORITY_ROUTE_APP_PR = 16
  public static Short ZW_PRIORITY_ROUTE_ZW_LWR = 1
  public static Short ZW_PRIORITY_ROUTE_ZW_NLWR = 2
  public void setRepeater1(Short)
  public void setRepeater2(Short)
  public void setRepeater3(Short)
  public void setRepeater4(Short)
  public void setRouteNodeId(Short)
  public void setRouteType(Short)
  public void setSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRepeater1()
  public Short getRepeater2()
  public Short getRepeater3()
  public Short getRepeater4()
  public Short getRouteNodeId()
  public Short getRouteType()
  public static Short SPEED_100 = 3
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public Short getSpeed()
  public static Short ZW_PRIORITY_ROUTE_APP_PR = 16
  public static Short ZW_PRIORITY_ROUTE_ZW_LWR = 1
  public static Short ZW_PRIORITY_ROUTE_ZW_NLWR = 2
  public void setRepeater1(Short)
  public void setRepeater2(Short)
  public void setRepeater3(Short)
  public void setRepeater4(Short)
  public void setRouteNodeId(Short)
  public void setRouteType(Short)
  public void setSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRepeater1()
  public Short getRepeater2()
  public Short getRepeater3()
  public Short getRepeater4()
  public Short getRouteNodeId()
  public static Short SPEED_100 = 3
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public Short getSpeed()
  public void setRepeater1(Short)
  public void setRepeater2(Short)
  public void setRepeater3(Short)
  public void setRepeater4(Short)
  public void setRouteNodeId(Short)
  public void setSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRepeater1()
  public Short getRepeater2()
  public Short getRepeater3()
  public Short getRepeater4()
  public Short getRouteNodeId()
  public static Short SPEED_100 = 3
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public Short getSpeed()
  public void setRepeater1(Short)
  public void setRepeater2(Short)
  public void setRepeater3(Short)
  public void setRepeater4(Short)
  public void setRouteNodeId(Short)
  public void setSpeed(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsClear:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsClear:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRouteNodeId()
  public void setRouteNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRouteNodeId()
  public void setRouteNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport:
Methods:[
  public static void __$swapInit()
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Map getNeighbors()
  public Short getPacketErrorCount()
  public List getPayload()
  public Short getRouteChanges()
  public Short getRouteNodeId()
  public static Short SPEED_100 = 4
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public static Short STATISTIC_TYPE_NB = 2
  public static Short STATISTIC_TYPE_PEC = 3
  public static Short STATISTIC_TYPE_RC = 0
  public static Short STATISTIC_TYPE_TC = 1
  public static Short STATISTIC_TYPE_TS = 4
  public static Short STATISTIC_TYPE_TS2 = 5
  public Long getSumOfTransmissionTimes()
  public Long getSumOfTransmissionTimesSquared()
  public Short getTransmissionCount()
  public void setNeighbors(Map)
  public void setPacketErrorCount(Short)
  public void setRouteChanges(Short)
  public void setRouteNodeId(Short)
  public void setSumOfTransmissionTimes(Long)
  public void setSumOfTransmissionTimesSquared(Long)
  public void setTransmissionCount(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport:
Methods:[
  public static void __$swapInit()
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Map getNeighbors()
  public Short getPacketErrorCount()
  public List getPayload()
  public Short getRouteChanges()
  public Short getRouteNodeId()
  public static Short SPEED_100 = 4
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public static Short STATISTIC_TYPE_NB = 2
  public static Short STATISTIC_TYPE_PEC = 3
  public static Short STATISTIC_TYPE_RC = 0
  public static Short STATISTIC_TYPE_TC = 1
  public static Short STATISTIC_TYPE_TS = 4
  public static Short STATISTIC_TYPE_TS2 = 5
  public Long getSumOfTransmissionTimes()
  public Long getSumOfTransmissionTimesSquared()
  public Short getTransmissionCount()
  public void setNeighbors(Map)
  public void setPacketErrorCount(Short)
  public void setRouteChanges(Short)
  public void setRouteNodeId(Short)
  public void setSumOfTransmissionTimes(Long)
  public void setSumOfTransmissionTimesSquared(Long)
  public void setTransmissionCount(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.PriorityRouteGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet.getPayload()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet.getRouteNodeId()
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet.setRouteNodeId(Short)
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.PriorityRouteGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet.getPayload()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet.getRouteNodeId()
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet.setRouteNodeId(Short)
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteGet.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.PriorityRouteReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getPayload()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRepeater1()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRepeater2()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRepeater3()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRepeater4()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRouteNodeId()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRouteType()
  public static Short SPEED_100 = 3
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getSpeed()
  public static Short ZW_PRIORITY_ROUTE_APP_PR = 16
  public static Short ZW_PRIORITY_ROUTE_ZW_LWR = 1
  public static Short ZW_PRIORITY_ROUTE_ZW_NLWR = 2
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRepeater1(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRepeater2(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRepeater3(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRepeater4(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRouteNodeId(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRouteType(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setSpeed(Short)
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.PriorityRouteReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getPayload()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRepeater1()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRepeater2()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRepeater3()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRepeater4()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRouteNodeId()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getRouteType()
  public static Short SPEED_100 = 3
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.getSpeed()
  public static Short ZW_PRIORITY_ROUTE_APP_PR = 16
  public static Short ZW_PRIORITY_ROUTE_ZW_LWR = 1
  public static Short ZW_PRIORITY_ROUTE_ZW_NLWR = 2
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRepeater1(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRepeater2(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRepeater3(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRepeater4(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRouteNodeId(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setRouteType(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.setSpeed(Short)
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteReport.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.PriorityRouteSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getPayload()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getRepeater1()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getRepeater2()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getRepeater3()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getRepeater4()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getRouteNodeId()
  public static Short SPEED_100 = 3
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getSpeed()
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setRepeater1(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setRepeater2(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setRepeater3(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setRepeater4(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setRouteNodeId(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setSpeed(Short)
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.PriorityRouteSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getPayload()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getRepeater1()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getRepeater2()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getRepeater3()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getRepeater4()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getRouteNodeId()
  public static Short SPEED_100 = 3
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.getSpeed()
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setRepeater1(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setRepeater2(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setRepeater3(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setRepeater4(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setRouteNodeId(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.setSpeed(Short)
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.PriorityRouteSet.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.RssiGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.RssiGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.RssiReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChannel1()
  public Short getChannel2()
  public Short getChannel3()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short RSSI_BELOW_SENSITIVITY = 125
  public static Short RSSI_MAX_POWER_SATURATED = 126
  public static Short RSSI_NOT_AVAILABLE = 127
  public void setChannel1(Short)
  public void setChannel2(Short)
  public void setChannel3(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.RssiReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getChannel1()
  public Short getChannel2()
  public Short getChannel3()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short RSSI_BELOW_SENSITIVITY = 125
  public static Short RSSI_MAX_POWER_SATURATED = 126
  public static Short RSSI_NOT_AVAILABLE = 127
  public void setChannel1(Short)
  public void setChannel2(Short)
  public void setChannel3(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.StatisticsClear:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsClear.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsClear.getPayload()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsClear.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.StatisticsClear:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsClear.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsClear.getPayload()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsClear.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.StatisticsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet.getPayload()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet.getRouteNodeId()
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet.setRouteNodeId(Short)
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.StatisticsGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet.getPayload()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet.getRouteNodeId()
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet.setRouteNodeId(Short)
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsGet.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.StatisticsReport:
Methods:[
  public static void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.__$swapInit()
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Map hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getNeighbors()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getPacketErrorCount()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getPayload()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getRouteChanges()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getRouteNodeId()
  public static Short SPEED_100 = 4
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public static Short STATISTIC_TYPE_NB = 2
  public static Short STATISTIC_TYPE_PEC = 3
  public static Short STATISTIC_TYPE_RC = 0
  public static Short STATISTIC_TYPE_TC = 1
  public static Short STATISTIC_TYPE_TS = 4
  public static Short STATISTIC_TYPE_TS2 = 5
  public Long hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getSumOfTransmissionTimes()
  public Long hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getSumOfTransmissionTimesSquared()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getTransmissionCount()
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setNeighbors(Map)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setPacketErrorCount(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setRouteChanges(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setRouteNodeId(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setSumOfTransmissionTimes(Long)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setSumOfTransmissionTimesSquared(Long)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setTransmissionCount(Short)
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.super$2$getPayload()
]
class hubitat.zwave.commands.networkmanagementinstallationmaintenancev2.StatisticsReport:
Methods:[
  public static void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.__$swapInit()
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Map hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getNeighbors()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getPacketErrorCount()
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getPayload()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getRouteChanges()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getRouteNodeId()
  public static Short SPEED_100 = 4
  public static Short SPEED_40 = 2
  public static Short SPEED_9 = 1
  public static Short STATISTIC_TYPE_NB = 2
  public static Short STATISTIC_TYPE_PEC = 3
  public static Short STATISTIC_TYPE_RC = 0
  public static Short STATISTIC_TYPE_TC = 1
  public static Short STATISTIC_TYPE_TS = 4
  public static Short STATISTIC_TYPE_TS2 = 5
  public Long hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getSumOfTransmissionTimes()
  public Long hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getSumOfTransmissionTimesSquared()
  public Short hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.getTransmissionCount()
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setNeighbors(Map)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setPacketErrorCount(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setRouteChanges(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setRouteNodeId(Short)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setSumOfTransmissionTimes(Long)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setSumOfTransmissionTimesSquared(Long)
  public void hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.setTransmissionCount(Short)
  public List hubitat.zwave.commands.networkmanagementinstallationmaintenancev1.StatisticsReport.super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeLocationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeLocationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeLocationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNodeLocation()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setNodeLocation(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeLocationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNodeLocation()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setNodeLocation(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeLocationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNodeLocation()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setNodeLocation(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeLocationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNodeLocation()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setNodeLocation(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeNameGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeNameGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeNameReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNodeName()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setNodeName(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeNameReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNodeName()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setNodeName(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeNameSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNodeName()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setNodeName(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.nodenamingv1.NodeNamingNodeNameSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNodeName()
  public List getPayload()
  public void setCharPresentation(Short)
  public void setNodeName(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short getNotificationType()
  public List getPayload()
  public void setNotificationType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short getNotificationType()
  public List getPayload()
  public void setNotificationType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNotificationType()
  public List getPayload()
  public Map getSupportedEvents()
  public void setNotificationType(Short)
  public void setSupportedEvents(Map)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNotificationType()
  public List getPayload()
  public Map getSupportedEvents()
  public void setNotificationType(Short)
  public void setSupportedEvents(Map)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short getNotificationType()
  public List getPayload()
  public Short getV1AlarmType()
  public void setEvent(Short)
  public void setNotificationType(Short)
  public void setV1AlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short getNotificationType()
  public List getPayload()
  public Short getV1AlarmType()
  public void setEvent(Short)
  public void setNotificationType(Short)
  public void setV1AlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEvent()
  public List getEventParameter()
  public Short getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short getNotificationStatus()
  public Short getNotificationType()
  public List getPayload()
  public Short getReserved()
  public Boolean getSequence()
  public Short getV1AlarmLevel()
  public Short getV1AlarmType()
  public void setEvent(Short)
  public void setEventParameter(List)
  public void setEventParametersLength(Short)
  public void setNotificationStatus(Short)
  public void setNotificationType(Short)
  public void setReserved(Short)
  public void setSequence(Boolean)
  public void setV1AlarmLevel(Short)
  public void setV1AlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEvent()
  public List getEventParameter()
  public Short getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short getNotificationStatus()
  public Short getNotificationType()
  public List getPayload()
  public Short getReserved()
  public Boolean getSequence()
  public Short getV1AlarmLevel()
  public Short getV1AlarmType()
  public void setEvent(Short)
  public void setEventParameter(List)
  public void setEventParametersLength(Short)
  public void setNotificationStatus(Short)
  public void setNotificationType(Short)
  public void setReserved(Short)
  public void setSequence(Boolean)
  public void setV1AlarmLevel(Short)
  public void setV1AlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short getNotificationStatus()
  public Short getNotificationType()
  public List getPayload()
  public void setNotificationStatus(Short)
  public void setNotificationType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short getNotificationStatus()
  public Short getNotificationType()
  public List getPayload()
  public void setNotificationStatus(Short)
  public void setNotificationType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getBurglar()
  public String getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getFirst()
  public Boolean getHeat()
  public List getPayload()
  public Boolean getPowerManagement()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getWater()
  public void setAccessControl(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setFirst(Boolean)
  public void setHeat(Boolean)
  public void setPowerManagement(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setWater(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv3.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getBurglar()
  public String getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getFirst()
  public Boolean getHeat()
  public List getPayload()
  public Boolean getPowerManagement()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getWater()
  public void setAccessControl(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setFirst(Boolean)
  public void setHeat(Boolean)
  public void setPowerManagement(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setWater(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.EventSupportedGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.getPayload()
  public void hubitat.zwave.commands.notificationv3.EventSupportedGet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.EventSupportedGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.getPayload()
  public void hubitat.zwave.commands.notificationv3.EventSupportedGet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.EventSupportedReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.getPayload()
  public Map hubitat.zwave.commands.notificationv3.EventSupportedReport.getSupportedEvents()
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setSupportedEvents(Map)
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.EventSupportedReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.getPayload()
  public Map hubitat.zwave.commands.notificationv3.EventSupportedReport.getSupportedEvents()
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setSupportedEvents(Map)
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationGet.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationGet.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEvent()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getEventParameter()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getReserved()
  public Boolean hubitat.zwave.commands.notificationv3.NotificationReport.getSequence()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmLevel()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParameter(List)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParametersLength(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setReserved(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setSequence(Boolean)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmLevel(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEvent()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getEventParameter()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getReserved()
  public Boolean hubitat.zwave.commands.notificationv3.NotificationReport.getSequence()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmLevel()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParameter(List)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParametersLength(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setReserved(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setSequence(Boolean)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmLevel(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationSet.getPayload()
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationSet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationSet.getPayload()
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationSet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getPayload()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getPayload()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv4.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getAppliance()
  public Boolean getBurglar()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedReport.getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getFirst()
  public Boolean getHeat()
  public Boolean getHomeHealth()
  public List getPayload()
  public Boolean getPowerManagement()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getWater()
  public void setAccessControl(Boolean)
  public void setAppliance(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setFirst(Boolean)
  public void setHeat(Boolean)
  public void setHomeHealth(Boolean)
  public void setPowerManagement(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setWater(Boolean)
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedReport.super$2$getPayload()
  public Boolean super$3$getAccessControl()
  public Boolean super$3$getBurglar()
  public Boolean super$3$getClock()
  public Boolean super$3$getCo()
  public Boolean super$3$getCo2()
  public Boolean super$3$getEmergency()
  public Boolean super$3$getFirst()
  public Boolean super$3$getHeat()
  public List super$3$getPayload()
  public Boolean super$3$getPowerManagement()
  public Boolean super$3$getSmoke()
  public Boolean super$3$getSystem()
  public Boolean super$3$getWater()
  public void super$3$setAccessControl(Boolean)
  public void super$3$setBurglar(Boolean)
  public void super$3$setClock(Boolean)
  public void super$3$setCo(Boolean)
  public void super$3$setCo2(Boolean)
  public void super$3$setEmergency(Boolean)
  public void super$3$setFirst(Boolean)
  public void super$3$setHeat(Boolean)
  public void super$3$setPowerManagement(Boolean)
  public void super$3$setSmoke(Boolean)
  public void super$3$setSystem(Boolean)
  public void super$3$setWater(Boolean)
]
class hubitat.zwave.commands.notificationv4.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getAppliance()
  public Boolean getBurglar()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedReport.getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getFirst()
  public Boolean getHeat()
  public Boolean getHomeHealth()
  public List getPayload()
  public Boolean getPowerManagement()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getWater()
  public void setAccessControl(Boolean)
  public void setAppliance(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setFirst(Boolean)
  public void setHeat(Boolean)
  public void setHomeHealth(Boolean)
  public void setPowerManagement(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setWater(Boolean)
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedReport.super$2$getPayload()
  public Boolean super$3$getAccessControl()
  public Boolean super$3$getBurglar()
  public Boolean super$3$getClock()
  public Boolean super$3$getCo()
  public Boolean super$3$getCo2()
  public Boolean super$3$getEmergency()
  public Boolean super$3$getFirst()
  public Boolean super$3$getHeat()
  public List super$3$getPayload()
  public Boolean super$3$getPowerManagement()
  public Boolean super$3$getSmoke()
  public Boolean super$3$getSystem()
  public Boolean super$3$getWater()
  public void super$3$setAccessControl(Boolean)
  public void super$3$setBurglar(Boolean)
  public void super$3$setClock(Boolean)
  public void super$3$setCo(Boolean)
  public void super$3$setCo2(Boolean)
  public void super$3$setEmergency(Boolean)
  public void super$3$setFirst(Boolean)
  public void super$3$setHeat(Boolean)
  public void super$3$setPowerManagement(Boolean)
  public void super$3$setSmoke(Boolean)
  public void super$3$setSystem(Boolean)
  public void super$3$setWater(Boolean)
]
class hubitat.zwave.commands.notificationv5.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.EventSupportedGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.getPayload()
  public void hubitat.zwave.commands.notificationv3.EventSupportedGet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.EventSupportedGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.getPayload()
  public void hubitat.zwave.commands.notificationv3.EventSupportedGet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.EventSupportedReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.getPayload()
  public Map hubitat.zwave.commands.notificationv3.EventSupportedReport.getSupportedEvents()
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setSupportedEvents(Map)
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.EventSupportedReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.getPayload()
  public Map hubitat.zwave.commands.notificationv3.EventSupportedReport.getSupportedEvents()
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setSupportedEvents(Map)
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationGet.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationGet.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEvent()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getEventParameter()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getReserved()
  public Boolean hubitat.zwave.commands.notificationv3.NotificationReport.getSequence()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmLevel()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParameter(List)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParametersLength(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setReserved(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setSequence(Boolean)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmLevel(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEvent()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getEventParameter()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getReserved()
  public Boolean hubitat.zwave.commands.notificationv3.NotificationReport.getSequence()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmLevel()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParameter(List)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParametersLength(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setReserved(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setSequence(Boolean)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmLevel(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationSet.getPayload()
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationSet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationSet.getPayload()
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationSet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getPayload()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getPayload()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv5.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getAppliance()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getBurglar()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedReport.getCMD()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getClock()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getCo()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getEmergency()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getFirst()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getHeat()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getHomeHealth()
  public List hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getSmoke()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getSystem()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getWater()
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setAppliance(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setClock(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setCo(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setHomeHealth(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setWater(Boolean)
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getClock()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo2()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getFirst()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getHeat()
  public List hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSystem()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getWater()
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setWater(Boolean)
]
class hubitat.zwave.commands.notificationv5.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getAppliance()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getBurglar()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedReport.getCMD()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getClock()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getCo()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getEmergency()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getFirst()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getHeat()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getHomeHealth()
  public List hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getSmoke()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getSystem()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.getWater()
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setAppliance(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setClock(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setCo(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setHomeHealth(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.setWater(Boolean)
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getClock()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo2()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getFirst()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getHeat()
  public List hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSystem()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getWater()
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setWater(Boolean)
]
class hubitat.zwave.commands.notificationv6.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.EventSupportedGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.getPayload()
  public void hubitat.zwave.commands.notificationv3.EventSupportedGet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.EventSupportedGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.getPayload()
  public void hubitat.zwave.commands.notificationv3.EventSupportedGet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.EventSupportedReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.getPayload()
  public Map hubitat.zwave.commands.notificationv3.EventSupportedReport.getSupportedEvents()
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setSupportedEvents(Map)
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.EventSupportedReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.getPayload()
  public Map hubitat.zwave.commands.notificationv3.EventSupportedReport.getSupportedEvents()
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setSupportedEvents(Map)
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationGet.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationGet.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEvent()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getEventParameter()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getReserved()
  public Boolean hubitat.zwave.commands.notificationv3.NotificationReport.getSequence()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmLevel()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParameter(List)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParametersLength(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setReserved(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setSequence(Boolean)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmLevel(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEvent()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getEventParameter()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getReserved()
  public Boolean hubitat.zwave.commands.notificationv3.NotificationReport.getSequence()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmLevel()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParameter(List)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParametersLength(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setReserved(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setSequence(Boolean)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmLevel(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationSet.getPayload()
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationSet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationSet.getPayload()
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationSet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getPayload()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getPayload()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv6.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getAppliance()
  public Boolean getBurglar()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedReport.getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getFirst()
  public Boolean getHeat()
  public Boolean getHomeHealth()
  public List getPayload()
  public Boolean getPowerManagement()
  public Boolean getSiren()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getWater()
  public void setAccessControl(Boolean)
  public void setAppliance(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setFirst(Boolean)
  public void setHeat(Boolean)
  public void setHomeHealth(Boolean)
  public void setPowerManagement(Boolean)
  public void setSiren(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setWater(Boolean)
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getClock()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo2()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getFirst()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getHeat()
  public List hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSystem()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getWater()
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setWater(Boolean)
  public Boolean super$4$getAccessControl()
  public Boolean super$4$getAppliance()
  public Boolean super$4$getBurglar()
  public Boolean super$4$getClock()
  public Boolean super$4$getCo()
  public Boolean super$4$getCo2()
  public Boolean super$4$getEmergency()
  public Boolean super$4$getFirst()
  public Boolean super$4$getHeat()
  public Boolean super$4$getHomeHealth()
  public List super$4$getPayload()
  public Boolean super$4$getPowerManagement()
  public Boolean super$4$getSmoke()
  public Boolean super$4$getSystem()
  public Boolean super$4$getWater()
  public void super$4$setAccessControl(Boolean)
  public void super$4$setAppliance(Boolean)
  public void super$4$setBurglar(Boolean)
  public void super$4$setClock(Boolean)
  public void super$4$setCo(Boolean)
  public void super$4$setCo2(Boolean)
  public void super$4$setEmergency(Boolean)
  public void super$4$setFirst(Boolean)
  public void super$4$setHeat(Boolean)
  public void super$4$setHomeHealth(Boolean)
  public void super$4$setPowerManagement(Boolean)
  public void super$4$setSmoke(Boolean)
  public void super$4$setSystem(Boolean)
  public void super$4$setWater(Boolean)
]
class hubitat.zwave.commands.notificationv6.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getAppliance()
  public Boolean getBurglar()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedReport.getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getFirst()
  public Boolean getHeat()
  public Boolean getHomeHealth()
  public List getPayload()
  public Boolean getPowerManagement()
  public Boolean getSiren()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getWater()
  public void setAccessControl(Boolean)
  public void setAppliance(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setFirst(Boolean)
  public void setHeat(Boolean)
  public void setHomeHealth(Boolean)
  public void setPowerManagement(Boolean)
  public void setSiren(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setWater(Boolean)
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getClock()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo2()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getFirst()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getHeat()
  public List hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSystem()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getWater()
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setWater(Boolean)
  public Boolean super$4$getAccessControl()
  public Boolean super$4$getAppliance()
  public Boolean super$4$getBurglar()
  public Boolean super$4$getClock()
  public Boolean super$4$getCo()
  public Boolean super$4$getCo2()
  public Boolean super$4$getEmergency()
  public Boolean super$4$getFirst()
  public Boolean super$4$getHeat()
  public Boolean super$4$getHomeHealth()
  public List super$4$getPayload()
  public Boolean super$4$getPowerManagement()
  public Boolean super$4$getSmoke()
  public Boolean super$4$getSystem()
  public Boolean super$4$getWater()
  public void super$4$setAccessControl(Boolean)
  public void super$4$setAppliance(Boolean)
  public void super$4$setBurglar(Boolean)
  public void super$4$setClock(Boolean)
  public void super$4$setCo(Boolean)
  public void super$4$setCo2(Boolean)
  public void super$4$setEmergency(Boolean)
  public void super$4$setFirst(Boolean)
  public void super$4$setHeat(Boolean)
  public void super$4$setHomeHealth(Boolean)
  public void super$4$setPowerManagement(Boolean)
  public void super$4$setSmoke(Boolean)
  public void super$4$setSystem(Boolean)
  public void super$4$setWater(Boolean)
]
class hubitat.zwave.commands.notificationv7.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.EventSupportedGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.getPayload()
  public void hubitat.zwave.commands.notificationv3.EventSupportedGet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.EventSupportedGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.getPayload()
  public void hubitat.zwave.commands.notificationv3.EventSupportedGet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.EventSupportedReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.getPayload()
  public Map hubitat.zwave.commands.notificationv3.EventSupportedReport.getSupportedEvents()
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setSupportedEvents(Map)
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.EventSupportedReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.getPayload()
  public Map hubitat.zwave.commands.notificationv3.EventSupportedReport.getSupportedEvents()
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setSupportedEvents(Map)
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationGet.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationGet.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEvent()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getEventParameter()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getReserved()
  public Boolean hubitat.zwave.commands.notificationv3.NotificationReport.getSequence()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmLevel()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParameter(List)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParametersLength(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setReserved(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setSequence(Boolean)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmLevel(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEvent()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getEventParameter()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getReserved()
  public Boolean hubitat.zwave.commands.notificationv3.NotificationReport.getSequence()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmLevel()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParameter(List)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParametersLength(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setReserved(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setSequence(Boolean)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmLevel(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationSet.getPayload()
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationSet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationSet.getPayload()
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationSet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getPayload()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getPayload()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv7.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getAppliance()
  public Boolean getBurglar()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedReport.getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getFirst()
  public Boolean getGasAlarm()
  public Boolean getHeat()
  public Boolean getHomeHealth()
  public Boolean getIrrigation()
  public List getPayload()
  public Boolean getPowerManagement()
  public Boolean getSiren()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getWater()
  public Boolean getWaterValve()
  public Boolean getWeatherAlarm()
  public void setAccessControl(Boolean)
  public void setAppliance(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setFirst(Boolean)
  public void setGasAlarm(Boolean)
  public void setHeat(Boolean)
  public void setHomeHealth(Boolean)
  public void setIrrigation(Boolean)
  public void setPowerManagement(Boolean)
  public void setSiren(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setWater(Boolean)
  public void setWaterValve(Boolean)
  public void setWeatherAlarm(Boolean)
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getClock()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo2()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getFirst()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getHeat()
  public List hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSystem()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getWater()
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setWater(Boolean)
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getAppliance()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getClock()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getCo()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getCo2()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getFirst()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getHeat()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getHomeHealth()
  public List hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getSystem()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getWater()
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setAppliance(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setHomeHealth(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setWater(Boolean)
  public Boolean super$6$getAccessControl()
  public Boolean super$6$getAppliance()
  public Boolean super$6$getBurglar()
  public Boolean super$6$getClock()
  public Boolean super$6$getCo()
  public Boolean super$6$getCo2()
  public Boolean super$6$getEmergency()
  public Boolean super$6$getFirst()
  public Boolean super$6$getHeat()
  public Boolean super$6$getHomeHealth()
  public List super$6$getPayload()
  public Boolean super$6$getPowerManagement()
  public Boolean super$6$getSiren()
  public Boolean super$6$getSmoke()
  public Boolean super$6$getSystem()
  public Boolean super$6$getWater()
  public void super$6$setAccessControl(Boolean)
  public void super$6$setAppliance(Boolean)
  public void super$6$setBurglar(Boolean)
  public void super$6$setClock(Boolean)
  public void super$6$setCo(Boolean)
  public void super$6$setCo2(Boolean)
  public void super$6$setEmergency(Boolean)
  public void super$6$setFirst(Boolean)
  public void super$6$setHeat(Boolean)
  public void super$6$setHomeHealth(Boolean)
  public void super$6$setPowerManagement(Boolean)
  public void super$6$setSiren(Boolean)
  public void super$6$setSmoke(Boolean)
  public void super$6$setSystem(Boolean)
  public void super$6$setWater(Boolean)
]
class hubitat.zwave.commands.notificationv7.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getAppliance()
  public Boolean getBurglar()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedReport.getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getFirst()
  public Boolean getGasAlarm()
  public Boolean getHeat()
  public Boolean getHomeHealth()
  public Boolean getIrrigation()
  public List getPayload()
  public Boolean getPowerManagement()
  public Boolean getSiren()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getWater()
  public Boolean getWaterValve()
  public Boolean getWeatherAlarm()
  public void setAccessControl(Boolean)
  public void setAppliance(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setFirst(Boolean)
  public void setGasAlarm(Boolean)
  public void setHeat(Boolean)
  public void setHomeHealth(Boolean)
  public void setIrrigation(Boolean)
  public void setPowerManagement(Boolean)
  public void setSiren(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setWater(Boolean)
  public void setWaterValve(Boolean)
  public void setWeatherAlarm(Boolean)
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getClock()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo2()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getFirst()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getHeat()
  public List hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSystem()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getWater()
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setWater(Boolean)
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getAppliance()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getClock()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getCo()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getCo2()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getFirst()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getHeat()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getHomeHealth()
  public List hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getSystem()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getWater()
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setAppliance(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setHomeHealth(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setWater(Boolean)
  public Boolean super$6$getAccessControl()
  public Boolean super$6$getAppliance()
  public Boolean super$6$getBurglar()
  public Boolean super$6$getClock()
  public Boolean super$6$getCo()
  public Boolean super$6$getCo2()
  public Boolean super$6$getEmergency()
  public Boolean super$6$getFirst()
  public Boolean super$6$getHeat()
  public Boolean super$6$getHomeHealth()
  public List super$6$getPayload()
  public Boolean super$6$getPowerManagement()
  public Boolean super$6$getSiren()
  public Boolean super$6$getSmoke()
  public Boolean super$6$getSystem()
  public Boolean super$6$getWater()
  public void super$6$setAccessControl(Boolean)
  public void super$6$setAppliance(Boolean)
  public void super$6$setBurglar(Boolean)
  public void super$6$setClock(Boolean)
  public void super$6$setCo(Boolean)
  public void super$6$setCo2(Boolean)
  public void super$6$setEmergency(Boolean)
  public void super$6$setFirst(Boolean)
  public void super$6$setHeat(Boolean)
  public void super$6$setHomeHealth(Boolean)
  public void super$6$setPowerManagement(Boolean)
  public void super$6$setSiren(Boolean)
  public void super$6$setSmoke(Boolean)
  public void super$6$setSystem(Boolean)
  public void super$6$setWater(Boolean)
]
class hubitat.zwave.commands.notificationv8.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_HOME_MONITORING = 22
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_LIGHT_SENSOR = 20
  public static Short NOTIFICATION_TYPE_PEST_CONTROL = 19
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_QUALITY_MONITORING = 21
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.EventSupportedGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.getPayload()
  public void hubitat.zwave.commands.notificationv3.EventSupportedGet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.EventSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_HOME_MONITORING = 22
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_LIGHT_SENSOR = 20
  public static Short NOTIFICATION_TYPE_PEST_CONTROL = 19
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_QUALITY_MONITORING = 21
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.EventSupportedGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.getPayload()
  public void hubitat.zwave.commands.notificationv3.EventSupportedGet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.EventSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.EventSupportedReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.getPayload()
  public Map hubitat.zwave.commands.notificationv3.EventSupportedReport.getSupportedEvents()
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setSupportedEvents(Map)
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.EventSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.EventSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.EventSupportedReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.getPayload()
  public Map hubitat.zwave.commands.notificationv3.EventSupportedReport.getSupportedEvents()
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.EventSupportedReport.setSupportedEvents(Map)
  public List hubitat.zwave.commands.notificationv3.EventSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_HOME_MONITORING = 22
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_LIGHT_SENSOR = 20
  public static Short NOTIFICATION_TYPE_PEST_CONTROL = 19
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_QUALITY_MONITORING = 21
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationGet.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.NotificationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getEvent()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_HOME_MONITORING = 22
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_LIGHT_SENSOR = 20
  public static Short NOTIFICATION_TYPE_PEST_CONTROL = 19
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_QUALITY_MONITORING = 21
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationGet.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationGet.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationGet.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEvent()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getEventParameter()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_HOME_MONITORING = 22
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_LIGHT_SENSOR = 20
  public static Short NOTIFICATION_TYPE_PEST_CONTROL = 19
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_QUALITY_MONITORING = 21
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getReserved()
  public Boolean hubitat.zwave.commands.notificationv3.NotificationReport.getSequence()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmLevel()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParameter(List)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParametersLength(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setReserved(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setSequence(Boolean)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmLevel(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.NotificationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEvent()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getEventParameter()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getEventParametersLength()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_HOME_MONITORING = 22
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_LIGHT_SENSOR = 20
  public static Short NOTIFICATION_TYPE_PEST_CONTROL = 19
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_QUALITY_MONITORING = 21
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationReport.getPayload()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getReserved()
  public Boolean hubitat.zwave.commands.notificationv3.NotificationReport.getSequence()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmLevel()
  public Short hubitat.zwave.commands.notificationv3.NotificationReport.getV1AlarmType()
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEvent(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParameter(List)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setEventParametersLength(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setNotificationType(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setReserved(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setSequence(Boolean)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmLevel(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationReport.setV1AlarmType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationReport.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_HOME_MONITORING = 22
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_LIGHT_SENSOR = 20
  public static Short NOTIFICATION_TYPE_PEST_CONTROL = 19
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_QUALITY_MONITORING = 21
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationSet.getPayload()
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationSet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.NotificationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short NOTIFICATION_TYPE_ACCESS_CONTROL = 6
  public static Short NOTIFICATION_TYPE_APPLIANCE = 12
  public static Short NOTIFICATION_TYPE_BURGLAR = 7
  public static Short NOTIFICATION_TYPE_CLOCK = 11
  public static Short NOTIFICATION_TYPE_CO = 2
  public static Short NOTIFICATION_TYPE_CO2 = 3
  public static Short NOTIFICATION_TYPE_EMERGENCY = 10
  public static Short NOTIFICATION_TYPE_FIRST = 255
  public static Short NOTIFICATION_TYPE_GAS_ALARM = 18
  public static Short NOTIFICATION_TYPE_HEAT = 4
  public static Short NOTIFICATION_TYPE_HOME_HEALTH = 13
  public static Short NOTIFICATION_TYPE_HOME_MONITORING = 22
  public static Short NOTIFICATION_TYPE_IRRIGATION = 17
  public static Short NOTIFICATION_TYPE_LIGHT_SENSOR = 20
  public static Short NOTIFICATION_TYPE_PEST_CONTROL = 19
  public static Short NOTIFICATION_TYPE_POWER_MANAGEMENT = 8
  public static Short NOTIFICATION_TYPE_RESERVED0 = 0
  public static Short NOTIFICATION_TYPE_SIREN = 14
  public static Short NOTIFICATION_TYPE_SMOKE = 1
  public static Short NOTIFICATION_TYPE_SYSTEM = 9
  public static Short NOTIFICATION_TYPE_WATER = 5
  public static Short NOTIFICATION_TYPE_WATER_QUALITY_MONITORING = 21
  public static Short NOTIFICATION_TYPE_WATER_VALVE = 15
  public static Short NOTIFICATION_TYPE_WEATHER_ALARM = 16
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationStatus()
  public Short hubitat.zwave.commands.notificationv3.NotificationSet.getNotificationType()
  public List hubitat.zwave.commands.notificationv3.NotificationSet.getPayload()
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationStatus(Short)
  public void hubitat.zwave.commands.notificationv3.NotificationSet.setNotificationType(Short)
  public List hubitat.zwave.commands.notificationv3.NotificationSet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getPayload()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.NotificationSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.getPayload()
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.notificationv8.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getAppliance()
  public Boolean getBurglar()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedReport.getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getFirst()
  public Boolean getGasAlarm()
  public Boolean getHeat()
  public Boolean getHomeHealth()
  public Boolean getHomeMonitoring()
  public Boolean getIrrigation()
  public Boolean getLightSensor()
  public List getPayload()
  public Boolean getPestControl()
  public Boolean getPowerManagement()
  public Boolean getSiren()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getWater()
  public Boolean getWaterQuality()
  public Boolean getWaterValve()
  public Boolean getWeatherAlarm()
  public void setAccessControl(Boolean)
  public void setAppliance(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setFirst(Boolean)
  public void setGasAlarm(Boolean)
  public void setHeat(Boolean)
  public void setHomeHealth(Boolean)
  public void setHomeMonitoring(Boolean)
  public void setIrrigation(Boolean)
  public void setLightSensor(Boolean)
  public void setPestControl(Boolean)
  public void setPowerManagement(Boolean)
  public void setSiren(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setWater(Boolean)
  public void setWaterQuality(Boolean)
  public void setWaterValve(Boolean)
  public void setWeatherAlarm(Boolean)
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getClock()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo2()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getFirst()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getHeat()
  public List hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSystem()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getWater()
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setWater(Boolean)
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getAppliance()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getClock()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getCo()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getCo2()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getFirst()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getHeat()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getHomeHealth()
  public List hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getSystem()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getWater()
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setAppliance(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setHomeHealth(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setWater(Boolean)
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getAppliance()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getClock()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getCo()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getCo2()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getFirst()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getHeat()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getHomeHealth()
  public List hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getPayload()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getSiren()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getSystem()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getWater()
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setAppliance(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setHomeHealth(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setSiren(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setWater(Boolean)
  public Boolean super$7$getAccessControl()
  public Boolean super$7$getAppliance()
  public Boolean super$7$getBurglar()
  public Boolean super$7$getClock()
  public Boolean super$7$getCo()
  public Boolean super$7$getCo2()
  public Boolean super$7$getEmergency()
  public Boolean super$7$getFirst()
  public Boolean super$7$getGasAlarm()
  public Boolean super$7$getHeat()
  public Boolean super$7$getHomeHealth()
  public Boolean super$7$getIrrigation()
  public List super$7$getPayload()
  public Boolean super$7$getPowerManagement()
  public Boolean super$7$getSiren()
  public Boolean super$7$getSmoke()
  public Boolean super$7$getSystem()
  public Boolean super$7$getWater()
  public Boolean super$7$getWaterValve()
  public Boolean super$7$getWeatherAlarm()
  public void super$7$setAccessControl(Boolean)
  public void super$7$setAppliance(Boolean)
  public void super$7$setBurglar(Boolean)
  public void super$7$setClock(Boolean)
  public void super$7$setCo(Boolean)
  public void super$7$setCo2(Boolean)
  public void super$7$setEmergency(Boolean)
  public void super$7$setFirst(Boolean)
  public void super$7$setGasAlarm(Boolean)
  public void super$7$setHeat(Boolean)
  public void super$7$setHomeHealth(Boolean)
  public void super$7$setIrrigation(Boolean)
  public void super$7$setPowerManagement(Boolean)
  public void super$7$setSiren(Boolean)
  public void super$7$setSmoke(Boolean)
  public void super$7$setSystem(Boolean)
  public void super$7$setWater(Boolean)
  public void super$7$setWaterValve(Boolean)
  public void super$7$setWeatherAlarm(Boolean)
]
class hubitat.zwave.commands.notificationv8.NotificationSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccessControl()
  public Boolean getAppliance()
  public Boolean getBurglar()
  public String hubitat.zwave.commands.notificationv3.NotificationSupportedReport.getCMD()
  public Boolean getClock()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEmergency()
  public Boolean getFirst()
  public Boolean getGasAlarm()
  public Boolean getHeat()
  public Boolean getHomeHealth()
  public Boolean getHomeMonitoring()
  public Boolean getIrrigation()
  public Boolean getLightSensor()
  public List getPayload()
  public Boolean getPestControl()
  public Boolean getPowerManagement()
  public Boolean getSiren()
  public Boolean getSmoke()
  public Boolean getSystem()
  public Boolean getWater()
  public Boolean getWaterQuality()
  public Boolean getWaterValve()
  public Boolean getWeatherAlarm()
  public void setAccessControl(Boolean)
  public void setAppliance(Boolean)
  public void setBurglar(Boolean)
  public void setClock(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setEmergency(Boolean)
  public void setFirst(Boolean)
  public void setGasAlarm(Boolean)
  public void setHeat(Boolean)
  public void setHomeHealth(Boolean)
  public void setHomeMonitoring(Boolean)
  public void setIrrigation(Boolean)
  public void setLightSensor(Boolean)
  public void setPestControl(Boolean)
  public void setPowerManagement(Boolean)
  public void setSiren(Boolean)
  public void setSmoke(Boolean)
  public void setSystem(Boolean)
  public void setWater(Boolean)
  public void setWaterQuality(Boolean)
  public void setWaterValve(Boolean)
  public void setWeatherAlarm(Boolean)
  public List hubitat.zwave.commands.notificationv3.NotificationSupportedReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getClock()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getCo2()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getFirst()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getHeat()
  public List hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getSystem()
  public Boolean hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$getWater()
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv4.NotificationSupportedReport.super$3$setWater(Boolean)
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getAppliance()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getClock()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getCo()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getCo2()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getFirst()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getHeat()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getHomeHealth()
  public List hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getSystem()
  public Boolean hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$getWater()
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setAppliance(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setHomeHealth(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv6.NotificationSupportedReport.super$4$setWater(Boolean)
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getAccessControl()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getAppliance()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getBurglar()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getClock()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getCo()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getCo2()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getEmergency()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getFirst()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getHeat()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getHomeHealth()
  public List hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getPayload()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getPowerManagement()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getSiren()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getSmoke()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getSystem()
  public Boolean hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$getWater()
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setAccessControl(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setAppliance(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setBurglar(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setClock(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setCo(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setCo2(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setEmergency(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setFirst(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setHeat(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setHomeHealth(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setPowerManagement(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setSiren(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setSmoke(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setSystem(Boolean)
  public void hubitat.zwave.commands.notificationv7.NotificationSupportedReport.super$6$setWater(Boolean)
  public Boolean super$7$getAccessControl()
  public Boolean super$7$getAppliance()
  public Boolean super$7$getBurglar()
  public Boolean super$7$getClock()
  public Boolean super$7$getCo()
  public Boolean super$7$getCo2()
  public Boolean super$7$getEmergency()
  public Boolean super$7$getFirst()
  public Boolean super$7$getGasAlarm()
  public Boolean super$7$getHeat()
  public Boolean super$7$getHomeHealth()
  public Boolean super$7$getIrrigation()
  public List super$7$getPayload()
  public Boolean super$7$getPowerManagement()
  public Boolean super$7$getSiren()
  public Boolean super$7$getSmoke()
  public Boolean super$7$getSystem()
  public Boolean super$7$getWater()
  public Boolean super$7$getWaterValve()
  public Boolean super$7$getWeatherAlarm()
  public void super$7$setAccessControl(Boolean)
  public void super$7$setAppliance(Boolean)
  public void super$7$setBurglar(Boolean)
  public void super$7$setClock(Boolean)
  public void super$7$setCo(Boolean)
  public void super$7$setCo2(Boolean)
  public void super$7$setEmergency(Boolean)
  public void super$7$setFirst(Boolean)
  public void super$7$setGasAlarm(Boolean)
  public void super$7$setHeat(Boolean)
  public void super$7$setHomeHealth(Boolean)
  public void super$7$setIrrigation(Boolean)
  public void super$7$setPowerManagement(Boolean)
  public void super$7$setSiren(Boolean)
  public void super$7$setSmoke(Boolean)
  public void super$7$setSystem(Boolean)
  public void super$7$setWater(Boolean)
  public void super$7$setWaterValve(Boolean)
  public void super$7$setWeatherAlarm(Boolean)
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short POWER_LEVEL_MINUS1DBM = 1
  public static Short POWER_LEVEL_MINUS2DBM = 2
  public static Short POWER_LEVEL_MINUS3DBM = 3
  public static Short POWER_LEVEL_MINUS4DBM = 4
  public static Short POWER_LEVEL_MINUS5DBM = 5
  public static Short POWER_LEVEL_MINUS6DBM = 6
  public static Short POWER_LEVEL_MINUS7DBM = 7
  public static Short POWER_LEVEL_MINUS8DBM = 8
  public static Short POWER_LEVEL_MINUS9DBM = 9
  public static Short POWER_LEVEL_NORMALPOWER = 0
  public List getPayload()
  public Short getPowerLevel()
  public Short getTimeout()
  public void setPowerLevel(Short)
  public void setTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short POWER_LEVEL_MINUS1DBM = 1
  public static Short POWER_LEVEL_MINUS2DBM = 2
  public static Short POWER_LEVEL_MINUS3DBM = 3
  public static Short POWER_LEVEL_MINUS4DBM = 4
  public static Short POWER_LEVEL_MINUS5DBM = 5
  public static Short POWER_LEVEL_MINUS6DBM = 6
  public static Short POWER_LEVEL_MINUS7DBM = 7
  public static Short POWER_LEVEL_MINUS8DBM = 8
  public static Short POWER_LEVEL_MINUS9DBM = 9
  public static Short POWER_LEVEL_NORMALPOWER = 0
  public List getPayload()
  public Short getPowerLevel()
  public Short getTimeout()
  public void setPowerLevel(Short)
  public void setTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short POWER_LEVEL_MINUS1DBM = 1
  public static Short POWER_LEVEL_MINUS2DBM = 2
  public static Short POWER_LEVEL_MINUS3DBM = 3
  public static Short POWER_LEVEL_MINUS4DBM = 4
  public static Short POWER_LEVEL_MINUS5DBM = 5
  public static Short POWER_LEVEL_MINUS6DBM = 6
  public static Short POWER_LEVEL_MINUS7DBM = 7
  public static Short POWER_LEVEL_MINUS8DBM = 8
  public static Short POWER_LEVEL_MINUS9DBM = 9
  public static Short POWER_LEVEL_NORMALPOWER = 0
  public List getPayload()
  public Short getPowerLevel()
  public Short getTimeout()
  public void setPowerLevel(Short)
  public void setTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short POWER_LEVEL_MINUS1DBM = 1
  public static Short POWER_LEVEL_MINUS2DBM = 2
  public static Short POWER_LEVEL_MINUS3DBM = 3
  public static Short POWER_LEVEL_MINUS4DBM = 4
  public static Short POWER_LEVEL_MINUS5DBM = 5
  public static Short POWER_LEVEL_MINUS6DBM = 6
  public static Short POWER_LEVEL_MINUS7DBM = 7
  public static Short POWER_LEVEL_MINUS8DBM = 8
  public static Short POWER_LEVEL_MINUS9DBM = 9
  public static Short POWER_LEVEL_NORMALPOWER = 0
  public List getPayload()
  public Short getPowerLevel()
  public Short getTimeout()
  public void setPowerLevel(Short)
  public void setTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelTestNodeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelTestNodeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelTestNodeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_OF_OPERATION_ZW_TEST_FAILED = 0
  public static Short STATUS_OF_OPERATION_ZW_TEST_INPROGRESS = 2
  public static Short STATUS_OF_OPERATION_ZW_TEST_SUCCES = 1
  public Short getStatusOfOperation()
  public Integer getTestFrameCount()
  public Short getTestNodeid()
  public void setStatusOfOperation(Short)
  public void setTestFrameCount(Integer)
  public void setTestNodeid(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelTestNodeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_OF_OPERATION_ZW_TEST_FAILED = 0
  public static Short STATUS_OF_OPERATION_ZW_TEST_INPROGRESS = 2
  public static Short STATUS_OF_OPERATION_ZW_TEST_SUCCES = 1
  public Short getStatusOfOperation()
  public Integer getTestFrameCount()
  public Short getTestNodeid()
  public void setStatusOfOperation(Short)
  public void setTestFrameCount(Integer)
  public void setTestNodeid(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelTestNodeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short POWER_LEVEL_MINUS1DBM = 1
  public static Short POWER_LEVEL_MINUS2DBM = 2
  public static Short POWER_LEVEL_MINUS3DBM = 3
  public static Short POWER_LEVEL_MINUS4DBM = 4
  public static Short POWER_LEVEL_MINUS5DBM = 5
  public static Short POWER_LEVEL_MINUS6DBM = 6
  public static Short POWER_LEVEL_MINUS7DBM = 7
  public static Short POWER_LEVEL_MINUS8DBM = 8
  public static Short POWER_LEVEL_MINUS9DBM = 9
  public static Short POWER_LEVEL_NORMALPOWER = 0
  public List getPayload()
  public Short getPowerLevel()
  public Integer getTestFrameCount()
  public Short getTestNodeid()
  public void setPowerLevel(Short)
  public void setTestFrameCount(Integer)
  public void setTestNodeid(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.powerlevelv1.PowerlevelTestNodeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short POWER_LEVEL_MINUS1DBM = 1
  public static Short POWER_LEVEL_MINUS2DBM = 2
  public static Short POWER_LEVEL_MINUS3DBM = 3
  public static Short POWER_LEVEL_MINUS4DBM = 4
  public static Short POWER_LEVEL_MINUS5DBM = 5
  public static Short POWER_LEVEL_MINUS6DBM = 6
  public static Short POWER_LEVEL_MINUS7DBM = 7
  public static Short POWER_LEVEL_MINUS8DBM = 8
  public static Short POWER_LEVEL_MINUS9DBM = 9
  public static Short POWER_LEVEL_NORMALPOWER = 0
  public List getPayload()
  public Short getPowerLevel()
  public Integer getTestFrameCount()
  public Short getTestNodeid()
  public void setPowerLevel(Short)
  public void setTestFrameCount(Integer)
  public void setTestNodeid(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.prepaymentencapsulationv1.CmdEncapsulation:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public List getPayload()
  public void setData(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.prepaymentencapsulationv1.CmdEncapsulation:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public List getPayload()
  public void setData(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.prepaymentv1.PrepaymentBalanceGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public static Short BALANCE_TYPE_MONETARY = 1
  public static Short BALANCE_TYPE_UTILITY = 0
  public Short getBalanceType()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBalanceType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.prepaymentv1.PrepaymentBalanceGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public static Short BALANCE_TYPE_MONETARY = 1
  public static Short BALANCE_TYPE_UTILITY = 0
  public Short getBalanceType()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setBalanceType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.prepaymentv1.PrepaymentBalanceReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBalancePrecision()
  public Short getBalanceType()
  public Integer getBalanceValue()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCurrency()
  public Integer getDebt()
  public Short getDebtPrecision()
  public Short getDebtRecoveryPercentage()
  public Integer getEmerCredit()
  public Short getEmerCreditPrecision()
  public Short getMeterType()
  public List getPayload()
  public Short getScale()
  public void setBalancePrecision(Short)
  public void setBalanceType(Short)
  public void setBalanceValue(Integer)
  public void setCurrency(Integer)
  public void setDebt(Integer)
  public void setDebtPrecision(Short)
  public void setDebtRecoveryPercentage(Short)
  public void setEmerCredit(Integer)
  public void setEmerCreditPrecision(Short)
  public void setMeterType(Short)
  public void setScale(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.prepaymentv1.PrepaymentBalanceReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getBalancePrecision()
  public Short getBalanceType()
  public Integer getBalanceValue()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCurrency()
  public Integer getDebt()
  public Short getDebtPrecision()
  public Short getDebtRecoveryPercentage()
  public Integer getEmerCredit()
  public Short getEmerCreditPrecision()
  public Short getMeterType()
  public List getPayload()
  public Short getScale()
  public void setBalancePrecision(Short)
  public void setBalanceType(Short)
  public void setBalanceValue(Integer)
  public void setCurrency(Integer)
  public void setDebt(Integer)
  public void setDebtPrecision(Short)
  public void setDebtRecoveryPercentage(Short)
  public void setEmerCredit(Integer)
  public void setEmerCreditPrecision(Short)
  public void setMeterType(Short)
  public void setScale(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.prepaymentv1.PrepaymentSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.prepaymentv1.PrepaymentSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.prepaymentv1.PrepaymentSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTypesSupported()
  public void setTypesSupported(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.prepaymentv1.PrepaymentSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTypesSupported()
  public void setTypesSupported(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.proprietaryv1.ProprietaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public List getPayload()
  public void setData(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.proprietaryv1.ProprietaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public List getPayload()
  public void setData(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.proprietaryv1.ProprietaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public List getPayload()
  public void setData(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.proprietaryv1.ProprietaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public List getPayload()
  public void setData(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.proprietaryv1.ProprietarySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public List getPayload()
  public void setData(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.proprietaryv1.ProprietarySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getData()
  public List getPayload()
  public void setData(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv1.ProtectionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv1.ProtectionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv1.ProtectionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short PROTECTION_STATE_NO_OPERATION_POSSIBLE = 2
  public static Short PROTECTION_STATE_PROTECTION_BY_SEQUENCE = 1
  public static Short PROTECTION_STATE_UNPROTECTED = 0
  public List getPayload()
  public Short getProtectionState()
  public void setProtectionState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv1.ProtectionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short PROTECTION_STATE_NO_OPERATION_POSSIBLE = 2
  public static Short PROTECTION_STATE_PROTECTION_BY_SEQUENCE = 1
  public static Short PROTECTION_STATE_UNPROTECTED = 0
  public List getPayload()
  public Short getProtectionState()
  public void setProtectionState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv1.ProtectionSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short PROTECTION_STATE_NO_OPERATION_POSSIBLE = 2
  public static Short PROTECTION_STATE_PROTECTION_BY_SEQUENCE = 1
  public static Short PROTECTION_STATE_UNPROTECTED = 0
  public List getPayload()
  public Short getProtectionState()
  public void setProtectionState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv1.ProtectionSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short PROTECTION_STATE_NO_OPERATION_POSSIBLE = 2
  public static Short PROTECTION_STATE_PROTECTION_BY_SEQUENCE = 1
  public static Short PROTECTION_STATE_UNPROTECTED = 0
  public List getPayload()
  public Short getProtectionState()
  public void setProtectionState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionEcGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionEcGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionEcReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeId()
  public List getPayload()
  public void setNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionEcReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeId()
  public List getPayload()
  public void setNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionEcSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeId()
  public List getPayload()
  public void setNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionEcSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeId()
  public List getPayload()
  public void setNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.protectionv1.ProtectionGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.protectionv1.ProtectionGet.getPayload()
  public List hubitat.zwave.commands.protectionv1.ProtectionGet.super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.protectionv1.ProtectionGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.protectionv1.ProtectionGet.getPayload()
  public List hubitat.zwave.commands.protectionv1.ProtectionGet.super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLocalProtectionState()
  public static Short PROTECTION_STATE_NO_OPERATION_POSSIBLE = 2
  public static Short PROTECTION_STATE_PROTECTION_BY_SEQUENCE = 1
  public static Short PROTECTION_STATE_UNPROTECTED = 0
  public List getPayload()
  public Short hubitat.zwave.commands.protectionv1.ProtectionReport.getProtectionState()
  public Short getRfProtectionState()
  public void setLocalProtectionState(Short)
  public void hubitat.zwave.commands.protectionv1.ProtectionReport.setProtectionState(Short)
  public void setRfProtectionState(Short)
  public List hubitat.zwave.commands.protectionv1.ProtectionReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLocalProtectionState()
  public static Short PROTECTION_STATE_NO_OPERATION_POSSIBLE = 2
  public static Short PROTECTION_STATE_PROTECTION_BY_SEQUENCE = 1
  public static Short PROTECTION_STATE_UNPROTECTED = 0
  public List getPayload()
  public Short hubitat.zwave.commands.protectionv1.ProtectionReport.getProtectionState()
  public Short getRfProtectionState()
  public void setLocalProtectionState(Short)
  public void hubitat.zwave.commands.protectionv1.ProtectionReport.setProtectionState(Short)
  public void setRfProtectionState(Short)
  public List hubitat.zwave.commands.protectionv1.ProtectionReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLocalProtectionState()
  public static Short PROTECTION_STATE_NO_OPERATION_POSSIBLE = 2
  public static Short PROTECTION_STATE_PROTECTION_BY_SEQUENCE = 1
  public static Short PROTECTION_STATE_UNPROTECTED = 0
  public List getPayload()
  public Short hubitat.zwave.commands.protectionv1.ProtectionSet.getProtectionState()
  public Short getRfProtectionState()
  public void setLocalProtectionState(Short)
  public void hubitat.zwave.commands.protectionv1.ProtectionSet.setProtectionState(Short)
  public void setRfProtectionState(Short)
  public List hubitat.zwave.commands.protectionv1.ProtectionSet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLocalProtectionState()
  public static Short PROTECTION_STATE_NO_OPERATION_POSSIBLE = 2
  public static Short PROTECTION_STATE_PROTECTION_BY_SEQUENCE = 1
  public static Short PROTECTION_STATE_UNPROTECTED = 0
  public List getPayload()
  public Short hubitat.zwave.commands.protectionv1.ProtectionSet.getProtectionState()
  public Short getRfProtectionState()
  public void setLocalProtectionState(Short)
  public void hubitat.zwave.commands.protectionv1.ProtectionSet.setProtectionState(Short)
  public void setRfProtectionState(Short)
  public List hubitat.zwave.commands.protectionv1.ProtectionSet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getExclusiveControl()
  public Integer getLocalProtectionState()
  public List getPayload()
  public Integer getRfProtectionState()
  public Boolean getTimeout()
  public void setExclusiveControl(Boolean)
  public void setLocalProtectionState(Integer)
  public void setRfProtectionState(Integer)
  public void setTimeout(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getExclusiveControl()
  public Integer getLocalProtectionState()
  public List getPayload()
  public Integer getRfProtectionState()
  public Boolean getTimeout()
  public void setExclusiveControl(Boolean)
  public void setLocalProtectionState(Integer)
  public void setRfProtectionState(Integer)
  public void setTimeout(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionTimeoutGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionTimeoutGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionTimeoutReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTimeout()
  public void setTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionTimeoutReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTimeout()
  public void setTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionTimeoutSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTimeout()
  public void setTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.protectionv2.ProtectionTimeoutSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getTimeout()
  public void setTimeout(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblconfigv1.RateTblRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List getRateParameterSetId()
  public Short getRateParameterSetIds()
  public void setRateParameterSetId(List)
  public void setRateParameterSetIds(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblconfigv1.RateTblRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List getRateParameterSetId()
  public Short getRateParameterSetIds()
  public void setRateParameterSetId(List)
  public void setRateParameterSetIds(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblconfigv1.RateTblSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getConsumptionPrecision()
  public Short getConsumptionScale()
  public Short getDcpRateId()
  public Integer getDurationMinute()
  public Integer getMaxConsumptionValue()
  public Short getMaxDemandPrecision()
  public Short getMaxDemandScale()
  public Integer getMaxDemandValue()
  public Integer getMinConsumptionValue()
  public Short getNumberOfRateChar()
  public List getPayload()
  public List getRateCharacter()
  public Short getRateParameterSetId()
  public Short getRateType()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public void setConsumptionPrecision(Short)
  public void setConsumptionScale(Short)
  public void setDcpRateId(Short)
  public void setDurationMinute(Integer)
  public void setMaxConsumptionValue(Integer)
  public void setMaxDemandPrecision(Short)
  public void setMaxDemandScale(Short)
  public void setMaxDemandValue(Integer)
  public void setMinConsumptionValue(Integer)
  public void setNumberOfRateChar(Short)
  public void setRateCharacter(List)
  public void setRateParameterSetId(Short)
  public void setRateType(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblconfigv1.RateTblSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getConsumptionPrecision()
  public Short getConsumptionScale()
  public Short getDcpRateId()
  public Integer getDurationMinute()
  public Integer getMaxConsumptionValue()
  public Short getMaxDemandPrecision()
  public Short getMaxDemandScale()
  public Integer getMaxDemandValue()
  public Integer getMinConsumptionValue()
  public Short getNumberOfRateChar()
  public List getPayload()
  public List getRateCharacter()
  public Short getRateParameterSetId()
  public Short getRateType()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public void setConsumptionPrecision(Short)
  public void setConsumptionScale(Short)
  public void setDcpRateId(Short)
  public void setDurationMinute(Integer)
  public void setMaxConsumptionValue(Integer)
  public void setMaxDemandPrecision(Short)
  public void setMaxDemandScale(Short)
  public void setMaxDemandValue(Integer)
  public void setMinConsumptionValue(Integer)
  public void setNumberOfRateChar(Short)
  public void setRateCharacter(List)
  public void setRateParameterSetId(Short)
  public void setRateType(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblActiveRateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblActiveRateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblActiveRateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public void setRateParameterSetId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblActiveRateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public void setRateParameterSetId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblCurrentDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDatasetRequested()
  public List getPayload()
  public Short getRateParameterSetId()
  public void setDatasetRequested(Integer)
  public void setRateParameterSetId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblCurrentDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDatasetRequested()
  public List getPayload()
  public Short getRateParameterSetId()
  public void setDatasetRequested(Integer)
  public void setRateParameterSetId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblCurrentDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setRateParameterSetId(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblCurrentDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setRateParameterSetId(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public void setRateParameterSetId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public void setRateParameterSetId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblHistoricalDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDatasetRequested()
  public Short getMaximumReports()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Short getStopSecondLocalTime()
  public Integer getStopYear()
  public void setDatasetRequested(Integer)
  public void setMaximumReports(Short)
  public void setRateParameterSetId(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopSecondLocalTime(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblHistoricalDataGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDatasetRequested()
  public Short getMaximumReports()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Short getStartSecondLocalTime()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Short getStopSecondLocalTime()
  public Integer getStopYear()
  public void setDatasetRequested(Integer)
  public void setMaximumReports(Short)
  public void setRateParameterSetId(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartSecondLocalTime(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopSecondLocalTime(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblHistoricalDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setRateParameterSetId(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblHistoricalDataReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDataset()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getReportsToFollow()
  public Short getSecondLocalTime()
  public Integer getYear()
  public void setDataset(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setRateParameterSetId(Short)
  public void setReportsToFollow(Short)
  public void setSecondLocalTime(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getConsumptionPrecision()
  public Short getConsumptionScale()
  public Short getDcpRateId()
  public Integer getDurationMinute()
  public Integer getMaxConsumptionValue()
  public Short getMaxDemandPrecision()
  public Short getMaxDemandScale()
  public Integer getMaxDemandValue()
  public Integer getMinConsumptionValue()
  public Short getNumberOfRateChar()
  public List getPayload()
  public List getRateCharacter()
  public Short getRateParameterSetId()
  public Short getRateType()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public void setConsumptionPrecision(Short)
  public void setConsumptionScale(Short)
  public void setDcpRateId(Short)
  public void setDurationMinute(Integer)
  public void setMaxConsumptionValue(Integer)
  public void setMaxDemandPrecision(Short)
  public void setMaxDemandScale(Short)
  public void setMaxDemandValue(Integer)
  public void setMinConsumptionValue(Integer)
  public void setNumberOfRateChar(Short)
  public void setRateCharacter(List)
  public void setRateParameterSetId(Short)
  public void setRateType(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getConsumptionPrecision()
  public Short getConsumptionScale()
  public Short getDcpRateId()
  public Integer getDurationMinute()
  public Integer getMaxConsumptionValue()
  public Short getMaxDemandPrecision()
  public Short getMaxDemandScale()
  public Integer getMaxDemandValue()
  public Integer getMinConsumptionValue()
  public Short getNumberOfRateChar()
  public List getPayload()
  public List getRateCharacter()
  public Short getRateParameterSetId()
  public Short getRateType()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public void setConsumptionPrecision(Short)
  public void setConsumptionScale(Short)
  public void setDcpRateId(Short)
  public void setDurationMinute(Integer)
  public void setMaxConsumptionValue(Integer)
  public void setMaxDemandPrecision(Short)
  public void setMaxDemandScale(Short)
  public void setMaxDemandValue(Integer)
  public void setMinConsumptionValue(Integer)
  public void setNumberOfRateChar(Short)
  public void setRateCharacter(List)
  public void setRateParameterSetId(Short)
  public void setRateType(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getParameterSetSupportedBitMask()
  public List getPayload()
  public Short getRatesSupported()
  public void setParameterSetSupportedBitMask(Integer)
  public void setRatesSupported(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.ratetblmonitorv1.RateTblSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getParameterSetSupportedBitMask()
  public List getPayload()
  public Short getRatesSupported()
  public void setParameterSetSupportedBitMask(Integer)
  public void setRatesSupported(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.remoteassociationactivatev1.RemoteAssociationActivate:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.remoteassociationactivatev1.RemoteAssociationActivate:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupingIdentifier()
  public List getPayload()
  public void setGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.remoteassociationv1.RemoteAssociationConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLocalGroupingIdentifier()
  public List getPayload()
  public void setLocalGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.remoteassociationv1.RemoteAssociationConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLocalGroupingIdentifier()
  public List getPayload()
  public void setLocalGroupingIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.remoteassociationv1.RemoteAssociationConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLocalGroupingIdentifier()
  public List getPayload()
  public Short getRemoteGroupingIdentifier()
  public Short getRemoteNodeid()
  public void setLocalGroupingIdentifier(Short)
  public void setRemoteGroupingIdentifier(Short)
  public void setRemoteNodeid(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.remoteassociationv1.RemoteAssociationConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLocalGroupingIdentifier()
  public List getPayload()
  public Short getRemoteGroupingIdentifier()
  public Short getRemoteNodeid()
  public void setLocalGroupingIdentifier(Short)
  public void setRemoteGroupingIdentifier(Short)
  public void setRemoteNodeid(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.remoteassociationv1.RemoteAssociationConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLocalGroupingIdentifier()
  public List getPayload()
  public Short getRemoteGroupingIdentifier()
  public Short getRemoteNodeid()
  public void setLocalGroupingIdentifier(Short)
  public void setRemoteGroupingIdentifier(Short)
  public void setRemoteNodeid(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.remoteassociationv1.RemoteAssociationConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getLocalGroupingIdentifier()
  public List getPayload()
  public Short getRemoteGroupingIdentifier()
  public Short getRemoteNodeid()
  public void setLocalGroupingIdentifier(Short)
  public void setRemoteGroupingIdentifier(Short)
  public void setRemoteNodeid(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sceneactivationv1.SceneActivationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public List getPayload()
  public Short getSceneId()
  public void setDimmingDuration(Short)
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sceneactivationv1.SceneActivationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public List getPayload()
  public Short getSceneId()
  public void setDimmingDuration(Short)
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sceneactuatorconfv1.SceneActuatorConfGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSceneId()
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sceneactuatorconfv1.SceneActuatorConfGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSceneId()
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sceneactuatorconfv1.SceneActuatorConfReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Short getLevel()
  public List getPayload()
  public Short getSceneId()
  public void setDimmingDuration(Short)
  public void setLevel(Short)
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sceneactuatorconfv1.SceneActuatorConfReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Short getLevel()
  public List getPayload()
  public Short getSceneId()
  public void setDimmingDuration(Short)
  public void setLevel(Short)
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sceneactuatorconfv1.SceneActuatorConfSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Short getLevel()
  public Boolean getOverride()
  public List getPayload()
  public Short getSceneId()
  public void setDimmingDuration(Short)
  public void setLevel(Short)
  public void setOverride(Boolean)
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sceneactuatorconfv1.SceneActuatorConfSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Short getLevel()
  public Boolean getOverride()
  public List getPayload()
  public Short getSceneId()
  public void setDimmingDuration(Short)
  public void setLevel(Short)
  public void setOverride(Boolean)
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scenecontrollerconfv1.SceneControllerConfGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupId()
  public List getPayload()
  public void setGroupId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scenecontrollerconfv1.SceneControllerConfGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGroupId()
  public List getPayload()
  public void setGroupId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scenecontrollerconfv1.SceneControllerConfReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Short getGroupId()
  public List getPayload()
  public Short getSceneId()
  public void setDimmingDuration(Short)
  public void setGroupId(Short)
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scenecontrollerconfv1.SceneControllerConfReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Short getGroupId()
  public List getPayload()
  public Short getSceneId()
  public void setDimmingDuration(Short)
  public void setGroupId(Short)
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scenecontrollerconfv1.SceneControllerConfSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Short getGroupId()
  public List getPayload()
  public Short getSceneId()
  public void setDimmingDuration(Short)
  public void setGroupId(Short)
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scenecontrollerconfv1.SceneControllerConfSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Short getGroupId()
  public List getPayload()
  public Short getSceneId()
  public void setDimmingDuration(Short)
  public void setGroupId(Short)
  public void setSceneId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEnabled()
  public List getPayload()
  public void setEnabled(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEnabled()
  public List getPayload()
  public void setEnabled(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEnabled()
  public List getPayload()
  public Short getUserIdentifier()
  public void setEnabled(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEnabled()
  public List getPayload()
  public Short getUserIdentifier()
  public void setEnabled(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getUserIdentifier()
  public void setScheduleSlotId(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getUserIdentifier()
  public void setScheduleSlotId(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDayOfWeek()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStopHour()
  public Short getStopMinute()
  public Short getUserIdentifier()
  public void setDayOfWeek(Short)
  public void setScheduleSlotId(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStopHour(Short)
  public void setStopMinute(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDayOfWeek()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStopHour()
  public Short getStopMinute()
  public Short getUserIdentifier()
  public void setDayOfWeek(Short)
  public void setScheduleSlotId(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStopHour(Short)
  public void setStopMinute(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDayOfWeek()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getSetAction()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStopHour()
  public Short getStopMinute()
  public Short getUserIdentifier()
  public void setDayOfWeek(Short)
  public void setScheduleSlotId(Short)
  public void setSetAction(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStopHour(Short)
  public void setStopMinute(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDayOfWeek()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getSetAction()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStopHour()
  public Short getStopMinute()
  public Short getUserIdentifier()
  public void setDayOfWeek(Short)
  public void setScheduleSlotId(Short)
  public void setSetAction(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStopHour(Short)
  public void setStopMinute(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getUserIdentifier()
  public void setScheduleSlotId(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getUserIdentifier()
  public void setScheduleSlotId(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getStartDay()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStartMonth()
  public Short getStartYear()
  public Short getStopDay()
  public Short getStopHour()
  public Short getStopMinute()
  public Short getStopMonth()
  public Short getStopYear()
  public Short getUserIdentifier()
  public void setScheduleSlotId(Short)
  public void setStartDay(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStartMonth(Short)
  public void setStartYear(Short)
  public void setStopDay(Short)
  public void setStopHour(Short)
  public void setStopMinute(Short)
  public void setStopMonth(Short)
  public void setStopYear(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getStartDay()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStartMonth()
  public Short getStartYear()
  public Short getStopDay()
  public Short getStopHour()
  public Short getStopMinute()
  public Short getStopMonth()
  public Short getStopYear()
  public Short getUserIdentifier()
  public void setScheduleSlotId(Short)
  public void setStartDay(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStartMonth(Short)
  public void setStartYear(Short)
  public void setStopDay(Short)
  public void setStopHour(Short)
  public void setStopMinute(Short)
  public void setStopMonth(Short)
  public void setStopYear(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getSetAction()
  public Short getStartDay()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStartMonth()
  public Short getStartYear()
  public Short getStopDay()
  public Short getStopHour()
  public Short getStopMinute()
  public Short getStopMonth()
  public Short getStopYear()
  public Short getUserIdentifier()
  public void setScheduleSlotId(Short)
  public void setSetAction(Short)
  public void setStartDay(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStartMonth(Short)
  public void setStartYear(Short)
  public void setStopDay(Short)
  public void setStopHour(Short)
  public void setStopMinute(Short)
  public void setStopMonth(Short)
  public void setStopYear(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getSetAction()
  public Short getStartDay()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStartMonth()
  public Short getStartYear()
  public Short getStopDay()
  public Short getStopHour()
  public Short getStopMinute()
  public Short getStopMonth()
  public Short getStopYear()
  public Short getUserIdentifier()
  public void setScheduleSlotId(Short)
  public void setSetAction(Short)
  public void setStartDay(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStartMonth(Short)
  public void setStartYear(Short)
  public void setStopDay(Short)
  public void setStopHour(Short)
  public void setStopMinute(Short)
  public void setStopMonth(Short)
  public void setStopYear(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfSlotsWeekDay()
  public Short getNumberOfSlotsYearDay()
  public List getPayload()
  public void setNumberOfSlotsWeekDay(Short)
  public void setNumberOfSlotsYearDay(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfSlotsWeekDay()
  public Short getNumberOfSlotsYearDay()
  public List getPayload()
  public void setNumberOfSlotsWeekDay(Short)
  public void setNumberOfSlotsYearDay(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockEnableAllSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getEnabled()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getPayload()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.setEnabled(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockEnableAllSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getEnabled()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getPayload()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.setEnabled(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockEnableSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getEnabled()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.setEnabled(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockEnableSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getEnabled()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.setEnabled(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHourTzo()
  public Short getMinuteOffsetDst()
  public Short getMinuteTzo()
  public List getPayload()
  public Short getSignOffsetDst()
  public Short getSignTzo()
  public void setHourTzo(Short)
  public void setMinuteOffsetDst(Short)
  public void setMinuteTzo(Short)
  public void setSignOffsetDst(Short)
  public void setSignTzo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHourTzo()
  public Short getMinuteOffsetDst()
  public Short getMinuteTzo()
  public List getPayload()
  public Short getSignOffsetDst()
  public Short getSignTzo()
  public void setHourTzo(Short)
  public void setMinuteOffsetDst(Short)
  public void setMinuteTzo(Short)
  public void setSignOffsetDst(Short)
  public void setSignTzo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHourTzo()
  public Short getMinuteOffsetDst()
  public Short getMinuteTzo()
  public List getPayload()
  public Short getSignOffsetDst()
  public Short getSignTzo()
  public void setHourTzo(Short)
  public void setMinuteOffsetDst(Short)
  public void setMinuteTzo(Short)
  public void setSignOffsetDst(Short)
  public void setSignTzo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHourTzo()
  public Short getMinuteOffsetDst()
  public Short getMinuteTzo()
  public List getPayload()
  public Short getSignOffsetDst()
  public Short getSignTzo()
  public void setHourTzo(Short)
  public void setMinuteOffsetDst(Short)
  public void setMinuteTzo(Short)
  public void setSignOffsetDst(Short)
  public void setSignTzo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockWeekDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockWeekDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockWeekDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getDayOfWeek()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setDayOfWeek(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockWeekDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getDayOfWeek()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setDayOfWeek(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockWeekDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getDayOfWeek()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getSetAction()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setDayOfWeek(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setSetAction(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockWeekDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getDayOfWeek()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getSetAction()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setDayOfWeek(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setSetAction(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockYearDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockYearDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockYearDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockYearDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockYearDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getSetAction()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setSetAction(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockYearDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getSetAction()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setSetAction(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryTypeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.getPayload()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryTypeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.getPayload()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryTypeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.getNumberOfSlotsWeekDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.getNumberOfSlotsYearDay()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.getPayload()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.setNumberOfSlotsWeekDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.setNumberOfSlotsYearDay(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryTypeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.getNumberOfSlotsWeekDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.getNumberOfSlotsYearDay()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.getPayload()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.setNumberOfSlotsWeekDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.setNumberOfSlotsYearDay(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockDailyRepeatingGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getUserIdentifier()
  public void setScheduleSlotId(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockDailyRepeatingGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getUserIdentifier()
  public void setScheduleSlotId(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockDailyRepeatingReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDurationHour()
  public Short getDurationMinute()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getUserIdentifier()
  public Short getWeekDayBitmask()
  public void setDurationHour(Short)
  public void setDurationMinute(Short)
  public void setScheduleSlotId(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setUserIdentifier(Short)
  public void setWeekDayBitmask(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockDailyRepeatingReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDurationHour()
  public Short getDurationMinute()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getUserIdentifier()
  public Short getWeekDayBitmask()
  public void setDurationHour(Short)
  public void setDurationMinute(Short)
  public void setScheduleSlotId(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setUserIdentifier(Short)
  public void setWeekDayBitmask(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockDailyRepeatingSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDurationHour()
  public Short getDurationMinute()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getSetAction()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getUserIdentifier()
  public Short getWeekDayBitmask()
  public void setDurationHour(Short)
  public void setDurationMinute(Short)
  public void setScheduleSlotId(Short)
  public void setSetAction(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setUserIdentifier(Short)
  public void setWeekDayBitmask(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockDailyRepeatingSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDurationHour()
  public Short getDurationMinute()
  public List getPayload()
  public Short getScheduleSlotId()
  public Short getSetAction()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getUserIdentifier()
  public Short getWeekDayBitmask()
  public void setDurationHour(Short)
  public void setDurationMinute(Short)
  public void setScheduleSlotId(Short)
  public void setSetAction(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setUserIdentifier(Short)
  public void setWeekDayBitmask(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockEnableAllSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getEnabled()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getPayload()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.setEnabled(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockEnableAllSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getEnabled()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.getPayload()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.setEnabled(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableAllSet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockEnableSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getEnabled()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.setEnabled(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockEnableSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getEnabled()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.setEnabled(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockEnableSet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockTimeOffsetGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetGet.getPayload()
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockTimeOffsetGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetGet.getPayload()
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockTimeOffsetReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getHourTzo()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getMinuteOffsetDst()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getMinuteTzo()
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getSignOffsetDst()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getSignTzo()
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.setHourTzo(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.setMinuteOffsetDst(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.setMinuteTzo(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.setSignOffsetDst(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.setSignTzo(Short)
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockTimeOffsetReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getHourTzo()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getMinuteOffsetDst()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getMinuteTzo()
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getSignOffsetDst()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.getSignTzo()
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.setHourTzo(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.setMinuteOffsetDst(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.setMinuteTzo(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.setSignOffsetDst(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.setSignTzo(Short)
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockTimeOffsetSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getHourTzo()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getMinuteOffsetDst()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getMinuteTzo()
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getSignOffsetDst()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getSignTzo()
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.setHourTzo(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.setMinuteOffsetDst(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.setMinuteTzo(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.setSignOffsetDst(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.setSignTzo(Short)
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockTimeOffsetSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getHourTzo()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getMinuteOffsetDst()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getMinuteTzo()
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getSignOffsetDst()
  public Short hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.getSignTzo()
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.setHourTzo(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.setMinuteOffsetDst(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.setMinuteTzo(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.setSignOffsetDst(Short)
  public void hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.setSignTzo(Short)
  public List hubitat.zwave.commands.scheduleentrylockv2.ScheduleEntryLockTimeOffsetSet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockWeekDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockWeekDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockWeekDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getDayOfWeek()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setDayOfWeek(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockWeekDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getDayOfWeek()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setDayOfWeek(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDayReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockWeekDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getDayOfWeek()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getSetAction()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setDayOfWeek(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setSetAction(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockWeekDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getDayOfWeek()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getSetAction()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setDayOfWeek(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setSetAction(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockWeekDaySet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockYearDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockYearDayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockYearDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockYearDayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStartYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getStopYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStartYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setStopYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDayReport.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockYearDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getSetAction()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setSetAction(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryLockYearDaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getPayload()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getScheduleSlotId()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getSetAction()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStartYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopDay()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopHour()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopMinute()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopMonth()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getStopYear()
  public Short hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.getUserIdentifier()
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setScheduleSlotId(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setSetAction(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStartYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopDay(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopHour(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopMinute(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopMonth(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setStopYear(Short)
  public void hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.setUserIdentifier(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryLockYearDaySet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryTypeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.getPayload()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryTypeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.getPayload()
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryTypeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfSlotsDailyRepeating()
  public Short getNumberOfSlotsWeekDay()
  public Short getNumberOfSlotsYearDay()
  public List getPayload()
  public void setNumberOfSlotsDailyRepeating(Short)
  public void setNumberOfSlotsWeekDay(Short)
  public void setNumberOfSlotsYearDay(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.super$2$getPayload()
  public String super$3$getCMD()
  public Short super$3$getNumberOfSlotsWeekDay()
  public Short super$3$getNumberOfSlotsYearDay()
  public List super$3$getPayload()
  public void super$3$setNumberOfSlotsWeekDay(Short)
  public void super$3$setNumberOfSlotsYearDay(Short)
]
class hubitat.zwave.commands.scheduleentrylockv3.ScheduleEntryTypeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfSlotsDailyRepeating()
  public Short getNumberOfSlotsWeekDay()
  public Short getNumberOfSlotsYearDay()
  public List getPayload()
  public void setNumberOfSlotsDailyRepeating(Short)
  public void setNumberOfSlotsWeekDay(Short)
  public void setNumberOfSlotsYearDay(Short)
  public List hubitat.zwave.commands.scheduleentrylockv1.ScheduleEntryTypeSupportedReport.super$2$getPayload()
  public String super$3$getCMD()
  public Short super$3$getNumberOfSlotsWeekDay()
  public Short super$3$getNumberOfSlotsYearDay()
  public List super$3$getPayload()
  public void super$3$setNumberOfSlotsWeekDay(Short)
  public void super$3$setNumberOfSlotsYearDay(Short)
]
class hubitat.zwave.commands.schedulev1.CommandScheduleGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleId()
  public void setScheduleId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.CommandScheduleGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleId()
  public void setScheduleId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.CommandScheduleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getActiveId()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDurationByte()
  public Short getDurationType()
  public Short getNumberOfCmdToFollow()
  public List getPayload()
  public Short getReportsToFollow()
  public Boolean getRes51()
  public Short getScheduleId()
  public Short getStartDayOfMonth()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStartMonth()
  public Short getStartWeekday()
  public Short getStartYear()
  public Short getUserIdentifier()
  public void setActiveId(Short)
  public void setDurationByte(Integer)
  public void setDurationType(Short)
  public void setNumberOfCmdToFollow(Short)
  public void setReportsToFollow(Short)
  public void setRes51(Boolean)
  public void setScheduleId(Short)
  public void setStartDayOfMonth(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStartMonth(Short)
  public void setStartWeekday(Short)
  public void setStartYear(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.CommandScheduleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getActiveId()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDurationByte()
  public Short getDurationType()
  public Short getNumberOfCmdToFollow()
  public List getPayload()
  public Short getReportsToFollow()
  public Boolean getRes51()
  public Short getScheduleId()
  public Short getStartDayOfMonth()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStartMonth()
  public Short getStartWeekday()
  public Short getStartYear()
  public Short getUserIdentifier()
  public void setActiveId(Short)
  public void setDurationByte(Integer)
  public void setDurationType(Short)
  public void setNumberOfCmdToFollow(Short)
  public void setReportsToFollow(Short)
  public void setRes51(Boolean)
  public void setScheduleId(Short)
  public void setStartDayOfMonth(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStartMonth(Short)
  public void setStartWeekday(Short)
  public void setStartYear(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.CommandScheduleSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDurationByte()
  public Short getDurationType()
  public Short getNumberOfCmdToFollow()
  public List getPayload()
  public Short getReportsToFollow()
  public Boolean getRes51()
  public Short getScheduleId()
  public Short getStartDayOfMonth()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStartMonth()
  public Short getStartWeekday()
  public Short getStartYear()
  public Short getUserIdentifier()
  public void setDurationByte(Integer)
  public void setDurationType(Short)
  public void setNumberOfCmdToFollow(Short)
  public void setReportsToFollow(Short)
  public void setRes51(Boolean)
  public void setScheduleId(Short)
  public void setStartDayOfMonth(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStartMonth(Short)
  public void setStartWeekday(Short)
  public void setStartYear(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.CommandScheduleSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDurationByte()
  public Short getDurationType()
  public Short getNumberOfCmdToFollow()
  public List getPayload()
  public Short getReportsToFollow()
  public Boolean getRes51()
  public Short getScheduleId()
  public Short getStartDayOfMonth()
  public Short getStartHour()
  public Short getStartMinute()
  public Short getStartMonth()
  public Short getStartWeekday()
  public Short getStartYear()
  public Short getUserIdentifier()
  public void setDurationByte(Integer)
  public void setDurationType(Short)
  public void setNumberOfCmdToFollow(Short)
  public void setReportsToFollow(Short)
  public void setRes51(Boolean)
  public void setScheduleId(Short)
  public void setStartDayOfMonth(Short)
  public void setStartHour(Short)
  public void setStartMinute(Short)
  public void setStartMonth(Short)
  public void setStartWeekday(Short)
  public void setStartYear(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleId()
  public void setScheduleId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleId()
  public void setScheduleId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getActiveId1()
  public Short getActiveId2()
  public Short getActiveId3()
  public Short getActiveIdN()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfSupportedScheduleId()
  public Boolean getOverride()
  public List getPayload()
  public Short getReportsToFollow()
  public void setActiveId1(Short)
  public void setActiveId2(Short)
  public void setActiveId3(Short)
  public void setActiveIdN(Short)
  public void setNumberOfSupportedScheduleId(Short)
  public void setOverride(Boolean)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getActiveId1()
  public Short getActiveId2()
  public Short getActiveId3()
  public Short getActiveIdN()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfSupportedScheduleId()
  public Boolean getOverride()
  public List getPayload()
  public Short getReportsToFollow()
  public void setActiveId1(Short)
  public void setActiveId2(Short)
  public void setActiveId3(Short)
  public void setActiveIdN(Short)
  public void setNumberOfSupportedScheduleId(Short)
  public void setOverride(Boolean)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleStateSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleId()
  public Short getScheduleState()
  public void setScheduleId(Short)
  public void setScheduleState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleStateSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getScheduleId()
  public Short getScheduleState()
  public void setScheduleId(Short)
  public void setScheduleState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getFallbackSupport()
  public Short getNumberOfSupportedCc()
  public Short getNumberOfSupportedScheduleId()
  public Boolean getOverrideSupport()
  public List getPayload()
  public Short getStartTimeSupport()
  public Boolean getSupportEnabledisable()
  public Short getSupportedOverrideTypes()
  public void setFallbackSupport(Boolean)
  public void setNumberOfSupportedCc(Short)
  public void setNumberOfSupportedScheduleId(Short)
  public void setOverrideSupport(Boolean)
  public void setStartTimeSupport(Short)
  public void setSupportEnabledisable(Boolean)
  public void setSupportedOverrideTypes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.schedulev1.ScheduleSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getFallbackSupport()
  public Short getNumberOfSupportedCc()
  public Short getNumberOfSupportedScheduleId()
  public Boolean getOverrideSupport()
  public List getPayload()
  public Short getStartTimeSupport()
  public Boolean getSupportEnabledisable()
  public Short getSupportedOverrideTypes()
  public void setFallbackSupport(Boolean)
  public void setNumberOfSupportedCc(Short)
  public void setNumberOfSupportedScheduleId(Short)
  public void setOverrideSupport(Boolean)
  public void setStartTimeSupport(Short)
  public void setSupportEnabledisable(Boolean)
  public void setSupportedOverrideTypes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenattributesv1.ScreenAttributesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenattributesv1.ScreenAttributesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfCharactersPerLine()
  public Short getNumberOfLines()
  public Short getNumericalPresentationOfACharacter()
  public List getPayload()
  public Short getSizeOfLineBuffer()
  public void setNumberOfCharactersPerLine(Short)
  public void setNumberOfLines(Short)
  public void setNumericalPresentationOfACharacter(Short)
  public void setSizeOfLineBuffer(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfCharactersPerLine()
  public Short getNumberOfLines()
  public Short getNumericalPresentationOfACharacter()
  public List getPayload()
  public Short getSizeOfLineBuffer()
  public void setNumberOfCharactersPerLine(Short)
  public void setNumberOfLines(Short)
  public void setNumericalPresentationOfACharacter(Short)
  public void setSizeOfLineBuffer(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenattributesv2.ScreenAttributesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenattributesv2.ScreenAttributesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenattributesv2.ScreenAttributesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEscapeSequence()
  public Short hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.getNumberOfCharactersPerLine()
  public Short hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.getNumberOfLines()
  public Short hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.getNumericalPresentationOfACharacter()
  public List getPayload()
  public Short getScreenTimeout()
  public Short hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.getSizeOfLineBuffer()
  public void setEscapeSequence(Boolean)
  public void hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.setNumberOfCharactersPerLine(Short)
  public void hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.setNumberOfLines(Short)
  public void hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.setNumericalPresentationOfACharacter(Short)
  public void setScreenTimeout(Short)
  public void hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.setSizeOfLineBuffer(Short)
  public List hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.screenattributesv2.ScreenAttributesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEscapeSequence()
  public Short hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.getNumberOfCharactersPerLine()
  public Short hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.getNumberOfLines()
  public Short hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.getNumericalPresentationOfACharacter()
  public List getPayload()
  public Short getScreenTimeout()
  public Short hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.getSizeOfLineBuffer()
  public void setEscapeSequence(Boolean)
  public void hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.setNumberOfCharactersPerLine(Short)
  public void hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.setNumberOfLines(Short)
  public void hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.setNumericalPresentationOfACharacter(Short)
  public void setScreenTimeout(Short)
  public void hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.setSizeOfLineBuffer(Short)
  public List hubitat.zwave.commands.screenattributesv1.ScreenAttributesReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.screenmdv1.ScreenMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeId()
  public Short getNumberOfReports()
  public List getPayload()
  public void setNodeId(Short)
  public void setNumberOfReports(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenmdv1.ScreenMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeId()
  public Short getNumberOfReports()
  public List getPayload()
  public void setNodeId(Short)
  public void setNumberOfReports(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenmdv1.ScreenMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMoreData()
  public List getPayload()
  public Short getScreenSettings()
  public void setCharPresentation(Short)
  public void setMoreData(Boolean)
  public void setScreenSettings(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenmdv1.ScreenMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMoreData()
  public List getPayload()
  public Short getScreenSettings()
  public void setCharPresentation(Short)
  public void setMoreData(Boolean)
  public void setScreenSettings(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenmdv2.ScreenMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeId()
  public Short getNumberOfReports()
  public List getPayload()
  public void setNodeId(Short)
  public void setNumberOfReports(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenmdv2.ScreenMdGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeId()
  public Short getNumberOfReports()
  public List getPayload()
  public void setNodeId(Short)
  public void setNumberOfReports(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenmdv2.ScreenMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMoreData()
  public List getPayload()
  public Short getScreenSettings()
  public Boolean getScreenTimeout()
  public void setCharPresentation(Short)
  public void setMoreData(Boolean)
  public void setScreenSettings(Short)
  public void setScreenTimeout(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.screenmdv2.ScreenMdReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short getCharPresentation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMoreData()
  public List getPayload()
  public Short getScreenSettings()
  public Boolean getScreenTimeout()
  public void setCharPresentation(Short)
  public void setMoreData(Boolean)
  public void setScreenSettings(Short)
  public void setScreenTimeout(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.KexFail:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getFailType()
  public static Short KEX_FAIL_AUTH = 7
  public static Short KEX_FAIL_CANCEL = 6
  public static Short KEX_FAIL_DECRYPT = 5
  public static Short KEX_FAIL_KEX_CURVES = 3
  public static Short KEX_FAIL_KEX_KEY = 1
  public static Short KEX_FAIL_KEX_SCHEME = 2
  public static Short KEX_FAIL_KEY_GET = 8
  public static Short KEX_FAIL_KEY_REPORT = 10
  public static Short KEX_FAIL_KEY_VERIFY = 9
  public List getPayload()
  public void setFailType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.KexFail:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getFailType()
  public static Short KEX_FAIL_AUTH = 7
  public static Short KEX_FAIL_CANCEL = 6
  public static Short KEX_FAIL_DECRYPT = 5
  public static Short KEX_FAIL_KEX_CURVES = 3
  public static Short KEX_FAIL_KEX_KEY = 1
  public static Short KEX_FAIL_KEX_SCHEME = 2
  public static Short KEX_FAIL_KEY_GET = 8
  public static Short KEX_FAIL_KEY_REPORT = 10
  public static Short KEX_FAIL_KEY_VERIFY = 9
  public List getPayload()
  public void setFailType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.KexGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.KexGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.KexReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEcho()
  public List getPayload()
  public Boolean getRequestCSA()
  public Short getRequestedKeys()
  public Short getSupportedProfiles()
  public Short getSupportedSchemes()
  public void setEcho(Boolean)
  public void setRequestCSA(Boolean)
  public void setRequestedKeys(Short)
  public void setSupportedProfiles(Short)
  public void setSupportedSchemes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.KexReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEcho()
  public List getPayload()
  public Boolean getRequestCSA()
  public Short getRequestedKeys()
  public Short getSupportedProfiles()
  public Short getSupportedSchemes()
  public void setEcho(Boolean)
  public void setRequestCSA(Boolean)
  public void setRequestedKeys(Short)
  public void setSupportedProfiles(Short)
  public void setSupportedSchemes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.KexSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEcho()
  public List getPayload()
  public Boolean getRequestCSA()
  public Short getRequestedKeys()
  public Short getSupportedProfiles()
  public Short getSupportedSchemes()
  public void setEcho(Boolean)
  public void setRequestCSA(Boolean)
  public void setRequestedKeys(Short)
  public void setSupportedProfiles(Short)
  public void setSupportedSchemes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.KexSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEcho()
  public List getPayload()
  public Boolean getRequestCSA()
  public Short getRequestedKeys()
  public Short getSupportedProfiles()
  public Short getSupportedSchemes()
  public void setEcho(Boolean)
  public void setRequestCSA(Boolean)
  public void setRequestedKeys(Short)
  public void setSupportedProfiles(Short)
  public void setSupportedSchemes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.PublicKeyReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getIncludingNode()
  public List getPayload()
  public List getPublicKey()
  public void setIncludingNode(Boolean)
  public void setPublicKey(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.PublicKeyReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getIncludingNode()
  public List getPayload()
  public List getPublicKey()
  public void setIncludingNode(Boolean)
  public void setPublicKey(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2CommandsSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2CommandsSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2CommandsSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public List getCommandClasses()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setCommandClasses(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2CommandsSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public List getCommandClasses()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setCommandClasses(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2MessageEncapsulation:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEncryptedExtension()
  public List getEncryptedExtensions()
  public Boolean getExtension()
  public List getExtensions()
  public List getPayload()
  public Short getSequenceNumber()
  public void setEncryptedExtension(Boolean)
  public void setEncryptedExtensions(List)
  public void setExtension(Boolean)
  public void setExtensions(List)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2MessageEncapsulation:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getEncryptedExtension()
  public List getEncryptedExtensions()
  public Boolean getExtension()
  public List getExtensions()
  public List getPayload()
  public Short getSequenceNumber()
  public void setEncryptedExtension(Boolean)
  public void setEncryptedExtensions(List)
  public void setExtension(Boolean)
  public void setExtensions(List)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2NetworkKeyGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRequestedKey()
  public void setRequestedKey(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2NetworkKeyGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRequestedKey()
  public void setRequestedKey(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2NetworkKeyReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGrantedKey()
  public List getNetworkKey()
  public List getPayload()
  public void setGrantedKey(Short)
  public void setNetworkKey(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2NetworkKeyReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getGrantedKey()
  public List getNetworkKey()
  public List getPayload()
  public void setGrantedKey(Short)
  public void setNetworkKey(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2NetworkKeyVerify:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2NetworkKeyVerify:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2NonceGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSequenceNumber()
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2NonceGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSequenceNumber()
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2NonceReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMOS()
  public List getPayload()
  public List getREI()
  public Boolean getSOS()
  public Short getSequenceNumber()
  public void setMOS(Boolean)
  public void setREI(List)
  public void setSOS(Boolean)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2NonceReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getMOS()
  public List getPayload()
  public List getREI()
  public Boolean getSOS()
  public Short getSequenceNumber()
  public void setMOS(Boolean)
  public void setREI(List)
  public void setSOS(Boolean)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2TransferEnd:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getKeyVerified()
  public List getPayload()
  public Boolean getRequestComplete()
  public void setKeyVerified(Boolean)
  public void setRequestComplete(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.security2v1.Security2TransferEnd:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getKeyVerified()
  public List getPayload()
  public Boolean getRequestComplete()
  public void setKeyVerified(Boolean)
  public void setRequestComplete(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelmodev1.SecurityPanelModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelmodev1.SecurityPanelModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelmodev1.SecurityPanelModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelmodev1.SecurityPanelModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelmodev1.SecurityPanelModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelmodev1.SecurityPanelModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelmodev1.SecurityPanelModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelmodev1.SecurityPanelModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelmodev1.SecurityPanelModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Integer getSupportedModeBitMask()
  public void setSupportedModeBitMask(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelmodev1.SecurityPanelModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Integer getSupportedModeBitMask()
  public void setSupportedModeBitMask(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.CommandClassSecurityPanelZoneSensorInstalledReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfSensors()
  public List getPayload()
  public Short getZoneNumber()
  public void setNumberOfSensors(Short)
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.CommandClassSecurityPanelZoneSensorInstalledReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfSensors()
  public List getPayload()
  public Short getZoneNumber()
  public void setNumberOfSensors(Short)
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.SecurityPanelZoneSensorInstalledGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getZoneNumber()
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.SecurityPanelZoneSensorInstalledGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getZoneNumber()
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.SecurityPanelZoneSensorStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSensorNumber()
  public Short getZoneNumber()
  public void setSensorNumber(Short)
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.SecurityPanelZoneSensorStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSensorNumber()
  public Short getZoneNumber()
  public void setSensorNumber(Short)
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.SecurityPanelZoneSensorStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEventParameters()
  public List getPayload()
  public Short getSensorNumber()
  public Short getZoneNumber()
  public Short getZwaveAlarmEvent()
  public Short getZwaveAlarmType()
  public void setEventParameters(Short)
  public void setSensorNumber(Short)
  public void setZoneNumber(Short)
  public void setZwaveAlarmEvent(Short)
  public void setZwaveAlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.SecurityPanelZoneSensorStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getEventParameters()
  public List getPayload()
  public Short getSensorNumber()
  public Short getZoneNumber()
  public Short getZwaveAlarmEvent()
  public Short getZwaveAlarmType()
  public void setEventParameters(Short)
  public void setSensorNumber(Short)
  public void setZoneNumber(Short)
  public void setZwaveAlarmEvent(Short)
  public void setZwaveAlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.SecurityPanelZoneSensorTypeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSensorNumber()
  public Short getZoneNumber()
  public void setSensorNumber(Short)
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.SecurityPanelZoneSensorTypeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSensorNumber()
  public Short getZoneNumber()
  public void setSensorNumber(Short)
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.SecurityPanelZoneSensorTypeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSensorNumber()
  public Short getZoneNumber()
  public Short getZwaveAlarmType()
  public void setSensorNumber(Short)
  public void setZoneNumber(Short)
  public void setZwaveAlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonesensorv1.SecurityPanelZoneSensorTypeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSensorNumber()
  public Short getZoneNumber()
  public Short getZwaveAlarmType()
  public void setSensorNumber(Short)
  public void setZoneNumber(Short)
  public void setZwaveAlarmType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneNumberSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneNumberSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getZoneNumber()
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getZoneNumber()
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getZoneNumber()
  public Short getZoneState()
  public void setZoneNumber(Short)
  public void setZoneState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getZoneNumber()
  public Short getZoneState()
  public void setZoneNumber(Short)
  public void setZoneState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Boolean getZm()
  public Short getZonesSupported()
  public void setZm(Boolean)
  public void setZonesSupported(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Boolean getZm()
  public Short getZonesSupported()
  public void setZm(Boolean)
  public void setZonesSupported(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneTypeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getZoneNumber()
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneTypeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getZoneNumber()
  public void setZoneNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneTypeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getZoneNumber()
  public Short getZoneType()
  public void setZoneNumber(Short)
  public void setZoneType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securitypanelzonev1.SecurityPanelZoneTypeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getZoneNumber()
  public Short getZoneType()
  public void setZoneNumber(Short)
  public void setZoneType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.NetworkKeySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNetworkKeyByte()
  public List getPayload()
  public void setNetworkKeyByte(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.NetworkKeySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNetworkKeyByte()
  public List getPayload()
  public void setNetworkKeyByte(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.NetworkKeyVerify:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.NetworkKeyVerify:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityCommandsSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityCommandsSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityCommandsSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandClassControl()
  public Short hubitat.zwave.Command.getCommandClassId()
  public List getCommandClassSupport()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setCommandClassControl(List)
  public void setCommandClassSupport(List)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityCommandsSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandClassControl()
  public Short hubitat.zwave.Command.getCommandClassId()
  public List getCommandClassSupport()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setCommandClassControl(List)
  public void setCommandClassSupport(List)
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityMessageEncapsulation:
Methods:[
  public hubitat.zwave.commands.securityv1.SecurityMessageEncapsulation encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandByte()
  public Short getCommandClassId()
  public Short getCommandClassIdentifier()
  public Short getCommandId()
  public Short getCommandIdentifier()
  public List getPayload()
  public Boolean getSecondFrame()
  public Short getSequenceCounter()
  public Boolean getSequenced()
  public void setCommandByte(List)
  public void setCommandClassIdentifier(Short)
  public void setCommandIdentifier(Short)
  public void setSecondFrame(Boolean)
  public void setSequenceCounter(Short)
  public void setSequenced(Boolean)
  public Short super$2$getCommandClassId()
  public Short super$2$getCommandId()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityMessageEncapsulation:
Methods:[
  public hubitat.zwave.commands.securityv1.SecurityMessageEncapsulation encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandByte()
  public Short getCommandClassId()
  public Short getCommandClassIdentifier()
  public Short getCommandId()
  public Short getCommandIdentifier()
  public List getPayload()
  public Boolean getSecondFrame()
  public Short getSequenceCounter()
  public Boolean getSequenced()
  public void setCommandByte(List)
  public void setCommandClassIdentifier(Short)
  public void setCommandIdentifier(Short)
  public void setSecondFrame(Boolean)
  public void setSequenceCounter(Short)
  public void setSequenced(Boolean)
  public Short super$2$getCommandClassId()
  public Short super$2$getCommandId()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityMessageEncapsulationNonceGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandByte()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short getCommandClassIdentifier()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getCommandIdentifier()
  public List getInitializationVector()
  public List getMessageAuthenticationCode()
  public List getPayload()
  public Short getReceiversNonceIdentifier()
  public Boolean getSecondFrame()
  public Short getSequenceCounter()
  public Boolean getSequenced()
  public void setCommandByte(List)
  public void setCommandClassIdentifier(Short)
  public void setCommandIdentifier(Short)
  public void setInitializationVector(List)
  public void setMessageAuthenticationCode(List)
  public void setReceiversNonceIdentifier(Short)
  public void setSecondFrame(Boolean)
  public void setSequenceCounter(Short)
  public void setSequenced(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityMessageEncapsulationNonceGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandByte()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short getCommandClassIdentifier()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getCommandIdentifier()
  public List getInitializationVector()
  public List getMessageAuthenticationCode()
  public List getPayload()
  public Short getReceiversNonceIdentifier()
  public Boolean getSecondFrame()
  public Short getSequenceCounter()
  public Boolean getSequenced()
  public void setCommandByte(List)
  public void setCommandClassIdentifier(Short)
  public void setCommandIdentifier(Short)
  public void setInitializationVector(List)
  public void setMessageAuthenticationCode(List)
  public void setReceiversNonceIdentifier(Short)
  public void setSecondFrame(Boolean)
  public void setSequenceCounter(Short)
  public void setSequenced(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityNonceGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityNonceGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityNonceReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNonce()
  public List getPayload()
  public void setNonce(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecurityNonceReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getNonce()
  public List getPayload()
  public void setNonce(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecuritySchemeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedSecuritySchemes()
  public void setSupportedSecuritySchemes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecuritySchemeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedSecuritySchemes()
  public void setSupportedSecuritySchemes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecuritySchemeInherit:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedSecuritySchemes()
  public void setSupportedSecuritySchemes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecuritySchemeInherit:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedSecuritySchemes()
  public void setSupportedSecuritySchemes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecuritySchemeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedSecuritySchemes()
  public void setSupportedSecuritySchemes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.securityv1.SecuritySchemeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedSecuritySchemes()
  public void setSupportedSecuritySchemes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensoralarmv1.SensorAlarmGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSensorType()
  public void setSensorType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensoralarmv1.SensorAlarmGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSensorType()
  public void setSensorType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensoralarmv1.SensorAlarmReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Integer getSeconds()
  public Short getSensorState()
  public Short getSensorType()
  public Short getSourceNodeId()
  public void setSeconds(Integer)
  public void setSensorState(Short)
  public void setSensorType(Short)
  public void setSourceNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensoralarmv1.SensorAlarmReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Integer getSeconds()
  public Short getSensorState()
  public Short getSensorType()
  public Short getSourceNodeId()
  public void setSeconds(Integer)
  public void setSensorState(Short)
  public void setSensorType(Short)
  public void setSourceNodeId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensoralarmv1.SensorAlarmSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensoralarmv1.SensorAlarmSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensoralarmv1.SensorAlarmSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getBitMask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfBitMasks()
  public List getPayload()
  public void setBitMask(List)
  public void setNumberOfBitMasks(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensoralarmv1.SensorAlarmSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getBitMask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfBitMasks()
  public List getPayload()
  public void setBitMask(List)
  public void setNumberOfBitMasks(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorbinaryv1.SensorBinaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorbinaryv1.SensorBinaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorbinaryv1.SensorBinaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SENSOR_VALUE_DETECTED_AN_EVENT = 255
  public static Short SENSOR_VALUE_IDLE = 0
  public Short getSensorValue()
  public void setSensorValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorbinaryv1.SensorBinaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SENSOR_VALUE_DETECTED_AN_EVENT = 255
  public static Short SENSOR_VALUE_IDLE = 0
  public Short getSensorValue()
  public void setSensorValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorbinaryv2.SensorBinaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSensorType()
  public void setSensorType(Short)
  public List hubitat.zwave.commands.sensorbinaryv1.SensorBinaryGet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.sensorbinaryv2.SensorBinaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSensorType()
  public void setSensorType(Short)
  public List hubitat.zwave.commands.sensorbinaryv1.SensorBinaryGet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.sensorbinaryv2.SensorBinaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SENSOR_TYPE_AUX = 9
  public static Short SENSOR_TYPE_CO = 3
  public static Short SENSOR_TYPE_CO2 = 4
  public static Short SENSOR_TYPE_DOOR_WINDOW = 10
  public static Short SENSOR_TYPE_FIRST = 255
  public static Short SENSOR_TYPE_FREEZE = 7
  public static Short SENSOR_TYPE_GENERAL_PURPOSE = 1
  public static Short SENSOR_TYPE_GLASS_BREAK = 13
  public static Short SENSOR_TYPE_HEAT = 5
  public static Short SENSOR_TYPE_MOTION = 12
  public static Short SENSOR_TYPE_SMOKE = 2
  public static Short SENSOR_TYPE_TAMPER = 8
  public static Short SENSOR_TYPE_TILT = 11
  public static Short SENSOR_TYPE_WATER = 6
  public static Short SENSOR_VALUE_DETECTED_AN_EVENT = 255
  public static Short SENSOR_VALUE_IDLE = 0
  public Short getSensorType()
  public Short getSensorValue()
  public void setSensorType(Short)
  public void setSensorValue(Short)
  public List hubitat.zwave.commands.sensorbinaryv1.SensorBinaryReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getSensorValue()
  public void super$3$setSensorValue(Short)
]
class hubitat.zwave.commands.sensorbinaryv2.SensorBinaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SENSOR_TYPE_AUX = 9
  public static Short SENSOR_TYPE_CO = 3
  public static Short SENSOR_TYPE_CO2 = 4
  public static Short SENSOR_TYPE_DOOR_WINDOW = 10
  public static Short SENSOR_TYPE_FIRST = 255
  public static Short SENSOR_TYPE_FREEZE = 7
  public static Short SENSOR_TYPE_GENERAL_PURPOSE = 1
  public static Short SENSOR_TYPE_GLASS_BREAK = 13
  public static Short SENSOR_TYPE_HEAT = 5
  public static Short SENSOR_TYPE_MOTION = 12
  public static Short SENSOR_TYPE_SMOKE = 2
  public static Short SENSOR_TYPE_TAMPER = 8
  public static Short SENSOR_TYPE_TILT = 11
  public static Short SENSOR_TYPE_WATER = 6
  public static Short SENSOR_VALUE_DETECTED_AN_EVENT = 255
  public static Short SENSOR_VALUE_IDLE = 0
  public Short getSensorType()
  public Short getSensorValue()
  public void setSensorType(Short)
  public void setSensorValue(Short)
  public List hubitat.zwave.commands.sensorbinaryv1.SensorBinaryReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getSensorValue()
  public void super$3$setSensorValue(Short)
]
class hubitat.zwave.commands.sensorbinaryv2.SensorBinarySupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorbinaryv2.SensorBinarySupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorbinaryv2.SensorBinarySupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAux()
  public String getCMD()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDoorwindow()
  public Boolean getFirst()
  public Boolean getFreeze()
  public Boolean getGeneral()
  public Boolean getGlassBreak()
  public Boolean getHeat()
  public Boolean getMotion()
  public List getPayload()
  public Boolean getSmoke()
  public Boolean getTamper()
  public Boolean getTilt()
  public Boolean getWater()
  public void setAux(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setDoorwindow(Boolean)
  public void setFirst(Boolean)
  public void setFreeze(Boolean)
  public void setGeneral(Boolean)
  public void setGlassBreak(Boolean)
  public void setHeat(Boolean)
  public void setMotion(Boolean)
  public void setSmoke(Boolean)
  public void setTamper(Boolean)
  public void setTilt(Boolean)
  public void setWater(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorbinaryv2.SensorBinarySupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAux()
  public String getCMD()
  public Boolean getCo()
  public Boolean getCo2()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getDoorwindow()
  public Boolean getFirst()
  public Boolean getFreeze()
  public Boolean getGeneral()
  public Boolean getGlassBreak()
  public Boolean getHeat()
  public Boolean getMotion()
  public List getPayload()
  public Boolean getSmoke()
  public Boolean getTamper()
  public Boolean getTilt()
  public Boolean getWater()
  public void setAux(Boolean)
  public void setCo(Boolean)
  public void setCo2(Boolean)
  public void setDoorwindow(Boolean)
  public void setFirst(Boolean)
  public void setFreeze(Boolean)
  public void setGeneral(Boolean)
  public void setGlassBreak(Boolean)
  public void setHeat(Boolean)
  public void setMotion(Boolean)
  public void setSmoke(Boolean)
  public void setTamper(Boolean)
  public void setTilt(Boolean)
  public void setWater(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorconfigurationv1.SensorTriggerLevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorconfigurationv1.SensorTriggerLevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorconfigurationv1.SensorTriggerLevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledTriggerValue()
  public Short getSensorType()
  public Short getSize()
  public List getTriggerValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledTriggerValue(BigDecimal)
  public void setSensorType(Short)
  public void setSize(Short)
  public void setTriggerValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorconfigurationv1.SensorTriggerLevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledTriggerValue()
  public Short getSensorType()
  public Short getSize()
  public List getTriggerValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledTriggerValue(BigDecimal)
  public void setSensorType(Short)
  public void setSize(Short)
  public void setTriggerValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorconfigurationv1.SensorTriggerLevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDefaultValue()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledTriggerValue()
  public Short getSensorType()
  public Short getSize()
  public List getTriggerValue()
  public void setCurrent(Boolean)
  public void setDefaultValue(Boolean)
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledTriggerValue(BigDecimal)
  public void setSensorType(Short)
  public void setSize(Short)
  public void setTriggerValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensorconfigurationv1.SensorTriggerLevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDefaultValue()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledTriggerValue()
  public Short getSensorType()
  public Short getSize()
  public List getTriggerValue()
  public void setCurrent(Boolean)
  public void setDefaultValue(Boolean)
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledTriggerValue(BigDecimal)
  public void setSensorType(Short)
  public void setSize(Short)
  public void setTriggerValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public Short getScale()
  public BigDecimal getScaledSensorValue()
  public Short getSensorType()
  public List getSensorValue()
  public Short getSize()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledSensorValue(BigDecimal)
  public void setSensorType(Short)
  public void setSensorValue(List)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public Short getScale()
  public BigDecimal getScaledSensorValue()
  public Short getSensorType()
  public List getSensorValue()
  public Short getSize()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledSensorValue(BigDecimal)
  public void setSensorType(Short)
  public void setSensorValue(List)
  public void setSize(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccelerationX()
  public Boolean getAccelerationY()
  public Boolean getAccelerationZ()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public Boolean getBloodPressure()
  public Boolean getBodyMass()
  public Boolean getBodyMassIndex()
  public Boolean getBoneMass()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Boolean getCarbonMonoxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getFatMass()
  public Boolean getFormaldehydeLevel()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHeartRate()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMetabolicBasis()
  public Boolean getMethaneLevel()
  public Boolean getMoisture()
  public Boolean getMuscleMass()
  public Boolean getParticulateMater10Level()
  public Boolean getParticulateMaterLevel()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRadonConcentration()
  public Boolean getRainRate()
  public Boolean getRespiratoryRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSignalStrength()
  public Boolean getSmokeDensity()
  public Boolean getSoilHumidity()
  public Boolean getSoilReactivity()
  public Boolean getSoilSalinity()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVocLevel()
  public Boolean getVoltage()
  public Boolean getWaterFlow()
  public Boolean getWaterPressure()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAccelerationX(Boolean)
  public void setAccelerationY(Boolean)
  public void setAccelerationZ(Boolean)
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setBloodPressure(Boolean)
  public void setBodyMass(Boolean)
  public void setBodyMassIndex(Boolean)
  public void setBoneMass(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCarbonMonoxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setFatMass(Boolean)
  public void setFormaldehydeLevel(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHeartRate(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMetabolicBasis(Boolean)
  public void setMethaneLevel(Boolean)
  public void setMoisture(Boolean)
  public void setMuscleMass(Boolean)
  public void setParticulateMater10Level(Boolean)
  public void setParticulateMaterLevel(Boolean)
  public void setPower(Boolean)
  public void setRadonConcentration(Boolean)
  public void setRainRate(Boolean)
  public void setRespiratoryRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSignalStrength(Boolean)
  public void setSmokeDensity(Boolean)
  public void setSoilHumidity(Boolean)
  public void setSoilReactivity(Boolean)
  public void setSoilSalinity(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVocLevel(Boolean)
  public void setVoltage(Boolean)
  public void setWaterFlow(Boolean)
  public void setWaterPressure(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationX()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationY()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationZ()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSmokeDensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationX(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationY(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationZ(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSmokeDensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setWeight(Boolean)
  public Boolean super$7$getAccelerationX()
  public Boolean super$7$getAccelerationY()
  public Boolean super$7$getAccelerationZ()
  public Boolean super$7$getAirFlow()
  public Boolean super$7$getAirTemperature()
  public Boolean super$7$getAnglePosition()
  public Boolean super$7$getAtmosphericPressure()
  public Boolean super$7$getBarometricPressure()
  public Boolean super$7$getBloodPressure()
  public Boolean super$7$getBodyMass()
  public Boolean super$7$getBodyMassIndex()
  public Boolean super$7$getBoneMass()
  public String super$7$getCMD()
  public Boolean super$7$getCarbonDioxideLevel()
  public Boolean super$7$getCarbonMonoxideLevel()
  public Boolean super$7$getCurrent()
  public Boolean super$7$getDewPoint()
  public Boolean super$7$getDirection()
  public Boolean super$7$getDistance()
  public Boolean super$7$getElectricalConductivity()
  public Boolean super$7$getElectricalResistivity()
  public Boolean super$7$getFatMass()
  public Boolean super$7$getFormaldehydeLevel()
  public Boolean super$7$getFrequency()
  public Boolean super$7$getGeneralPurposeValue()
  public Boolean super$7$getHeartRate()
  public Boolean super$7$getHumidity()
  public Boolean super$7$getLoudness()
  public Boolean super$7$getLuminance()
  public Boolean super$7$getMetabolicBasis()
  public Boolean super$7$getMethaneLevel()
  public Boolean super$7$getMoisture()
  public Boolean super$7$getMuscleMass()
  public Boolean super$7$getParticulateMaterLevel()
  public List super$7$getPayload()
  public Boolean super$7$getPower()
  public Boolean super$7$getRadonConcentration()
  public Boolean super$7$getRainRate()
  public Boolean super$7$getRotation()
  public Boolean super$7$getSeismicIntensity()
  public Boolean super$7$getSeismicMagnitude()
  public Boolean super$7$getSignalStrength()
  public Boolean super$7$getSmokeDensity()
  public Boolean super$7$getSoilHumidity()
  public Boolean super$7$getSoilReactivity()
  public Boolean super$7$getSoilSalinity()
  public Boolean super$7$getSoilTemperature()
  public Boolean super$7$getSolarRadiation()
  public Boolean super$7$getTankCapacity()
  public Boolean super$7$getTargetTemperature()
  public Boolean super$7$getTideLevel()
  public Boolean super$7$getTime()
  public Boolean super$7$getUltraviolet()
  public Boolean super$7$getVelocity()
  public Boolean super$7$getVocLevel()
  public Boolean super$7$getVoltage()
  public Boolean super$7$getWaterFlow()
  public Boolean super$7$getWaterPressure()
  public Boolean super$7$getWaterTemperature()
  public Boolean super$7$getWeight()
  public void super$7$setAccelerationX(Boolean)
  public void super$7$setAccelerationY(Boolean)
  public void super$7$setAccelerationZ(Boolean)
  public void super$7$setAirFlow(Boolean)
  public void super$7$setAirTemperature(Boolean)
  public void super$7$setAnglePosition(Boolean)
  public void super$7$setAtmosphericPressure(Boolean)
  public void super$7$setBarometricPressure(Boolean)
  public void super$7$setBloodPressure(Boolean)
  public void super$7$setBodyMass(Boolean)
  public void super$7$setBodyMassIndex(Boolean)
  public void super$7$setBoneMass(Boolean)
  public void super$7$setCarbonDioxideLevel(Boolean)
  public void super$7$setCarbonMonoxideLevel(Boolean)
  public void super$7$setCurrent(Boolean)
  public void super$7$setDewPoint(Boolean)
  public void super$7$setDirection(Boolean)
  public void super$7$setDistance(Boolean)
  public void super$7$setElectricalConductivity(Boolean)
  public void super$7$setElectricalResistivity(Boolean)
  public void super$7$setFatMass(Boolean)
  public void super$7$setFormaldehydeLevel(Boolean)
  public void super$7$setFrequency(Boolean)
  public void super$7$setGeneralPurposeValue(Boolean)
  public void super$7$setHeartRate(Boolean)
  public void super$7$setHumidity(Boolean)
  public void super$7$setLoudness(Boolean)
  public void super$7$setLuminance(Boolean)
  public void super$7$setMetabolicBasis(Boolean)
  public void super$7$setMethaneLevel(Boolean)
  public void super$7$setMoisture(Boolean)
  public void super$7$setMuscleMass(Boolean)
  public void super$7$setParticulateMaterLevel(Boolean)
  public void super$7$setPower(Boolean)
  public void super$7$setRadonConcentration(Boolean)
  public void super$7$setRainRate(Boolean)
  public void super$7$setRotation(Boolean)
  public void super$7$setSeismicIntensity(Boolean)
  public void super$7$setSeismicMagnitude(Boolean)
  public void super$7$setSignalStrength(Boolean)
  public void super$7$setSmokeDensity(Boolean)
  public void super$7$setSoilHumidity(Boolean)
  public void super$7$setSoilReactivity(Boolean)
  public void super$7$setSoilSalinity(Boolean)
  public void super$7$setSoilTemperature(Boolean)
  public void super$7$setSolarRadiation(Boolean)
  public void super$7$setTankCapacity(Boolean)
  public void super$7$setTargetTemperature(Boolean)
  public void super$7$setTideLevel(Boolean)
  public void super$7$setTime(Boolean)
  public void super$7$setUltraviolet(Boolean)
  public void super$7$setVelocity(Boolean)
  public void super$7$setVocLevel(Boolean)
  public void super$7$setVoltage(Boolean)
  public void super$7$setWaterFlow(Boolean)
  public void super$7$setWaterPressure(Boolean)
  public void super$7$setWaterTemperature(Boolean)
  public void super$7$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccelerationX()
  public Boolean getAccelerationY()
  public Boolean getAccelerationZ()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public Boolean getBloodPressure()
  public Boolean getBodyMass()
  public Boolean getBodyMassIndex()
  public Boolean getBoneMass()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Boolean getCarbonMonoxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getFatMass()
  public Boolean getFormaldehydeLevel()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHeartRate()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMetabolicBasis()
  public Boolean getMethaneLevel()
  public Boolean getMoisture()
  public Boolean getMuscleMass()
  public Boolean getParticulateMater10Level()
  public Boolean getParticulateMaterLevel()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRadonConcentration()
  public Boolean getRainRate()
  public Boolean getRespiratoryRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSignalStrength()
  public Boolean getSmokeDensity()
  public Boolean getSoilHumidity()
  public Boolean getSoilReactivity()
  public Boolean getSoilSalinity()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVocLevel()
  public Boolean getVoltage()
  public Boolean getWaterFlow()
  public Boolean getWaterPressure()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAccelerationX(Boolean)
  public void setAccelerationY(Boolean)
  public void setAccelerationZ(Boolean)
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setBloodPressure(Boolean)
  public void setBodyMass(Boolean)
  public void setBodyMassIndex(Boolean)
  public void setBoneMass(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCarbonMonoxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setFatMass(Boolean)
  public void setFormaldehydeLevel(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHeartRate(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMetabolicBasis(Boolean)
  public void setMethaneLevel(Boolean)
  public void setMoisture(Boolean)
  public void setMuscleMass(Boolean)
  public void setParticulateMater10Level(Boolean)
  public void setParticulateMaterLevel(Boolean)
  public void setPower(Boolean)
  public void setRadonConcentration(Boolean)
  public void setRainRate(Boolean)
  public void setRespiratoryRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSignalStrength(Boolean)
  public void setSmokeDensity(Boolean)
  public void setSoilHumidity(Boolean)
  public void setSoilReactivity(Boolean)
  public void setSoilSalinity(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVocLevel(Boolean)
  public void setVoltage(Boolean)
  public void setWaterFlow(Boolean)
  public void setWaterPressure(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationX()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationY()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationZ()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSmokeDensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationX(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationY(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationZ(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSmokeDensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setWeight(Boolean)
  public Boolean super$7$getAccelerationX()
  public Boolean super$7$getAccelerationY()
  public Boolean super$7$getAccelerationZ()
  public Boolean super$7$getAirFlow()
  public Boolean super$7$getAirTemperature()
  public Boolean super$7$getAnglePosition()
  public Boolean super$7$getAtmosphericPressure()
  public Boolean super$7$getBarometricPressure()
  public Boolean super$7$getBloodPressure()
  public Boolean super$7$getBodyMass()
  public Boolean super$7$getBodyMassIndex()
  public Boolean super$7$getBoneMass()
  public String super$7$getCMD()
  public Boolean super$7$getCarbonDioxideLevel()
  public Boolean super$7$getCarbonMonoxideLevel()
  public Boolean super$7$getCurrent()
  public Boolean super$7$getDewPoint()
  public Boolean super$7$getDirection()
  public Boolean super$7$getDistance()
  public Boolean super$7$getElectricalConductivity()
  public Boolean super$7$getElectricalResistivity()
  public Boolean super$7$getFatMass()
  public Boolean super$7$getFormaldehydeLevel()
  public Boolean super$7$getFrequency()
  public Boolean super$7$getGeneralPurposeValue()
  public Boolean super$7$getHeartRate()
  public Boolean super$7$getHumidity()
  public Boolean super$7$getLoudness()
  public Boolean super$7$getLuminance()
  public Boolean super$7$getMetabolicBasis()
  public Boolean super$7$getMethaneLevel()
  public Boolean super$7$getMoisture()
  public Boolean super$7$getMuscleMass()
  public Boolean super$7$getParticulateMaterLevel()
  public List super$7$getPayload()
  public Boolean super$7$getPower()
  public Boolean super$7$getRadonConcentration()
  public Boolean super$7$getRainRate()
  public Boolean super$7$getRotation()
  public Boolean super$7$getSeismicIntensity()
  public Boolean super$7$getSeismicMagnitude()
  public Boolean super$7$getSignalStrength()
  public Boolean super$7$getSmokeDensity()
  public Boolean super$7$getSoilHumidity()
  public Boolean super$7$getSoilReactivity()
  public Boolean super$7$getSoilSalinity()
  public Boolean super$7$getSoilTemperature()
  public Boolean super$7$getSolarRadiation()
  public Boolean super$7$getTankCapacity()
  public Boolean super$7$getTargetTemperature()
  public Boolean super$7$getTideLevel()
  public Boolean super$7$getTime()
  public Boolean super$7$getUltraviolet()
  public Boolean super$7$getVelocity()
  public Boolean super$7$getVocLevel()
  public Boolean super$7$getVoltage()
  public Boolean super$7$getWaterFlow()
  public Boolean super$7$getWaterPressure()
  public Boolean super$7$getWaterTemperature()
  public Boolean super$7$getWeight()
  public void super$7$setAccelerationX(Boolean)
  public void super$7$setAccelerationY(Boolean)
  public void super$7$setAccelerationZ(Boolean)
  public void super$7$setAirFlow(Boolean)
  public void super$7$setAirTemperature(Boolean)
  public void super$7$setAnglePosition(Boolean)
  public void super$7$setAtmosphericPressure(Boolean)
  public void super$7$setBarometricPressure(Boolean)
  public void super$7$setBloodPressure(Boolean)
  public void super$7$setBodyMass(Boolean)
  public void super$7$setBodyMassIndex(Boolean)
  public void super$7$setBoneMass(Boolean)
  public void super$7$setCarbonDioxideLevel(Boolean)
  public void super$7$setCarbonMonoxideLevel(Boolean)
  public void super$7$setCurrent(Boolean)
  public void super$7$setDewPoint(Boolean)
  public void super$7$setDirection(Boolean)
  public void super$7$setDistance(Boolean)
  public void super$7$setElectricalConductivity(Boolean)
  public void super$7$setElectricalResistivity(Boolean)
  public void super$7$setFatMass(Boolean)
  public void super$7$setFormaldehydeLevel(Boolean)
  public void super$7$setFrequency(Boolean)
  public void super$7$setGeneralPurposeValue(Boolean)
  public void super$7$setHeartRate(Boolean)
  public void super$7$setHumidity(Boolean)
  public void super$7$setLoudness(Boolean)
  public void super$7$setLuminance(Boolean)
  public void super$7$setMetabolicBasis(Boolean)
  public void super$7$setMethaneLevel(Boolean)
  public void super$7$setMoisture(Boolean)
  public void super$7$setMuscleMass(Boolean)
  public void super$7$setParticulateMaterLevel(Boolean)
  public void super$7$setPower(Boolean)
  public void super$7$setRadonConcentration(Boolean)
  public void super$7$setRainRate(Boolean)
  public void super$7$setRotation(Boolean)
  public void super$7$setSeismicIntensity(Boolean)
  public void super$7$setSeismicMagnitude(Boolean)
  public void super$7$setSignalStrength(Boolean)
  public void super$7$setSmokeDensity(Boolean)
  public void super$7$setSoilHumidity(Boolean)
  public void super$7$setSoilReactivity(Boolean)
  public void super$7$setSoilSalinity(Boolean)
  public void super$7$setSoilTemperature(Boolean)
  public void super$7$setSolarRadiation(Boolean)
  public void super$7$setTankCapacity(Boolean)
  public void super$7$setTargetTemperature(Boolean)
  public void super$7$setTideLevel(Boolean)
  public void super$7$setTime(Boolean)
  public void super$7$setUltraviolet(Boolean)
  public void super$7$setVelocity(Boolean)
  public void super$7$setVocLevel(Boolean)
  public void super$7$setVoltage(Boolean)
  public void super$7$setWaterFlow(Boolean)
  public void super$7$setWaterPressure(Boolean)
  public void super$7$setWaterTemperature(Boolean)
  public void super$7$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_APPLIED_FORCE_ON_THE_SENSOR_V11 = 71
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BOILER_WATER_TEMPERATURE_V11 = 62
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CONDENSER_COIL_TEMPERATURE_V11 = 74
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEFROST_TEMPERATURE_V11 = 80
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISCHARGE_LINE_TEMPERATURE_V11 = 77
  public static Short SENSOR_TYPE_DISCHARGE_PRESSURE_V11 = 79
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_DOMESTIC_HOT_WATER_TEMPERATURE_V11 = 63
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_EVAPORATOR_COIL_TEMPERATURE_V11 = 75
  public static Short SENSOR_TYPE_EXHAUST_TEMPERATURE_V11 = 65
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_LF_HF_RATIO_V11 = 69
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LIQUID_LINE_TEMPERATURE_V11 = 76
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MOTION_DIRECTION_V11 = 70
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_OUTSIDE_TEMPERATURE_V11 = 64
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_RELATIVE_MODULATION_LEVEL_V11 = 61
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RETURN_AIR_TEMPERATURE_V11 = 72
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_SUCTION_PRESSURE_V11 = 78
  public static Short SENSOR_TYPE_SUPPLY_AIR_TEMPERATURE_V11 = 73
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_ACIDITY_V11 = 67
  public static Short SENSOR_TYPE_WATER_CHLORINE_LEVEL_V11 = 66
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_OXIDATION_REDUCTION_POTENTIAL_V11 = 68
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_APPLIED_FORCE_ON_THE_SENSOR_V11 = 71
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BOILER_WATER_TEMPERATURE_V11 = 62
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CONDENSER_COIL_TEMPERATURE_V11 = 74
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEFROST_TEMPERATURE_V11 = 80
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISCHARGE_LINE_TEMPERATURE_V11 = 77
  public static Short SENSOR_TYPE_DISCHARGE_PRESSURE_V11 = 79
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_DOMESTIC_HOT_WATER_TEMPERATURE_V11 = 63
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_EVAPORATOR_COIL_TEMPERATURE_V11 = 75
  public static Short SENSOR_TYPE_EXHAUST_TEMPERATURE_V11 = 65
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_LF_HF_RATIO_V11 = 69
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LIQUID_LINE_TEMPERATURE_V11 = 76
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MOTION_DIRECTION_V11 = 70
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_OUTSIDE_TEMPERATURE_V11 = 64
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_RELATIVE_MODULATION_LEVEL_V11 = 61
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RETURN_AIR_TEMPERATURE_V11 = 72
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_SUCTION_PRESSURE_V11 = 78
  public static Short SENSOR_TYPE_SUPPLY_AIR_TEMPERATURE_V11 = 73
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_ACIDITY_V11 = 67
  public static Short SENSOR_TYPE_WATER_CHLORINE_LEVEL_V11 = 66
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_OXIDATION_REDUCTION_POTENTIAL_V11 = 68
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_APPLIED_FORCE_ON_THE_SENSOR_V11 = 71
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BOILER_WATER_TEMPERATURE_V11 = 62
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CONDENSER_COIL_TEMPERATURE_V11 = 74
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEFROST_TEMPERATURE_V11 = 80
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISCHARGE_LINE_TEMPERATURE_V11 = 77
  public static Short SENSOR_TYPE_DISCHARGE_PRESSURE_V11 = 79
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_DOMESTIC_HOT_WATER_TEMPERATURE_V11 = 63
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_EVAPORATOR_COIL_TEMPERATURE_V11 = 75
  public static Short SENSOR_TYPE_EXHAUST_TEMPERATURE_V11 = 65
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_LF_HF_RATIO_V11 = 69
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LIQUID_LINE_TEMPERATURE_V11 = 76
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MOTION_DIRECTION_V11 = 70
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_OUTSIDE_TEMPERATURE_V11 = 64
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_RELATIVE_MODULATION_LEVEL_V11 = 61
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RETURN_AIR_TEMPERATURE_V11 = 72
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_SUCTION_PRESSURE_V11 = 78
  public static Short SENSOR_TYPE_SUPPLY_AIR_TEMPERATURE_V11 = 73
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_ACIDITY_V11 = 67
  public static Short SENSOR_TYPE_WATER_CHLORINE_LEVEL_V11 = 66
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_OXIDATION_REDUCTION_POTENTIAL_V11 = 68
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_APPLIED_FORCE_ON_THE_SENSOR_V11 = 71
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BOILER_WATER_TEMPERATURE_V11 = 62
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CONDENSER_COIL_TEMPERATURE_V11 = 74
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEFROST_TEMPERATURE_V11 = 80
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISCHARGE_LINE_TEMPERATURE_V11 = 77
  public static Short SENSOR_TYPE_DISCHARGE_PRESSURE_V11 = 79
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_DOMESTIC_HOT_WATER_TEMPERATURE_V11 = 63
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_EVAPORATOR_COIL_TEMPERATURE_V11 = 75
  public static Short SENSOR_TYPE_EXHAUST_TEMPERATURE_V11 = 65
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_LF_HF_RATIO_V11 = 69
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LIQUID_LINE_TEMPERATURE_V11 = 76
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MOTION_DIRECTION_V11 = 70
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_OUTSIDE_TEMPERATURE_V11 = 64
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_RELATIVE_MODULATION_LEVEL_V11 = 61
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RETURN_AIR_TEMPERATURE_V11 = 72
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_SUCTION_PRESSURE_V11 = 78
  public static Short SENSOR_TYPE_SUPPLY_AIR_TEMPERATURE_V11 = 73
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_ACIDITY_V11 = 67
  public static Short SENSOR_TYPE_WATER_CHLORINE_LEVEL_V11 = 66
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_OXIDATION_REDUCTION_POTENTIAL_V11 = 68
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_APPLIED_FORCE_ON_THE_SENSOR_V11 = 71
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BOILER_WATER_TEMPERATURE_V11 = 62
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CONDENSER_COIL_TEMPERATURE_V11 = 74
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEFROST_TEMPERATURE_V11 = 80
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISCHARGE_LINE_TEMPERATURE_V11 = 77
  public static Short SENSOR_TYPE_DISCHARGE_PRESSURE_V11 = 79
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_DOMESTIC_HOT_WATER_TEMPERATURE_V11 = 63
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_EVAPORATOR_COIL_TEMPERATURE_V11 = 75
  public static Short SENSOR_TYPE_EXHAUST_TEMPERATURE_V11 = 65
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_LF_HF_RATIO_V11 = 69
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LIQUID_LINE_TEMPERATURE_V11 = 76
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MOTION_DIRECTION_V11 = 70
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_OUTSIDE_TEMPERATURE_V11 = 64
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_RELATIVE_MODULATION_LEVEL_V11 = 61
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RETURN_AIR_TEMPERATURE_V11 = 72
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_SUCTION_PRESSURE_V11 = 78
  public static Short SENSOR_TYPE_SUPPLY_AIR_TEMPERATURE_V11 = 73
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_ACIDITY_V11 = 67
  public static Short SENSOR_TYPE_WATER_CHLORINE_LEVEL_V11 = 66
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_OXIDATION_REDUCTION_POTENTIAL_V11 = 68
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_APPLIED_FORCE_ON_THE_SENSOR_V11 = 71
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BOILER_WATER_TEMPERATURE_V11 = 62
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CONDENSER_COIL_TEMPERATURE_V11 = 74
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEFROST_TEMPERATURE_V11 = 80
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISCHARGE_LINE_TEMPERATURE_V11 = 77
  public static Short SENSOR_TYPE_DISCHARGE_PRESSURE_V11 = 79
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_DOMESTIC_HOT_WATER_TEMPERATURE_V11 = 63
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_EVAPORATOR_COIL_TEMPERATURE_V11 = 75
  public static Short SENSOR_TYPE_EXHAUST_TEMPERATURE_V11 = 65
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_LF_HF_RATIO_V11 = 69
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LIQUID_LINE_TEMPERATURE_V11 = 76
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MOTION_DIRECTION_V11 = 70
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_OUTSIDE_TEMPERATURE_V11 = 64
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_RELATIVE_MODULATION_LEVEL_V11 = 61
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RETURN_AIR_TEMPERATURE_V11 = 72
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_SUCTION_PRESSURE_V11 = 78
  public static Short SENSOR_TYPE_SUPPLY_AIR_TEMPERATURE_V11 = 73
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_ACIDITY_V11 = 67
  public static Short SENSOR_TYPE_WATER_CHLORINE_LEVEL_V11 = 66
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_OXIDATION_REDUCTION_POTENTIAL_V11 = 68
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_APPLIED_FORCE_ON_THE_SENSOR_V11 = 71
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BOILER_WATER_TEMPERATURE_V11 = 62
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CONDENSER_COIL_TEMPERATURE_V11 = 74
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEFROST_TEMPERATURE_V11 = 80
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISCHARGE_LINE_TEMPERATURE_V11 = 77
  public static Short SENSOR_TYPE_DISCHARGE_PRESSURE_V11 = 79
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_DOMESTIC_HOT_WATER_TEMPERATURE_V11 = 63
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_EVAPORATOR_COIL_TEMPERATURE_V11 = 75
  public static Short SENSOR_TYPE_EXHAUST_TEMPERATURE_V11 = 65
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_LF_HF_RATIO_V11 = 69
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LIQUID_LINE_TEMPERATURE_V11 = 76
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MOTION_DIRECTION_V11 = 70
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_OUTSIDE_TEMPERATURE_V11 = 64
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_RELATIVE_MODULATION_LEVEL_V11 = 61
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RETURN_AIR_TEMPERATURE_V11 = 72
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_SUCTION_PRESSURE_V11 = 78
  public static Short SENSOR_TYPE_SUPPLY_AIR_TEMPERATURE_V11 = 73
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_ACIDITY_V11 = 67
  public static Short SENSOR_TYPE_WATER_CHLORINE_LEVEL_V11 = 66
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_OXIDATION_REDUCTION_POTENTIAL_V11 = 68
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_APPLIED_FORCE_ON_THE_SENSOR_V11 = 71
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BOILER_WATER_TEMPERATURE_V11 = 62
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CONDENSER_COIL_TEMPERATURE_V11 = 74
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEFROST_TEMPERATURE_V11 = 80
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISCHARGE_LINE_TEMPERATURE_V11 = 77
  public static Short SENSOR_TYPE_DISCHARGE_PRESSURE_V11 = 79
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_DOMESTIC_HOT_WATER_TEMPERATURE_V11 = 63
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_EVAPORATOR_COIL_TEMPERATURE_V11 = 75
  public static Short SENSOR_TYPE_EXHAUST_TEMPERATURE_V11 = 65
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_LF_HF_RATIO_V11 = 69
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LIQUID_LINE_TEMPERATURE_V11 = 76
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MOTION_DIRECTION_V11 = 70
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_OUTSIDE_TEMPERATURE_V11 = 64
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V10 = 59
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_RELATIVE_MODULATION_LEVEL_V11 = 61
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RESPIRATORY_RATE_V10 = 60
  public static Short SENSOR_TYPE_RETURN_AIR_TEMPERATURE_V11 = 72
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_SUCTION_PRESSURE_V11 = 78
  public static Short SENSOR_TYPE_SUPPLY_AIR_TEMPERATURE_V11 = 73
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_ACIDITY_V11 = 67
  public static Short SENSOR_TYPE_WATER_CHLORINE_LEVEL_V11 = 66
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_OXIDATION_REDUCTION_POTENTIAL_V11 = 68
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccelerationX()
  public Boolean getAccelerationY()
  public Boolean getAccelerationZ()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAmmoniaLevel()
  public Boolean getAnglePosition()
  public Boolean getAppliedForce()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public Boolean getBloodPressure()
  public Boolean getBodyMass()
  public Boolean getBodyMassIndex()
  public Boolean getBoilerWaterTemperature()
  public Boolean getBoneMass()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Boolean getCarbonMonoxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCondenserCoilTemperature()
  public Boolean getCurrent()
  public Boolean getDefrostTemperature()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDischargeLinePressure()
  public Boolean getDischargeLineTemperature()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getEvaporatorCoilTemperature()
  public Boolean getExhaustTemperature()
  public Boolean getFatMass()
  public Boolean getFormaldehydeLevel()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHeartRate()
  public Boolean getHeartRateRatio()
  public Boolean getHotWaterTemperature()
  public Boolean getHumidity()
  public Boolean getLeadLevel()
  public Boolean getLiquidLineTemperature()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMetabolicBasis()
  public Boolean getMethaneLevel()
  public Boolean getMoisture()
  public Boolean getMotionDirection()
  public Boolean getMuscleMass()
  public Boolean getNitrogenDioxideLevel()
  public Boolean getOutsideTemperature()
  public Boolean getOzoneLevel()
  public Boolean getParticulateMater10Level()
  public Boolean getParticulateMater1Level()
  public Boolean getParticulateMaterLevel()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRadonConcentration()
  public Boolean getRainRate()
  public Boolean getRelativeModulation()
  public Boolean getRespiratoryRate()
  public Boolean getReturnAirTemperature()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSignalStrength()
  public Boolean getSmokeDensity()
  public Boolean getSoilHumidity()
  public Boolean getSoilReactivity()
  public Boolean getSoilSalinity()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getSuctionLinePressure()
  public Boolean getSulferDioxideLevel()
  public Boolean getSupplyAirTemperature()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVocLevel()
  public Boolean getVoltage()
  public Boolean getWaterAcidity()
  public Boolean getWaterChlorineLevel()
  public Boolean getWaterFlow()
  public Boolean getWaterOxidationPotential()
  public Boolean getWaterPressure()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAccelerationX(Boolean)
  public void setAccelerationY(Boolean)
  public void setAccelerationZ(Boolean)
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAmmoniaLevel(Boolean)
  public void setAnglePosition(Boolean)
  public void setAppliedForce(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setBloodPressure(Boolean)
  public void setBodyMass(Boolean)
  public void setBodyMassIndex(Boolean)
  public void setBoilerWaterTemperature(Boolean)
  public void setBoneMass(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCarbonMonoxideLevel(Boolean)
  public void setCondenserCoilTemperature(Boolean)
  public void setCurrent(Boolean)
  public void setDefrostTemperature(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDischargeLinePressure(Boolean)
  public void setDischargeLineTemperature(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setEvaporatorCoilTemperature(Boolean)
  public void setExhaustTemperature(Boolean)
  public void setFatMass(Boolean)
  public void setFormaldehydeLevel(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHeartRate(Boolean)
  public void setHeartRateRatio(Boolean)
  public void setHotWaterTemperature(Boolean)
  public void setHumidity(Boolean)
  public void setLeadLevel(Boolean)
  public void setLiquidLineTemperature(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMetabolicBasis(Boolean)
  public void setMethaneLevel(Boolean)
  public void setMoisture(Boolean)
  public void setMotionDirection(Boolean)
  public void setMuscleMass(Boolean)
  public void setNitrogenDioxideLevel(Boolean)
  public void setOutsideTemperature(Boolean)
  public void setOzoneLevel(Boolean)
  public void setParticulateMater10Level(Boolean)
  public void setParticulateMater1Level(Boolean)
  public void setParticulateMaterLevel(Boolean)
  public void setPower(Boolean)
  public void setRadonConcentration(Boolean)
  public void setRainRate(Boolean)
  public void setRelativeModulation(Boolean)
  public void setRespiratoryRate(Boolean)
  public void setReturnAirTemperature(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSignalStrength(Boolean)
  public void setSmokeDensity(Boolean)
  public void setSoilHumidity(Boolean)
  public void setSoilReactivity(Boolean)
  public void setSoilSalinity(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setSuctionLinePressure(Boolean)
  public void setSulferDioxideLevel(Boolean)
  public void setSupplyAirTemperature(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVocLevel(Boolean)
  public void setVoltage(Boolean)
  public void setWaterAcidity(Boolean)
  public void setWaterChlorineLevel(Boolean)
  public void setWaterFlow(Boolean)
  public void setWaterOxidationPotential(Boolean)
  public void setWaterPressure(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationX()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationY()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationZ()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSmokeDensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationX(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationY(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationZ(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSmokeDensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAccelerationX()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAccelerationY()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAccelerationZ()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSignalStrength()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSmokeDensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getWaterFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getWaterPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAccelerationX(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAccelerationY(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAccelerationZ(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSignalStrength(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSmokeDensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setWaterFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setWaterPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setWeight(Boolean)
  public Boolean super$8$getAccelerationX()
  public Boolean super$8$getAccelerationY()
  public Boolean super$8$getAccelerationZ()
  public Boolean super$8$getAirFlow()
  public Boolean super$8$getAirTemperature()
  public Boolean super$8$getAnglePosition()
  public Boolean super$8$getAtmosphericPressure()
  public Boolean super$8$getBarometricPressure()
  public Boolean super$8$getBloodPressure()
  public Boolean super$8$getBodyMass()
  public Boolean super$8$getBodyMassIndex()
  public Boolean super$8$getBoneMass()
  public String super$8$getCMD()
  public Boolean super$8$getCarbonDioxideLevel()
  public Boolean super$8$getCarbonMonoxideLevel()
  public Boolean super$8$getCurrent()
  public Boolean super$8$getDewPoint()
  public Boolean super$8$getDirection()
  public Boolean super$8$getDistance()
  public Boolean super$8$getElectricalConductivity()
  public Boolean super$8$getElectricalResistivity()
  public Boolean super$8$getFatMass()
  public Boolean super$8$getFormaldehydeLevel()
  public Boolean super$8$getFrequency()
  public Boolean super$8$getGeneralPurposeValue()
  public Boolean super$8$getHeartRate()
  public Boolean super$8$getHumidity()
  public Boolean super$8$getLoudness()
  public Boolean super$8$getLuminance()
  public Boolean super$8$getMetabolicBasis()
  public Boolean super$8$getMethaneLevel()
  public Boolean super$8$getMoisture()
  public Boolean super$8$getMuscleMass()
  public Boolean super$8$getParticulateMater10Level()
  public Boolean super$8$getParticulateMaterLevel()
  public List super$8$getPayload()
  public Boolean super$8$getPower()
  public Boolean super$8$getRadonConcentration()
  public Boolean super$8$getRainRate()
  public Boolean super$8$getRespiratoryRate()
  public Boolean super$8$getRotation()
  public Boolean super$8$getSeismicIntensity()
  public Boolean super$8$getSeismicMagnitude()
  public Boolean super$8$getSignalStrength()
  public Boolean super$8$getSmokeDensity()
  public Boolean super$8$getSoilHumidity()
  public Boolean super$8$getSoilReactivity()
  public Boolean super$8$getSoilSalinity()
  public Boolean super$8$getSoilTemperature()
  public Boolean super$8$getSolarRadiation()
  public Boolean super$8$getTankCapacity()
  public Boolean super$8$getTargetTemperature()
  public Boolean super$8$getTideLevel()
  public Boolean super$8$getTime()
  public Boolean super$8$getUltraviolet()
  public Boolean super$8$getVelocity()
  public Boolean super$8$getVocLevel()
  public Boolean super$8$getVoltage()
  public Boolean super$8$getWaterFlow()
  public Boolean super$8$getWaterPressure()
  public Boolean super$8$getWaterTemperature()
  public Boolean super$8$getWeight()
  public void super$8$setAccelerationX(Boolean)
  public void super$8$setAccelerationY(Boolean)
  public void super$8$setAccelerationZ(Boolean)
  public void super$8$setAirFlow(Boolean)
  public void super$8$setAirTemperature(Boolean)
  public void super$8$setAnglePosition(Boolean)
  public void super$8$setAtmosphericPressure(Boolean)
  public void super$8$setBarometricPressure(Boolean)
  public void super$8$setBloodPressure(Boolean)
  public void super$8$setBodyMass(Boolean)
  public void super$8$setBodyMassIndex(Boolean)
  public void super$8$setBoneMass(Boolean)
  public void super$8$setCarbonDioxideLevel(Boolean)
  public void super$8$setCarbonMonoxideLevel(Boolean)
  public void super$8$setCurrent(Boolean)
  public void super$8$setDewPoint(Boolean)
  public void super$8$setDirection(Boolean)
  public void super$8$setDistance(Boolean)
  public void super$8$setElectricalConductivity(Boolean)
  public void super$8$setElectricalResistivity(Boolean)
  public void super$8$setFatMass(Boolean)
  public void super$8$setFormaldehydeLevel(Boolean)
  public void super$8$setFrequency(Boolean)
  public void super$8$setGeneralPurposeValue(Boolean)
  public void super$8$setHeartRate(Boolean)
  public void super$8$setHumidity(Boolean)
  public void super$8$setLoudness(Boolean)
  public void super$8$setLuminance(Boolean)
  public void super$8$setMetabolicBasis(Boolean)
  public void super$8$setMethaneLevel(Boolean)
  public void super$8$setMoisture(Boolean)
  public void super$8$setMuscleMass(Boolean)
  public void super$8$setParticulateMater10Level(Boolean)
  public void super$8$setParticulateMaterLevel(Boolean)
  public void super$8$setPower(Boolean)
  public void super$8$setRadonConcentration(Boolean)
  public void super$8$setRainRate(Boolean)
  public void super$8$setRespiratoryRate(Boolean)
  public void super$8$setRotation(Boolean)
  public void super$8$setSeismicIntensity(Boolean)
  public void super$8$setSeismicMagnitude(Boolean)
  public void super$8$setSignalStrength(Boolean)
  public void super$8$setSmokeDensity(Boolean)
  public void super$8$setSoilHumidity(Boolean)
  public void super$8$setSoilReactivity(Boolean)
  public void super$8$setSoilSalinity(Boolean)
  public void super$8$setSoilTemperature(Boolean)
  public void super$8$setSolarRadiation(Boolean)
  public void super$8$setTankCapacity(Boolean)
  public void super$8$setTargetTemperature(Boolean)
  public void super$8$setTideLevel(Boolean)
  public void super$8$setTime(Boolean)
  public void super$8$setUltraviolet(Boolean)
  public void super$8$setVelocity(Boolean)
  public void super$8$setVocLevel(Boolean)
  public void super$8$setVoltage(Boolean)
  public void super$8$setWaterFlow(Boolean)
  public void super$8$setWaterPressure(Boolean)
  public void super$8$setWaterTemperature(Boolean)
  public void super$8$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv11.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccelerationX()
  public Boolean getAccelerationY()
  public Boolean getAccelerationZ()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAmmoniaLevel()
  public Boolean getAnglePosition()
  public Boolean getAppliedForce()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public Boolean getBloodPressure()
  public Boolean getBodyMass()
  public Boolean getBodyMassIndex()
  public Boolean getBoilerWaterTemperature()
  public Boolean getBoneMass()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Boolean getCarbonMonoxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCondenserCoilTemperature()
  public Boolean getCurrent()
  public Boolean getDefrostTemperature()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDischargeLinePressure()
  public Boolean getDischargeLineTemperature()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getEvaporatorCoilTemperature()
  public Boolean getExhaustTemperature()
  public Boolean getFatMass()
  public Boolean getFormaldehydeLevel()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHeartRate()
  public Boolean getHeartRateRatio()
  public Boolean getHotWaterTemperature()
  public Boolean getHumidity()
  public Boolean getLeadLevel()
  public Boolean getLiquidLineTemperature()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMetabolicBasis()
  public Boolean getMethaneLevel()
  public Boolean getMoisture()
  public Boolean getMotionDirection()
  public Boolean getMuscleMass()
  public Boolean getNitrogenDioxideLevel()
  public Boolean getOutsideTemperature()
  public Boolean getOzoneLevel()
  public Boolean getParticulateMater10Level()
  public Boolean getParticulateMater1Level()
  public Boolean getParticulateMaterLevel()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRadonConcentration()
  public Boolean getRainRate()
  public Boolean getRelativeModulation()
  public Boolean getRespiratoryRate()
  public Boolean getReturnAirTemperature()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSignalStrength()
  public Boolean getSmokeDensity()
  public Boolean getSoilHumidity()
  public Boolean getSoilReactivity()
  public Boolean getSoilSalinity()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getSuctionLinePressure()
  public Boolean getSulferDioxideLevel()
  public Boolean getSupplyAirTemperature()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVocLevel()
  public Boolean getVoltage()
  public Boolean getWaterAcidity()
  public Boolean getWaterChlorineLevel()
  public Boolean getWaterFlow()
  public Boolean getWaterOxidationPotential()
  public Boolean getWaterPressure()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAccelerationX(Boolean)
  public void setAccelerationY(Boolean)
  public void setAccelerationZ(Boolean)
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAmmoniaLevel(Boolean)
  public void setAnglePosition(Boolean)
  public void setAppliedForce(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setBloodPressure(Boolean)
  public void setBodyMass(Boolean)
  public void setBodyMassIndex(Boolean)
  public void setBoilerWaterTemperature(Boolean)
  public void setBoneMass(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCarbonMonoxideLevel(Boolean)
  public void setCondenserCoilTemperature(Boolean)
  public void setCurrent(Boolean)
  public void setDefrostTemperature(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDischargeLinePressure(Boolean)
  public void setDischargeLineTemperature(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setEvaporatorCoilTemperature(Boolean)
  public void setExhaustTemperature(Boolean)
  public void setFatMass(Boolean)
  public void setFormaldehydeLevel(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHeartRate(Boolean)
  public void setHeartRateRatio(Boolean)
  public void setHotWaterTemperature(Boolean)
  public void setHumidity(Boolean)
  public void setLeadLevel(Boolean)
  public void setLiquidLineTemperature(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMetabolicBasis(Boolean)
  public void setMethaneLevel(Boolean)
  public void setMoisture(Boolean)
  public void setMotionDirection(Boolean)
  public void setMuscleMass(Boolean)
  public void setNitrogenDioxideLevel(Boolean)
  public void setOutsideTemperature(Boolean)
  public void setOzoneLevel(Boolean)
  public void setParticulateMater10Level(Boolean)
  public void setParticulateMater1Level(Boolean)
  public void setParticulateMaterLevel(Boolean)
  public void setPower(Boolean)
  public void setRadonConcentration(Boolean)
  public void setRainRate(Boolean)
  public void setRelativeModulation(Boolean)
  public void setRespiratoryRate(Boolean)
  public void setReturnAirTemperature(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSignalStrength(Boolean)
  public void setSmokeDensity(Boolean)
  public void setSoilHumidity(Boolean)
  public void setSoilReactivity(Boolean)
  public void setSoilSalinity(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setSuctionLinePressure(Boolean)
  public void setSulferDioxideLevel(Boolean)
  public void setSupplyAirTemperature(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVocLevel(Boolean)
  public void setVoltage(Boolean)
  public void setWaterAcidity(Boolean)
  public void setWaterChlorineLevel(Boolean)
  public void setWaterFlow(Boolean)
  public void setWaterOxidationPotential(Boolean)
  public void setWaterPressure(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationX()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationY()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAccelerationZ()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSmokeDensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationX(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationY(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAccelerationZ(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSmokeDensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport.super$6$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAccelerationX()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAccelerationY()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAccelerationZ()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSignalStrength()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSmokeDensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getWaterFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getWaterPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAccelerationX(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAccelerationY(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAccelerationZ(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSignalStrength(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSmokeDensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setWaterFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setWaterPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv10.SensorMultilevelSupportedSensorReport.super$7$setWeight(Boolean)
  public Boolean super$8$getAccelerationX()
  public Boolean super$8$getAccelerationY()
  public Boolean super$8$getAccelerationZ()
  public Boolean super$8$getAirFlow()
  public Boolean super$8$getAirTemperature()
  public Boolean super$8$getAnglePosition()
  public Boolean super$8$getAtmosphericPressure()
  public Boolean super$8$getBarometricPressure()
  public Boolean super$8$getBloodPressure()
  public Boolean super$8$getBodyMass()
  public Boolean super$8$getBodyMassIndex()
  public Boolean super$8$getBoneMass()
  public String super$8$getCMD()
  public Boolean super$8$getCarbonDioxideLevel()
  public Boolean super$8$getCarbonMonoxideLevel()
  public Boolean super$8$getCurrent()
  public Boolean super$8$getDewPoint()
  public Boolean super$8$getDirection()
  public Boolean super$8$getDistance()
  public Boolean super$8$getElectricalConductivity()
  public Boolean super$8$getElectricalResistivity()
  public Boolean super$8$getFatMass()
  public Boolean super$8$getFormaldehydeLevel()
  public Boolean super$8$getFrequency()
  public Boolean super$8$getGeneralPurposeValue()
  public Boolean super$8$getHeartRate()
  public Boolean super$8$getHumidity()
  public Boolean super$8$getLoudness()
  public Boolean super$8$getLuminance()
  public Boolean super$8$getMetabolicBasis()
  public Boolean super$8$getMethaneLevel()
  public Boolean super$8$getMoisture()
  public Boolean super$8$getMuscleMass()
  public Boolean super$8$getParticulateMater10Level()
  public Boolean super$8$getParticulateMaterLevel()
  public List super$8$getPayload()
  public Boolean super$8$getPower()
  public Boolean super$8$getRadonConcentration()
  public Boolean super$8$getRainRate()
  public Boolean super$8$getRespiratoryRate()
  public Boolean super$8$getRotation()
  public Boolean super$8$getSeismicIntensity()
  public Boolean super$8$getSeismicMagnitude()
  public Boolean super$8$getSignalStrength()
  public Boolean super$8$getSmokeDensity()
  public Boolean super$8$getSoilHumidity()
  public Boolean super$8$getSoilReactivity()
  public Boolean super$8$getSoilSalinity()
  public Boolean super$8$getSoilTemperature()
  public Boolean super$8$getSolarRadiation()
  public Boolean super$8$getTankCapacity()
  public Boolean super$8$getTargetTemperature()
  public Boolean super$8$getTideLevel()
  public Boolean super$8$getTime()
  public Boolean super$8$getUltraviolet()
  public Boolean super$8$getVelocity()
  public Boolean super$8$getVocLevel()
  public Boolean super$8$getVoltage()
  public Boolean super$8$getWaterFlow()
  public Boolean super$8$getWaterPressure()
  public Boolean super$8$getWaterTemperature()
  public Boolean super$8$getWeight()
  public void super$8$setAccelerationX(Boolean)
  public void super$8$setAccelerationY(Boolean)
  public void super$8$setAccelerationZ(Boolean)
  public void super$8$setAirFlow(Boolean)
  public void super$8$setAirTemperature(Boolean)
  public void super$8$setAnglePosition(Boolean)
  public void super$8$setAtmosphericPressure(Boolean)
  public void super$8$setBarometricPressure(Boolean)
  public void super$8$setBloodPressure(Boolean)
  public void super$8$setBodyMass(Boolean)
  public void super$8$setBodyMassIndex(Boolean)
  public void super$8$setBoneMass(Boolean)
  public void super$8$setCarbonDioxideLevel(Boolean)
  public void super$8$setCarbonMonoxideLevel(Boolean)
  public void super$8$setCurrent(Boolean)
  public void super$8$setDewPoint(Boolean)
  public void super$8$setDirection(Boolean)
  public void super$8$setDistance(Boolean)
  public void super$8$setElectricalConductivity(Boolean)
  public void super$8$setElectricalResistivity(Boolean)
  public void super$8$setFatMass(Boolean)
  public void super$8$setFormaldehydeLevel(Boolean)
  public void super$8$setFrequency(Boolean)
  public void super$8$setGeneralPurposeValue(Boolean)
  public void super$8$setHeartRate(Boolean)
  public void super$8$setHumidity(Boolean)
  public void super$8$setLoudness(Boolean)
  public void super$8$setLuminance(Boolean)
  public void super$8$setMetabolicBasis(Boolean)
  public void super$8$setMethaneLevel(Boolean)
  public void super$8$setMoisture(Boolean)
  public void super$8$setMuscleMass(Boolean)
  public void super$8$setParticulateMater10Level(Boolean)
  public void super$8$setParticulateMaterLevel(Boolean)
  public void super$8$setPower(Boolean)
  public void super$8$setRadonConcentration(Boolean)
  public void super$8$setRainRate(Boolean)
  public void super$8$setRespiratoryRate(Boolean)
  public void super$8$setRotation(Boolean)
  public void super$8$setSeismicIntensity(Boolean)
  public void super$8$setSeismicMagnitude(Boolean)
  public void super$8$setSignalStrength(Boolean)
  public void super$8$setSmokeDensity(Boolean)
  public void super$8$setSoilHumidity(Boolean)
  public void super$8$setSoilReactivity(Boolean)
  public void super$8$setSoilSalinity(Boolean)
  public void super$8$setSoilTemperature(Boolean)
  public void super$8$setSolarRadiation(Boolean)
  public void super$8$setTankCapacity(Boolean)
  public void super$8$setTargetTemperature(Boolean)
  public void super$8$setTideLevel(Boolean)
  public void super$8$setTime(Boolean)
  public void super$8$setUltraviolet(Boolean)
  public void super$8$setVelocity(Boolean)
  public void super$8$setVocLevel(Boolean)
  public void super$8$setVoltage(Boolean)
  public void super$8$setWaterFlow(Boolean)
  public void super$8$setWaterPressure(Boolean)
  public void super$8$setWaterTemperature(Boolean)
  public void super$8$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv2.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv2.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv2.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv2.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv3.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv3.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv3.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv3.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv4.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv4.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv4.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv4.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short getScale()
  public Short getSensorType()
  public void setScale(Short)
  public void setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short getScale()
  public Short getSensorType()
  public void setScale(Short)
  public void setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short getSensorType()
  public void setSensorType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short getSensorType()
  public void setSensorType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short getScaleBitMask()
  public Short getSensorType()
  public void setScaleBitMask(Short)
  public void setSensorType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public Short getScaleBitMask()
  public Short getSensorType()
  public void setScaleBitMask(Short)
  public void setSensorType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getGeneralPurposeValue()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMoisture()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRainRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTideLevel()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVoltage()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMoisture(Boolean)
  public void setPower(Boolean)
  public void setRainRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTideLevel(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVoltage(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getGeneralPurposeValue()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMoisture()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRainRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTideLevel()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVoltage()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMoisture(Boolean)
  public void setPower(Boolean)
  public void setRainRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTideLevel(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVoltage(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMoisture()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRainRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVoltage()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMoisture(Boolean)
  public void setPower(Boolean)
  public void setRainRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVoltage(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean super$3$getAirFlow()
  public Boolean super$3$getAirTemperature()
  public Boolean super$3$getAnglePosition()
  public Boolean super$3$getAtmosphericPressure()
  public Boolean super$3$getBarometricPressure()
  public String super$3$getCMD()
  public Boolean super$3$getCarbonDioxideLevel()
  public Boolean super$3$getCurrent()
  public Boolean super$3$getDewPoint()
  public Boolean super$3$getDirection()
  public Boolean super$3$getDistance()
  public Boolean super$3$getElectricalConductivity()
  public Boolean super$3$getElectricalResistivity()
  public Boolean super$3$getGeneralPurposeValue()
  public Boolean super$3$getHumidity()
  public Boolean super$3$getLoudness()
  public Boolean super$3$getLuminance()
  public Boolean super$3$getMoisture()
  public List super$3$getPayload()
  public Boolean super$3$getPower()
  public Boolean super$3$getRainRate()
  public Boolean super$3$getRotation()
  public Boolean super$3$getSeismicIntensity()
  public Boolean super$3$getSeismicMagnitude()
  public Boolean super$3$getSoilTemperature()
  public Boolean super$3$getSolarRadiation()
  public Boolean super$3$getTankCapacity()
  public Boolean super$3$getTideLevel()
  public Boolean super$3$getUltraviolet()
  public Boolean super$3$getVelocity()
  public Boolean super$3$getVoltage()
  public Boolean super$3$getWaterTemperature()
  public Boolean super$3$getWeight()
  public void super$3$setAirFlow(Boolean)
  public void super$3$setAirTemperature(Boolean)
  public void super$3$setAnglePosition(Boolean)
  public void super$3$setAtmosphericPressure(Boolean)
  public void super$3$setBarometricPressure(Boolean)
  public void super$3$setCarbonDioxideLevel(Boolean)
  public void super$3$setCurrent(Boolean)
  public void super$3$setDewPoint(Boolean)
  public void super$3$setDirection(Boolean)
  public void super$3$setDistance(Boolean)
  public void super$3$setElectricalConductivity(Boolean)
  public void super$3$setElectricalResistivity(Boolean)
  public void super$3$setGeneralPurposeValue(Boolean)
  public void super$3$setHumidity(Boolean)
  public void super$3$setLoudness(Boolean)
  public void super$3$setLuminance(Boolean)
  public void super$3$setMoisture(Boolean)
  public void super$3$setPower(Boolean)
  public void super$3$setRainRate(Boolean)
  public void super$3$setRotation(Boolean)
  public void super$3$setSeismicIntensity(Boolean)
  public void super$3$setSeismicMagnitude(Boolean)
  public void super$3$setSoilTemperature(Boolean)
  public void super$3$setSolarRadiation(Boolean)
  public void super$3$setTankCapacity(Boolean)
  public void super$3$setTideLevel(Boolean)
  public void super$3$setUltraviolet(Boolean)
  public void super$3$setVelocity(Boolean)
  public void super$3$setVoltage(Boolean)
  public void super$3$setWaterTemperature(Boolean)
  public void super$3$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMoisture()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRainRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVoltage()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMoisture(Boolean)
  public void setPower(Boolean)
  public void setRainRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVoltage(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean super$3$getAirFlow()
  public Boolean super$3$getAirTemperature()
  public Boolean super$3$getAnglePosition()
  public Boolean super$3$getAtmosphericPressure()
  public Boolean super$3$getBarometricPressure()
  public String super$3$getCMD()
  public Boolean super$3$getCarbonDioxideLevel()
  public Boolean super$3$getCurrent()
  public Boolean super$3$getDewPoint()
  public Boolean super$3$getDirection()
  public Boolean super$3$getDistance()
  public Boolean super$3$getElectricalConductivity()
  public Boolean super$3$getElectricalResistivity()
  public Boolean super$3$getGeneralPurposeValue()
  public Boolean super$3$getHumidity()
  public Boolean super$3$getLoudness()
  public Boolean super$3$getLuminance()
  public Boolean super$3$getMoisture()
  public List super$3$getPayload()
  public Boolean super$3$getPower()
  public Boolean super$3$getRainRate()
  public Boolean super$3$getRotation()
  public Boolean super$3$getSeismicIntensity()
  public Boolean super$3$getSeismicMagnitude()
  public Boolean super$3$getSoilTemperature()
  public Boolean super$3$getSolarRadiation()
  public Boolean super$3$getTankCapacity()
  public Boolean super$3$getTideLevel()
  public Boolean super$3$getUltraviolet()
  public Boolean super$3$getVelocity()
  public Boolean super$3$getVoltage()
  public Boolean super$3$getWaterTemperature()
  public Boolean super$3$getWeight()
  public void super$3$setAirFlow(Boolean)
  public void super$3$setAirTemperature(Boolean)
  public void super$3$setAnglePosition(Boolean)
  public void super$3$setAtmosphericPressure(Boolean)
  public void super$3$setBarometricPressure(Boolean)
  public void super$3$setCarbonDioxideLevel(Boolean)
  public void super$3$setCurrent(Boolean)
  public void super$3$setDewPoint(Boolean)
  public void super$3$setDirection(Boolean)
  public void super$3$setDistance(Boolean)
  public void super$3$setElectricalConductivity(Boolean)
  public void super$3$setElectricalResistivity(Boolean)
  public void super$3$setGeneralPurposeValue(Boolean)
  public void super$3$setHumidity(Boolean)
  public void super$3$setLoudness(Boolean)
  public void super$3$setLuminance(Boolean)
  public void super$3$setMoisture(Boolean)
  public void super$3$setPower(Boolean)
  public void super$3$setRainRate(Boolean)
  public void super$3$setRotation(Boolean)
  public void super$3$setSeismicIntensity(Boolean)
  public void super$3$setSeismicMagnitude(Boolean)
  public void super$3$setSoilTemperature(Boolean)
  public void super$3$setSolarRadiation(Boolean)
  public void super$3$setTankCapacity(Boolean)
  public void super$3$setTideLevel(Boolean)
  public void super$3$setUltraviolet(Boolean)
  public void super$3$setVelocity(Boolean)
  public void super$3$setVoltage(Boolean)
  public void super$3$setWaterTemperature(Boolean)
  public void super$3$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public Boolean getBloodPressure()
  public Boolean getBodyMass()
  public Boolean getBodyMassIndex()
  public Boolean getBoneMass()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Boolean getCarbonMonoxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getFatMass()
  public Boolean getFormaldehydeLevel()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHeartRate()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMetabolicBasis()
  public Boolean getMethaneLevel()
  public Boolean getMoisture()
  public Boolean getMuscleMass()
  public Boolean getParticulateMaterLevel()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRadonConcentration()
  public Boolean getRainRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSoilHumidity()
  public Boolean getSoilReactivity()
  public Boolean getSoilSalinity()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVocLevel()
  public Boolean getVoltage()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setBloodPressure(Boolean)
  public void setBodyMass(Boolean)
  public void setBodyMassIndex(Boolean)
  public void setBoneMass(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCarbonMonoxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setFatMass(Boolean)
  public void setFormaldehydeLevel(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHeartRate(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMetabolicBasis(Boolean)
  public void setMethaneLevel(Boolean)
  public void setMoisture(Boolean)
  public void setMuscleMass(Boolean)
  public void setParticulateMaterLevel(Boolean)
  public void setPower(Boolean)
  public void setRadonConcentration(Boolean)
  public void setRainRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSoilHumidity(Boolean)
  public void setSoilReactivity(Boolean)
  public void setSoilSalinity(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVocLevel(Boolean)
  public void setVoltage(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWeight(Boolean)
  public Boolean super$4$getAirFlow()
  public Boolean super$4$getAirTemperature()
  public Boolean super$4$getAnglePosition()
  public Boolean super$4$getAtmosphericPressure()
  public Boolean super$4$getBarometricPressure()
  public String super$4$getCMD()
  public Boolean super$4$getCarbonDioxideLevel()
  public Boolean super$4$getCurrent()
  public Boolean super$4$getDewPoint()
  public Boolean super$4$getDirection()
  public Boolean super$4$getDistance()
  public Boolean super$4$getElectricalConductivity()
  public Boolean super$4$getElectricalResistivity()
  public Boolean super$4$getFrequency()
  public Boolean super$4$getGeneralPurposeValue()
  public Boolean super$4$getHumidity()
  public Boolean super$4$getLoudness()
  public Boolean super$4$getLuminance()
  public Boolean super$4$getMoisture()
  public List super$4$getPayload()
  public Boolean super$4$getPower()
  public Boolean super$4$getRainRate()
  public Boolean super$4$getRotation()
  public Boolean super$4$getSeismicIntensity()
  public Boolean super$4$getSeismicMagnitude()
  public Boolean super$4$getSoilTemperature()
  public Boolean super$4$getSolarRadiation()
  public Boolean super$4$getTankCapacity()
  public Boolean super$4$getTargetTemperature()
  public Boolean super$4$getTideLevel()
  public Boolean super$4$getTime()
  public Boolean super$4$getUltraviolet()
  public Boolean super$4$getVelocity()
  public Boolean super$4$getVoltage()
  public Boolean super$4$getWaterTemperature()
  public Boolean super$4$getWeight()
  public void super$4$setAirFlow(Boolean)
  public void super$4$setAirTemperature(Boolean)
  public void super$4$setAnglePosition(Boolean)
  public void super$4$setAtmosphericPressure(Boolean)
  public void super$4$setBarometricPressure(Boolean)
  public void super$4$setCarbonDioxideLevel(Boolean)
  public void super$4$setCurrent(Boolean)
  public void super$4$setDewPoint(Boolean)
  public void super$4$setDirection(Boolean)
  public void super$4$setDistance(Boolean)
  public void super$4$setElectricalConductivity(Boolean)
  public void super$4$setElectricalResistivity(Boolean)
  public void super$4$setFrequency(Boolean)
  public void super$4$setGeneralPurposeValue(Boolean)
  public void super$4$setHumidity(Boolean)
  public void super$4$setLoudness(Boolean)
  public void super$4$setLuminance(Boolean)
  public void super$4$setMoisture(Boolean)
  public void super$4$setPower(Boolean)
  public void super$4$setRainRate(Boolean)
  public void super$4$setRotation(Boolean)
  public void super$4$setSeismicIntensity(Boolean)
  public void super$4$setSeismicMagnitude(Boolean)
  public void super$4$setSoilTemperature(Boolean)
  public void super$4$setSolarRadiation(Boolean)
  public void super$4$setTankCapacity(Boolean)
  public void super$4$setTargetTemperature(Boolean)
  public void super$4$setTideLevel(Boolean)
  public void super$4$setTime(Boolean)
  public void super$4$setUltraviolet(Boolean)
  public void super$4$setVelocity(Boolean)
  public void super$4$setVoltage(Boolean)
  public void super$4$setWaterTemperature(Boolean)
  public void super$4$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public Boolean getBloodPressure()
  public Boolean getBodyMass()
  public Boolean getBodyMassIndex()
  public Boolean getBoneMass()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Boolean getCarbonMonoxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getFatMass()
  public Boolean getFormaldehydeLevel()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHeartRate()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMetabolicBasis()
  public Boolean getMethaneLevel()
  public Boolean getMoisture()
  public Boolean getMuscleMass()
  public Boolean getParticulateMaterLevel()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRadonConcentration()
  public Boolean getRainRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSoilHumidity()
  public Boolean getSoilReactivity()
  public Boolean getSoilSalinity()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVocLevel()
  public Boolean getVoltage()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setBloodPressure(Boolean)
  public void setBodyMass(Boolean)
  public void setBodyMassIndex(Boolean)
  public void setBoneMass(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCarbonMonoxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setFatMass(Boolean)
  public void setFormaldehydeLevel(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHeartRate(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMetabolicBasis(Boolean)
  public void setMethaneLevel(Boolean)
  public void setMoisture(Boolean)
  public void setMuscleMass(Boolean)
  public void setParticulateMaterLevel(Boolean)
  public void setPower(Boolean)
  public void setRadonConcentration(Boolean)
  public void setRainRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSoilHumidity(Boolean)
  public void setSoilReactivity(Boolean)
  public void setSoilSalinity(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVocLevel(Boolean)
  public void setVoltage(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWeight(Boolean)
  public Boolean super$4$getAirFlow()
  public Boolean super$4$getAirTemperature()
  public Boolean super$4$getAnglePosition()
  public Boolean super$4$getAtmosphericPressure()
  public Boolean super$4$getBarometricPressure()
  public String super$4$getCMD()
  public Boolean super$4$getCarbonDioxideLevel()
  public Boolean super$4$getCurrent()
  public Boolean super$4$getDewPoint()
  public Boolean super$4$getDirection()
  public Boolean super$4$getDistance()
  public Boolean super$4$getElectricalConductivity()
  public Boolean super$4$getElectricalResistivity()
  public Boolean super$4$getFrequency()
  public Boolean super$4$getGeneralPurposeValue()
  public Boolean super$4$getHumidity()
  public Boolean super$4$getLoudness()
  public Boolean super$4$getLuminance()
  public Boolean super$4$getMoisture()
  public List super$4$getPayload()
  public Boolean super$4$getPower()
  public Boolean super$4$getRainRate()
  public Boolean super$4$getRotation()
  public Boolean super$4$getSeismicIntensity()
  public Boolean super$4$getSeismicMagnitude()
  public Boolean super$4$getSoilTemperature()
  public Boolean super$4$getSolarRadiation()
  public Boolean super$4$getTankCapacity()
  public Boolean super$4$getTargetTemperature()
  public Boolean super$4$getTideLevel()
  public Boolean super$4$getTime()
  public Boolean super$4$getUltraviolet()
  public Boolean super$4$getVelocity()
  public Boolean super$4$getVoltage()
  public Boolean super$4$getWaterTemperature()
  public Boolean super$4$getWeight()
  public void super$4$setAirFlow(Boolean)
  public void super$4$setAirTemperature(Boolean)
  public void super$4$setAnglePosition(Boolean)
  public void super$4$setAtmosphericPressure(Boolean)
  public void super$4$setBarometricPressure(Boolean)
  public void super$4$setCarbonDioxideLevel(Boolean)
  public void super$4$setCurrent(Boolean)
  public void super$4$setDewPoint(Boolean)
  public void super$4$setDirection(Boolean)
  public void super$4$setDistance(Boolean)
  public void super$4$setElectricalConductivity(Boolean)
  public void super$4$setElectricalResistivity(Boolean)
  public void super$4$setFrequency(Boolean)
  public void super$4$setGeneralPurposeValue(Boolean)
  public void super$4$setHumidity(Boolean)
  public void super$4$setLoudness(Boolean)
  public void super$4$setLuminance(Boolean)
  public void super$4$setMoisture(Boolean)
  public void super$4$setPower(Boolean)
  public void super$4$setRainRate(Boolean)
  public void super$4$setRotation(Boolean)
  public void super$4$setSeismicIntensity(Boolean)
  public void super$4$setSeismicMagnitude(Boolean)
  public void super$4$setSoilTemperature(Boolean)
  public void super$4$setSolarRadiation(Boolean)
  public void super$4$setTankCapacity(Boolean)
  public void super$4$setTargetTemperature(Boolean)
  public void super$4$setTideLevel(Boolean)
  public void super$4$setTime(Boolean)
  public void super$4$setUltraviolet(Boolean)
  public void super$4$setVelocity(Boolean)
  public void super$4$setVoltage(Boolean)
  public void super$4$setWaterTemperature(Boolean)
  public void super$4$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccelerationX()
  public Boolean getAccelerationY()
  public Boolean getAccelerationZ()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public Boolean getBloodPressure()
  public Boolean getBodyMass()
  public Boolean getBodyMassIndex()
  public Boolean getBoneMass()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Boolean getCarbonMonoxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getFatMass()
  public Boolean getFormaldehydeLevel()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHeartRate()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMetabolicBasis()
  public Boolean getMethaneLevel()
  public Boolean getMoisture()
  public Boolean getMuscleMass()
  public Boolean getParticulateMaterLevel()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRadonConcentration()
  public Boolean getRainRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSmokeDensity()
  public Boolean getSoilHumidity()
  public Boolean getSoilReactivity()
  public Boolean getSoilSalinity()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVocLevel()
  public Boolean getVoltage()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAccelerationX(Boolean)
  public void setAccelerationY(Boolean)
  public void setAccelerationZ(Boolean)
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setBloodPressure(Boolean)
  public void setBodyMass(Boolean)
  public void setBodyMassIndex(Boolean)
  public void setBoneMass(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCarbonMonoxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setFatMass(Boolean)
  public void setFormaldehydeLevel(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHeartRate(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMetabolicBasis(Boolean)
  public void setMethaneLevel(Boolean)
  public void setMoisture(Boolean)
  public void setMuscleMass(Boolean)
  public void setParticulateMaterLevel(Boolean)
  public void setPower(Boolean)
  public void setRadonConcentration(Boolean)
  public void setRainRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSmokeDensity(Boolean)
  public void setSoilHumidity(Boolean)
  public void setSoilReactivity(Boolean)
  public void setSoilSalinity(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVocLevel(Boolean)
  public void setVoltage(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWeight(Boolean)
  public Boolean super$5$getAirFlow()
  public Boolean super$5$getAirTemperature()
  public Boolean super$5$getAnglePosition()
  public Boolean super$5$getAtmosphericPressure()
  public Boolean super$5$getBarometricPressure()
  public Boolean super$5$getBloodPressure()
  public Boolean super$5$getBodyMass()
  public Boolean super$5$getBodyMassIndex()
  public Boolean super$5$getBoneMass()
  public String super$5$getCMD()
  public Boolean super$5$getCarbonDioxideLevel()
  public Boolean super$5$getCarbonMonoxideLevel()
  public Boolean super$5$getCurrent()
  public Boolean super$5$getDewPoint()
  public Boolean super$5$getDirection()
  public Boolean super$5$getDistance()
  public Boolean super$5$getElectricalConductivity()
  public Boolean super$5$getElectricalResistivity()
  public Boolean super$5$getFatMass()
  public Boolean super$5$getFormaldehydeLevel()
  public Boolean super$5$getFrequency()
  public Boolean super$5$getGeneralPurposeValue()
  public Boolean super$5$getHeartRate()
  public Boolean super$5$getHumidity()
  public Boolean super$5$getLoudness()
  public Boolean super$5$getLuminance()
  public Boolean super$5$getMetabolicBasis()
  public Boolean super$5$getMethaneLevel()
  public Boolean super$5$getMoisture()
  public Boolean super$5$getMuscleMass()
  public Boolean super$5$getParticulateMaterLevel()
  public List super$5$getPayload()
  public Boolean super$5$getPower()
  public Boolean super$5$getRadonConcentration()
  public Boolean super$5$getRainRate()
  public Boolean super$5$getRotation()
  public Boolean super$5$getSeismicIntensity()
  public Boolean super$5$getSeismicMagnitude()
  public Boolean super$5$getSoilHumidity()
  public Boolean super$5$getSoilReactivity()
  public Boolean super$5$getSoilSalinity()
  public Boolean super$5$getSoilTemperature()
  public Boolean super$5$getSolarRadiation()
  public Boolean super$5$getTankCapacity()
  public Boolean super$5$getTargetTemperature()
  public Boolean super$5$getTideLevel()
  public Boolean super$5$getTime()
  public Boolean super$5$getUltraviolet()
  public Boolean super$5$getVelocity()
  public Boolean super$5$getVocLevel()
  public Boolean super$5$getVoltage()
  public Boolean super$5$getWaterTemperature()
  public Boolean super$5$getWeight()
  public void super$5$setAirFlow(Boolean)
  public void super$5$setAirTemperature(Boolean)
  public void super$5$setAnglePosition(Boolean)
  public void super$5$setAtmosphericPressure(Boolean)
  public void super$5$setBarometricPressure(Boolean)
  public void super$5$setBloodPressure(Boolean)
  public void super$5$setBodyMass(Boolean)
  public void super$5$setBodyMassIndex(Boolean)
  public void super$5$setBoneMass(Boolean)
  public void super$5$setCarbonDioxideLevel(Boolean)
  public void super$5$setCarbonMonoxideLevel(Boolean)
  public void super$5$setCurrent(Boolean)
  public void super$5$setDewPoint(Boolean)
  public void super$5$setDirection(Boolean)
  public void super$5$setDistance(Boolean)
  public void super$5$setElectricalConductivity(Boolean)
  public void super$5$setElectricalResistivity(Boolean)
  public void super$5$setFatMass(Boolean)
  public void super$5$setFormaldehydeLevel(Boolean)
  public void super$5$setFrequency(Boolean)
  public void super$5$setGeneralPurposeValue(Boolean)
  public void super$5$setHeartRate(Boolean)
  public void super$5$setHumidity(Boolean)
  public void super$5$setLoudness(Boolean)
  public void super$5$setLuminance(Boolean)
  public void super$5$setMetabolicBasis(Boolean)
  public void super$5$setMethaneLevel(Boolean)
  public void super$5$setMoisture(Boolean)
  public void super$5$setMuscleMass(Boolean)
  public void super$5$setParticulateMaterLevel(Boolean)
  public void super$5$setPower(Boolean)
  public void super$5$setRadonConcentration(Boolean)
  public void super$5$setRainRate(Boolean)
  public void super$5$setRotation(Boolean)
  public void super$5$setSeismicIntensity(Boolean)
  public void super$5$setSeismicMagnitude(Boolean)
  public void super$5$setSoilHumidity(Boolean)
  public void super$5$setSoilReactivity(Boolean)
  public void super$5$setSoilSalinity(Boolean)
  public void super$5$setSoilTemperature(Boolean)
  public void super$5$setSolarRadiation(Boolean)
  public void super$5$setTankCapacity(Boolean)
  public void super$5$setTargetTemperature(Boolean)
  public void super$5$setTideLevel(Boolean)
  public void super$5$setTime(Boolean)
  public void super$5$setUltraviolet(Boolean)
  public void super$5$setVelocity(Boolean)
  public void super$5$setVocLevel(Boolean)
  public void super$5$setVoltage(Boolean)
  public void super$5$setWaterTemperature(Boolean)
  public void super$5$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccelerationX()
  public Boolean getAccelerationY()
  public Boolean getAccelerationZ()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public Boolean getBloodPressure()
  public Boolean getBodyMass()
  public Boolean getBodyMassIndex()
  public Boolean getBoneMass()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Boolean getCarbonMonoxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getFatMass()
  public Boolean getFormaldehydeLevel()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHeartRate()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMetabolicBasis()
  public Boolean getMethaneLevel()
  public Boolean getMoisture()
  public Boolean getMuscleMass()
  public Boolean getParticulateMaterLevel()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRadonConcentration()
  public Boolean getRainRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSmokeDensity()
  public Boolean getSoilHumidity()
  public Boolean getSoilReactivity()
  public Boolean getSoilSalinity()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVocLevel()
  public Boolean getVoltage()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAccelerationX(Boolean)
  public void setAccelerationY(Boolean)
  public void setAccelerationZ(Boolean)
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setBloodPressure(Boolean)
  public void setBodyMass(Boolean)
  public void setBodyMassIndex(Boolean)
  public void setBoneMass(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCarbonMonoxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setFatMass(Boolean)
  public void setFormaldehydeLevel(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHeartRate(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMetabolicBasis(Boolean)
  public void setMethaneLevel(Boolean)
  public void setMoisture(Boolean)
  public void setMuscleMass(Boolean)
  public void setParticulateMaterLevel(Boolean)
  public void setPower(Boolean)
  public void setRadonConcentration(Boolean)
  public void setRainRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSmokeDensity(Boolean)
  public void setSoilHumidity(Boolean)
  public void setSoilReactivity(Boolean)
  public void setSoilSalinity(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVocLevel(Boolean)
  public void setVoltage(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWeight(Boolean)
  public Boolean super$5$getAirFlow()
  public Boolean super$5$getAirTemperature()
  public Boolean super$5$getAnglePosition()
  public Boolean super$5$getAtmosphericPressure()
  public Boolean super$5$getBarometricPressure()
  public Boolean super$5$getBloodPressure()
  public Boolean super$5$getBodyMass()
  public Boolean super$5$getBodyMassIndex()
  public Boolean super$5$getBoneMass()
  public String super$5$getCMD()
  public Boolean super$5$getCarbonDioxideLevel()
  public Boolean super$5$getCarbonMonoxideLevel()
  public Boolean super$5$getCurrent()
  public Boolean super$5$getDewPoint()
  public Boolean super$5$getDirection()
  public Boolean super$5$getDistance()
  public Boolean super$5$getElectricalConductivity()
  public Boolean super$5$getElectricalResistivity()
  public Boolean super$5$getFatMass()
  public Boolean super$5$getFormaldehydeLevel()
  public Boolean super$5$getFrequency()
  public Boolean super$5$getGeneralPurposeValue()
  public Boolean super$5$getHeartRate()
  public Boolean super$5$getHumidity()
  public Boolean super$5$getLoudness()
  public Boolean super$5$getLuminance()
  public Boolean super$5$getMetabolicBasis()
  public Boolean super$5$getMethaneLevel()
  public Boolean super$5$getMoisture()
  public Boolean super$5$getMuscleMass()
  public Boolean super$5$getParticulateMaterLevel()
  public List super$5$getPayload()
  public Boolean super$5$getPower()
  public Boolean super$5$getRadonConcentration()
  public Boolean super$5$getRainRate()
  public Boolean super$5$getRotation()
  public Boolean super$5$getSeismicIntensity()
  public Boolean super$5$getSeismicMagnitude()
  public Boolean super$5$getSoilHumidity()
  public Boolean super$5$getSoilReactivity()
  public Boolean super$5$getSoilSalinity()
  public Boolean super$5$getSoilTemperature()
  public Boolean super$5$getSolarRadiation()
  public Boolean super$5$getTankCapacity()
  public Boolean super$5$getTargetTemperature()
  public Boolean super$5$getTideLevel()
  public Boolean super$5$getTime()
  public Boolean super$5$getUltraviolet()
  public Boolean super$5$getVelocity()
  public Boolean super$5$getVocLevel()
  public Boolean super$5$getVoltage()
  public Boolean super$5$getWaterTemperature()
  public Boolean super$5$getWeight()
  public void super$5$setAirFlow(Boolean)
  public void super$5$setAirTemperature(Boolean)
  public void super$5$setAnglePosition(Boolean)
  public void super$5$setAtmosphericPressure(Boolean)
  public void super$5$setBarometricPressure(Boolean)
  public void super$5$setBloodPressure(Boolean)
  public void super$5$setBodyMass(Boolean)
  public void super$5$setBodyMassIndex(Boolean)
  public void super$5$setBoneMass(Boolean)
  public void super$5$setCarbonDioxideLevel(Boolean)
  public void super$5$setCarbonMonoxideLevel(Boolean)
  public void super$5$setCurrent(Boolean)
  public void super$5$setDewPoint(Boolean)
  public void super$5$setDirection(Boolean)
  public void super$5$setDistance(Boolean)
  public void super$5$setElectricalConductivity(Boolean)
  public void super$5$setElectricalResistivity(Boolean)
  public void super$5$setFatMass(Boolean)
  public void super$5$setFormaldehydeLevel(Boolean)
  public void super$5$setFrequency(Boolean)
  public void super$5$setGeneralPurposeValue(Boolean)
  public void super$5$setHeartRate(Boolean)
  public void super$5$setHumidity(Boolean)
  public void super$5$setLoudness(Boolean)
  public void super$5$setLuminance(Boolean)
  public void super$5$setMetabolicBasis(Boolean)
  public void super$5$setMethaneLevel(Boolean)
  public void super$5$setMoisture(Boolean)
  public void super$5$setMuscleMass(Boolean)
  public void super$5$setParticulateMaterLevel(Boolean)
  public void super$5$setPower(Boolean)
  public void super$5$setRadonConcentration(Boolean)
  public void super$5$setRainRate(Boolean)
  public void super$5$setRotation(Boolean)
  public void super$5$setSeismicIntensity(Boolean)
  public void super$5$setSeismicMagnitude(Boolean)
  public void super$5$setSoilHumidity(Boolean)
  public void super$5$setSoilReactivity(Boolean)
  public void super$5$setSoilSalinity(Boolean)
  public void super$5$setSoilTemperature(Boolean)
  public void super$5$setSolarRadiation(Boolean)
  public void super$5$setTankCapacity(Boolean)
  public void super$5$setTargetTemperature(Boolean)
  public void super$5$setTideLevel(Boolean)
  public void super$5$setTime(Boolean)
  public void super$5$setUltraviolet(Boolean)
  public void super$5$setVelocity(Boolean)
  public void super$5$setVocLevel(Boolean)
  public void super$5$setVoltage(Boolean)
  public void super$5$setWaterTemperature(Boolean)
  public void super$5$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getScale()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelGet.super$2$getPayload()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getCMD()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelGet.super$3$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getPrecision()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScale()
  public BigDecimal hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getScaledSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorType()
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSensorValue()
  public Short hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.getSize()
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setPrecision(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScale(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setScaledSensorValue(BigDecimal)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorType(Short)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSensorValue(List)
  public void hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.setSize(Short)
  public List hubitat.zwave.commands.sensormultilevelv1.SensorMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedGetScale:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetScale.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedGetSensor:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.getPayload()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedGetSensor.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedScaleReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getPayload()
  public static Short SENSOR_TYPE_ACCELERATION_X_AXIS_V8 = 52
  public static Short SENSOR_TYPE_ACCELERATION_Y_AXIS_V8 = 53
  public static Short SENSOR_TYPE_ACCELERATION_Z_AXIS_V8 = 54
  public static Short SENSOR_TYPE_AIR_FLOW_VERSION_3 = 18
  public static Short SENSOR_TYPE_ANGLE_POSITION_VERSION_4 = 21
  public static Short SENSOR_TYPE_ATMOSPHERIC_PRESSURE_VERSION_2 = 8
  public static Short SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2 = 9
  public static Short SENSOR_TYPE_BASIC_METABOLIC_RATE_BMR_V7 = 50
  public static Short SENSOR_TYPE_BLOOD_PRESSURE_V7 = 45
  public static Short SENSOR_TYPE_BODY_MASS_INDEX_BMI_V7 = 51
  public static Short SENSOR_TYPE_BONE_MASS_V7 = 48
  public static Short SENSOR_TYPE_CARBON_MONOXIDE_CO_LEVEL_V7 = 40
  public static Short SENSOR_TYPE_CO2_LEVEL_VERSION_3 = 17
  public static Short SENSOR_TYPE_CURRENT_VERSION_3 = 16
  public static Short SENSOR_TYPE_DEW_POINT_VERSION_2 = 11
  public static Short SENSOR_TYPE_DIRECTION_VERSION_2 = 7
  public static Short SENSOR_TYPE_DISTANCE_VERSION_3 = 20
  public static Short SENSOR_TYPE_ELECTRICAL_CONDUCTIVITY_V5 = 29
  public static Short SENSOR_TYPE_ELECTRICAL_RESISTIVITY_V5 = 28
  public static Short SENSOR_TYPE_FAT_MASS_V7 = 47
  public static Short SENSOR_TYPE_FORMALDEHYDE_CH2O_LEVEL_V7 = 36
  public static Short SENSOR_TYPE_GENERAL_PURPOSE_VALUE_VERSION_1 = 2
  public static Short SENSOR_TYPE_HEART_RATE_V7 = 44
  public static Short SENSOR_TYPE_LOUDNESS_V5 = 30
  public static Short SENSOR_TYPE_LUMINANCE_VERSION_1 = 3
  public static Short SENSOR_TYPE_METHANE_DENSITY_V7 = 38
  public static Short SENSOR_TYPE_MOISTURE_V5 = 31
  public static Short SENSOR_TYPE_MUSCLE_MASS_V7 = 46
  public static Short SENSOR_TYPE_PARTICULATE_MATTER_V7 = 35
  public static Short SENSOR_TYPE_POWER_VERSION_2 = 4
  public static Short SENSOR_TYPE_RADON_CONCENTRATION_V7 = 37
  public static Short SENSOR_TYPE_RAIN_RATE_VERSION_2 = 12
  public static Short SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2 = 5
  public static Short SENSOR_TYPE_REPORT_FREQUENCY_V6 = 32
  public static Short SENSOR_TYPE_RF_SIGNAL_STRENGTH_V9 = 58
  public static Short SENSOR_TYPE_ROTATION_V5 = 22
  public static Short SENSOR_TYPE_SEISMIC_INTENSITY_V5 = 25
  public static Short SENSOR_TYPE_SEISMIC_MAGNITUDE_V5 = 26
  public static Short SENSOR_TYPE_SMOKE_DENSITY_V8 = 55
  public static Short SENSOR_TYPE_SOIL_HUMIDITY_V7 = 41
  public static Short SENSOR_TYPE_SOIL_REACTIVITY_V7 = 42
  public static Short SENSOR_TYPE_SOIL_SALINITY_V7 = 43
  public static Short SENSOR_TYPE_SOIL_TEMPERATURE_V5 = 24
  public static Short SENSOR_TYPE_SOLAR_RADIATION_VERSION_2 = 10
  public static Short SENSOR_TYPE_TANK_CAPACITY_VERSION_3 = 19
  public static Short SENSOR_TYPE_TARGET_TEMPERATURE_V6 = 34
  public static Short SENSOR_TYPE_TEMPERATURE_VERSION_1 = 1
  public static Short SENSOR_TYPE_TIDE_LEVEL_VERSION_2 = 13
  public static Short SENSOR_TYPE_TOTAL_BODY_WATER_TBW_V7 = 49
  public static Short SENSOR_TYPE_ULTRAVIOLET_V5 = 27
  public static Short SENSOR_TYPE_VELOCITY_VERSION_2 = 6
  public static Short SENSOR_TYPE_VOLATILE_ORGANIC_COMPOUND_V7 = 39
  public static Short SENSOR_TYPE_VOLTAGE_VERSION_3 = 15
  public static Short SENSOR_TYPE_WATER_FLOW_V9 = 56
  public static Short SENSOR_TYPE_WATER_PRESSURE_V9 = 57
  public static Short SENSOR_TYPE_WATER_TEMPERATURE_V5 = 23
  public static Short SENSOR_TYPE_WEIGHT_VERSION_3 = 14
  public static Short SENSOR_TYPE__TIME_V6 = 33
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getScaleBitMask()
  public Short hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.getSensorType()
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setScaleBitMask(Short)
  public void hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.setSensorType(Short)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedScaleReport.super$2$getPayload()
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccelerationX()
  public Boolean getAccelerationY()
  public Boolean getAccelerationZ()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public Boolean getBloodPressure()
  public Boolean getBodyMass()
  public Boolean getBodyMassIndex()
  public Boolean getBoneMass()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Boolean getCarbonMonoxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getFatMass()
  public Boolean getFormaldehydeLevel()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHeartRate()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMetabolicBasis()
  public Boolean getMethaneLevel()
  public Boolean getMoisture()
  public Boolean getMuscleMass()
  public Boolean getParticulateMaterLevel()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRadonConcentration()
  public Boolean getRainRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSignalStrength()
  public Boolean getSmokeDensity()
  public Boolean getSoilHumidity()
  public Boolean getSoilReactivity()
  public Boolean getSoilSalinity()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVocLevel()
  public Boolean getVoltage()
  public Boolean getWaterFlow()
  public Boolean getWaterPressure()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAccelerationX(Boolean)
  public void setAccelerationY(Boolean)
  public void setAccelerationZ(Boolean)
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setBloodPressure(Boolean)
  public void setBodyMass(Boolean)
  public void setBodyMassIndex(Boolean)
  public void setBoneMass(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCarbonMonoxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setFatMass(Boolean)
  public void setFormaldehydeLevel(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHeartRate(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMetabolicBasis(Boolean)
  public void setMethaneLevel(Boolean)
  public void setMoisture(Boolean)
  public void setMuscleMass(Boolean)
  public void setParticulateMaterLevel(Boolean)
  public void setPower(Boolean)
  public void setRadonConcentration(Boolean)
  public void setRainRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSignalStrength(Boolean)
  public void setSmokeDensity(Boolean)
  public void setSoilHumidity(Boolean)
  public void setSoilReactivity(Boolean)
  public void setSoilSalinity(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVocLevel(Boolean)
  public void setVoltage(Boolean)
  public void setWaterFlow(Boolean)
  public void setWaterPressure(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWeight(Boolean)
  public Boolean super$6$getAccelerationX()
  public Boolean super$6$getAccelerationY()
  public Boolean super$6$getAccelerationZ()
  public Boolean super$6$getAirFlow()
  public Boolean super$6$getAirTemperature()
  public Boolean super$6$getAnglePosition()
  public Boolean super$6$getAtmosphericPressure()
  public Boolean super$6$getBarometricPressure()
  public Boolean super$6$getBloodPressure()
  public Boolean super$6$getBodyMass()
  public Boolean super$6$getBodyMassIndex()
  public Boolean super$6$getBoneMass()
  public String super$6$getCMD()
  public Boolean super$6$getCarbonDioxideLevel()
  public Boolean super$6$getCarbonMonoxideLevel()
  public Boolean super$6$getCurrent()
  public Boolean super$6$getDewPoint()
  public Boolean super$6$getDirection()
  public Boolean super$6$getDistance()
  public Boolean super$6$getElectricalConductivity()
  public Boolean super$6$getElectricalResistivity()
  public Boolean super$6$getFatMass()
  public Boolean super$6$getFormaldehydeLevel()
  public Boolean super$6$getFrequency()
  public Boolean super$6$getGeneralPurposeValue()
  public Boolean super$6$getHeartRate()
  public Boolean super$6$getHumidity()
  public Boolean super$6$getLoudness()
  public Boolean super$6$getLuminance()
  public Boolean super$6$getMetabolicBasis()
  public Boolean super$6$getMethaneLevel()
  public Boolean super$6$getMoisture()
  public Boolean super$6$getMuscleMass()
  public Boolean super$6$getParticulateMaterLevel()
  public List super$6$getPayload()
  public Boolean super$6$getPower()
  public Boolean super$6$getRadonConcentration()
  public Boolean super$6$getRainRate()
  public Boolean super$6$getRotation()
  public Boolean super$6$getSeismicIntensity()
  public Boolean super$6$getSeismicMagnitude()
  public Boolean super$6$getSmokeDensity()
  public Boolean super$6$getSoilHumidity()
  public Boolean super$6$getSoilReactivity()
  public Boolean super$6$getSoilSalinity()
  public Boolean super$6$getSoilTemperature()
  public Boolean super$6$getSolarRadiation()
  public Boolean super$6$getTankCapacity()
  public Boolean super$6$getTargetTemperature()
  public Boolean super$6$getTideLevel()
  public Boolean super$6$getTime()
  public Boolean super$6$getUltraviolet()
  public Boolean super$6$getVelocity()
  public Boolean super$6$getVocLevel()
  public Boolean super$6$getVoltage()
  public Boolean super$6$getWaterTemperature()
  public Boolean super$6$getWeight()
  public void super$6$setAccelerationX(Boolean)
  public void super$6$setAccelerationY(Boolean)
  public void super$6$setAccelerationZ(Boolean)
  public void super$6$setAirFlow(Boolean)
  public void super$6$setAirTemperature(Boolean)
  public void super$6$setAnglePosition(Boolean)
  public void super$6$setAtmosphericPressure(Boolean)
  public void super$6$setBarometricPressure(Boolean)
  public void super$6$setBloodPressure(Boolean)
  public void super$6$setBodyMass(Boolean)
  public void super$6$setBodyMassIndex(Boolean)
  public void super$6$setBoneMass(Boolean)
  public void super$6$setCarbonDioxideLevel(Boolean)
  public void super$6$setCarbonMonoxideLevel(Boolean)
  public void super$6$setCurrent(Boolean)
  public void super$6$setDewPoint(Boolean)
  public void super$6$setDirection(Boolean)
  public void super$6$setDistance(Boolean)
  public void super$6$setElectricalConductivity(Boolean)
  public void super$6$setElectricalResistivity(Boolean)
  public void super$6$setFatMass(Boolean)
  public void super$6$setFormaldehydeLevel(Boolean)
  public void super$6$setFrequency(Boolean)
  public void super$6$setGeneralPurposeValue(Boolean)
  public void super$6$setHeartRate(Boolean)
  public void super$6$setHumidity(Boolean)
  public void super$6$setLoudness(Boolean)
  public void super$6$setLuminance(Boolean)
  public void super$6$setMetabolicBasis(Boolean)
  public void super$6$setMethaneLevel(Boolean)
  public void super$6$setMoisture(Boolean)
  public void super$6$setMuscleMass(Boolean)
  public void super$6$setParticulateMaterLevel(Boolean)
  public void super$6$setPower(Boolean)
  public void super$6$setRadonConcentration(Boolean)
  public void super$6$setRainRate(Boolean)
  public void super$6$setRotation(Boolean)
  public void super$6$setSeismicIntensity(Boolean)
  public void super$6$setSeismicMagnitude(Boolean)
  public void super$6$setSmokeDensity(Boolean)
  public void super$6$setSoilHumidity(Boolean)
  public void super$6$setSoilReactivity(Boolean)
  public void super$6$setSoilSalinity(Boolean)
  public void super$6$setSoilTemperature(Boolean)
  public void super$6$setSolarRadiation(Boolean)
  public void super$6$setTankCapacity(Boolean)
  public void super$6$setTargetTemperature(Boolean)
  public void super$6$setTideLevel(Boolean)
  public void super$6$setTime(Boolean)
  public void super$6$setUltraviolet(Boolean)
  public void super$6$setVelocity(Boolean)
  public void super$6$setVocLevel(Boolean)
  public void super$6$setVoltage(Boolean)
  public void super$6$setWaterTemperature(Boolean)
  public void super$6$setWeight(Boolean)
]
class hubitat.zwave.commands.sensormultilevelv9.SensorMultilevelSupportedSensorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAccelerationX()
  public Boolean getAccelerationY()
  public Boolean getAccelerationZ()
  public Boolean getAirFlow()
  public Boolean getAirTemperature()
  public Boolean getAnglePosition()
  public Boolean getAtmosphericPressure()
  public Boolean getBarometricPressure()
  public Boolean getBloodPressure()
  public Boolean getBodyMass()
  public Boolean getBodyMassIndex()
  public Boolean getBoneMass()
  public String getCMD()
  public Boolean getCarbonDioxideLevel()
  public Boolean getCarbonMonoxideLevel()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCurrent()
  public Boolean getDewPoint()
  public Boolean getDirection()
  public Boolean getDistance()
  public Boolean getElectricalConductivity()
  public Boolean getElectricalResistivity()
  public Boolean getFatMass()
  public Boolean getFormaldehydeLevel()
  public Boolean getFrequency()
  public Boolean getGeneralPurposeValue()
  public Boolean getHeartRate()
  public Boolean getHumidity()
  public Boolean getLoudness()
  public Boolean getLuminance()
  public Boolean getMetabolicBasis()
  public Boolean getMethaneLevel()
  public Boolean getMoisture()
  public Boolean getMuscleMass()
  public Boolean getParticulateMaterLevel()
  public List getPayload()
  public Boolean getPower()
  public Boolean getRadonConcentration()
  public Boolean getRainRate()
  public Boolean getRotation()
  public Boolean getSeismicIntensity()
  public Boolean getSeismicMagnitude()
  public Boolean getSignalStrength()
  public Boolean getSmokeDensity()
  public Boolean getSoilHumidity()
  public Boolean getSoilReactivity()
  public Boolean getSoilSalinity()
  public Boolean getSoilTemperature()
  public Boolean getSolarRadiation()
  public Boolean getTankCapacity()
  public Boolean getTargetTemperature()
  public Boolean getTideLevel()
  public Boolean getTime()
  public Boolean getUltraviolet()
  public Boolean getVelocity()
  public Boolean getVocLevel()
  public Boolean getVoltage()
  public Boolean getWaterFlow()
  public Boolean getWaterPressure()
  public Boolean getWaterTemperature()
  public Boolean getWeight()
  public void setAccelerationX(Boolean)
  public void setAccelerationY(Boolean)
  public void setAccelerationZ(Boolean)
  public void setAirFlow(Boolean)
  public void setAirTemperature(Boolean)
  public void setAnglePosition(Boolean)
  public void setAtmosphericPressure(Boolean)
  public void setBarometricPressure(Boolean)
  public void setBloodPressure(Boolean)
  public void setBodyMass(Boolean)
  public void setBodyMassIndex(Boolean)
  public void setBoneMass(Boolean)
  public void setCarbonDioxideLevel(Boolean)
  public void setCarbonMonoxideLevel(Boolean)
  public void setCurrent(Boolean)
  public void setDewPoint(Boolean)
  public void setDirection(Boolean)
  public void setDistance(Boolean)
  public void setElectricalConductivity(Boolean)
  public void setElectricalResistivity(Boolean)
  public void setFatMass(Boolean)
  public void setFormaldehydeLevel(Boolean)
  public void setFrequency(Boolean)
  public void setGeneralPurposeValue(Boolean)
  public void setHeartRate(Boolean)
  public void setHumidity(Boolean)
  public void setLoudness(Boolean)
  public void setLuminance(Boolean)
  public void setMetabolicBasis(Boolean)
  public void setMethaneLevel(Boolean)
  public void setMoisture(Boolean)
  public void setMuscleMass(Boolean)
  public void setParticulateMaterLevel(Boolean)
  public void setPower(Boolean)
  public void setRadonConcentration(Boolean)
  public void setRainRate(Boolean)
  public void setRotation(Boolean)
  public void setSeismicIntensity(Boolean)
  public void setSeismicMagnitude(Boolean)
  public void setSignalStrength(Boolean)
  public void setSmokeDensity(Boolean)
  public void setSoilHumidity(Boolean)
  public void setSoilReactivity(Boolean)
  public void setSoilSalinity(Boolean)
  public void setSoilTemperature(Boolean)
  public void setSolarRadiation(Boolean)
  public void setTankCapacity(Boolean)
  public void setTargetTemperature(Boolean)
  public void setTideLevel(Boolean)
  public void setTime(Boolean)
  public void setUltraviolet(Boolean)
  public void setVelocity(Boolean)
  public void setVocLevel(Boolean)
  public void setVoltage(Boolean)
  public void setWaterFlow(Boolean)
  public void setWaterPressure(Boolean)
  public void setWaterTemperature(Boolean)
  public void setWeight(Boolean)
  public List hubitat.zwave.commands.sensormultilevelv5.SensorMultilevelSupportedSensorReport.super$2$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv6.SensorMultilevelSupportedSensorReport.super$3$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getBarometricPressure()
  public String hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getMoisture()
  public List hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv7.SensorMultilevelSupportedSensorReport.super$4$setWeight(Boolean)
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirFlow()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAirTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAnglePosition()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getAtmosphericPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBarometricPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBloodPressure()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBodyMassIndex()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getBoneMass()
  public String hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCMD()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonDioxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCarbonMonoxideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getCurrent()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDewPoint()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDirection()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getDistance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalConductivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getElectricalResistivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFatMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFormaldehydeLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getFrequency()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getGeneralPurposeValue()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHeartRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLoudness()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getLuminance()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMetabolicBasis()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMethaneLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMoisture()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getMuscleMass()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getParticulateMaterLevel()
  public List hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPayload()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getPower()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRadonConcentration()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRainRate()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getRotation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicIntensity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSeismicMagnitude()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilHumidity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilReactivity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilSalinity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSoilTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getSolarRadiation()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTankCapacity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTargetTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTideLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getTime()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getUltraviolet()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVelocity()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVocLevel()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getVoltage()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWaterTemperature()
  public Boolean hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$getWeight()
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirFlow(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAirTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAnglePosition(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setAtmosphericPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBarometricPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBloodPressure(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBodyMassIndex(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setBoneMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonDioxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCarbonMonoxideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setCurrent(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDewPoint(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDirection(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setDistance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalConductivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setElectricalResistivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFatMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFormaldehydeLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setFrequency(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setGeneralPurposeValue(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHeartRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLoudness(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setLuminance(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMetabolicBasis(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMethaneLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMoisture(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setMuscleMass(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setParticulateMaterLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setPower(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRadonConcentration(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRainRate(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setRotation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicIntensity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSeismicMagnitude(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilHumidity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilReactivity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilSalinity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSoilTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setSolarRadiation(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTankCapacity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTargetTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTideLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setTime(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setUltraviolet(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVelocity(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVocLevel(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setVoltage(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWaterTemperature(Boolean)
  public void hubitat.zwave.commands.sensormultilevelv8.SensorMultilevelSupportedSensorReport.super$5$setWeight(Boolean)
  public Boolean super$6$getAccelerationX()
  public Boolean super$6$getAccelerationY()
  public Boolean super$6$getAccelerationZ()
  public Boolean super$6$getAirFlow()
  public Boolean super$6$getAirTemperature()
  public Boolean super$6$getAnglePosition()
  public Boolean super$6$getAtmosphericPressure()
  public Boolean super$6$getBarometricPressure()
  public Boolean super$6$getBloodPressure()
  public Boolean super$6$getBodyMass()
  public Boolean super$6$getBodyMassIndex()
  public Boolean super$6$getBoneMass()
  public String super$6$getCMD()
  public Boolean super$6$getCarbonDioxideLevel()
  public Boolean super$6$getCarbonMonoxideLevel()
  public Boolean super$6$getCurrent()
  public Boolean super$6$getDewPoint()
  public Boolean super$6$getDirection()
  public Boolean super$6$getDistance()
  public Boolean super$6$getElectricalConductivity()
  public Boolean super$6$getElectricalResistivity()
  public Boolean super$6$getFatMass()
  public Boolean super$6$getFormaldehydeLevel()
  public Boolean super$6$getFrequency()
  public Boolean super$6$getGeneralPurposeValue()
  public Boolean super$6$getHeartRate()
  public Boolean super$6$getHumidity()
  public Boolean super$6$getLoudness()
  public Boolean super$6$getLuminance()
  public Boolean super$6$getMetabolicBasis()
  public Boolean super$6$getMethaneLevel()
  public Boolean super$6$getMoisture()
  public Boolean super$6$getMuscleMass()
  public Boolean super$6$getParticulateMaterLevel()
  public List super$6$getPayload()
  public Boolean super$6$getPower()
  public Boolean super$6$getRadonConcentration()
  public Boolean super$6$getRainRate()
  public Boolean super$6$getRotation()
  public Boolean super$6$getSeismicIntensity()
  public Boolean super$6$getSeismicMagnitude()
  public Boolean super$6$getSmokeDensity()
  public Boolean super$6$getSoilHumidity()
  public Boolean super$6$getSoilReactivity()
  public Boolean super$6$getSoilSalinity()
  public Boolean super$6$getSoilTemperature()
  public Boolean super$6$getSolarRadiation()
  public Boolean super$6$getTankCapacity()
  public Boolean super$6$getTargetTemperature()
  public Boolean super$6$getTideLevel()
  public Boolean super$6$getTime()
  public Boolean super$6$getUltraviolet()
  public Boolean super$6$getVelocity()
  public Boolean super$6$getVocLevel()
  public Boolean super$6$getVoltage()
  public Boolean super$6$getWaterTemperature()
  public Boolean super$6$getWeight()
  public void super$6$setAccelerationX(Boolean)
  public void super$6$setAccelerationY(Boolean)
  public void super$6$setAccelerationZ(Boolean)
  public void super$6$setAirFlow(Boolean)
  public void super$6$setAirTemperature(Boolean)
  public void super$6$setAnglePosition(Boolean)
  public void super$6$setAtmosphericPressure(Boolean)
  public void super$6$setBarometricPressure(Boolean)
  public void super$6$setBloodPressure(Boolean)
  public void super$6$setBodyMass(Boolean)
  public void super$6$setBodyMassIndex(Boolean)
  public void super$6$setBoneMass(Boolean)
  public void super$6$setCarbonDioxideLevel(Boolean)
  public void super$6$setCarbonMonoxideLevel(Boolean)
  public void super$6$setCurrent(Boolean)
  public void super$6$setDewPoint(Boolean)
  public void super$6$setDirection(Boolean)
  public void super$6$setDistance(Boolean)
  public void super$6$setElectricalConductivity(Boolean)
  public void super$6$setElectricalResistivity(Boolean)
  public void super$6$setFatMass(Boolean)
  public void super$6$setFormaldehydeLevel(Boolean)
  public void super$6$setFrequency(Boolean)
  public void super$6$setGeneralPurposeValue(Boolean)
  public void super$6$setHeartRate(Boolean)
  public void super$6$setHumidity(Boolean)
  public void super$6$setLoudness(Boolean)
  public void super$6$setLuminance(Boolean)
  public void super$6$setMetabolicBasis(Boolean)
  public void super$6$setMethaneLevel(Boolean)
  public void super$6$setMoisture(Boolean)
  public void super$6$setMuscleMass(Boolean)
  public void super$6$setParticulateMaterLevel(Boolean)
  public void super$6$setPower(Boolean)
  public void super$6$setRadonConcentration(Boolean)
  public void super$6$setRainRate(Boolean)
  public void super$6$setRotation(Boolean)
  public void super$6$setSeismicIntensity(Boolean)
  public void super$6$setSeismicMagnitude(Boolean)
  public void super$6$setSmokeDensity(Boolean)
  public void super$6$setSoilHumidity(Boolean)
  public void super$6$setSoilReactivity(Boolean)
  public void super$6$setSoilSalinity(Boolean)
  public void super$6$setSoilTemperature(Boolean)
  public void super$6$setSolarRadiation(Boolean)
  public void super$6$setTankCapacity(Boolean)
  public void super$6$setTargetTemperature(Boolean)
  public void super$6$setTideLevel(Boolean)
  public void super$6$setTime(Boolean)
  public void super$6$setUltraviolet(Boolean)
  public void super$6$setVelocity(Boolean)
  public void super$6$setVocLevel(Boolean)
  public void super$6$setVoltage(Boolean)
  public void super$6$setWaterTemperature(Boolean)
  public void super$6$setWeight(Boolean)
]
class hubitat.zwave.commands.silencealarmv1.SensorAlarmSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getBitMask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMode()
  public Short getNumberOfBitMasks()
  public List getPayload()
  public Integer getSeconds()
  public void setBitMask(List)
  public void setMode(Short)
  public void setNumberOfBitMasks(Short)
  public void setSeconds(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.silencealarmv1.SensorAlarmSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getBitMask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMode()
  public Short getNumberOfBitMasks()
  public List getPayload()
  public Integer getSeconds()
  public void setBitMask(List)
  public void setMode(Short)
  public void setNumberOfBitMasks(Short)
  public void setSeconds(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.simpleavcontrolv1.SimpleAvControlGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.simpleavcontrolv1.SimpleAvControlGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.simpleavcontrolv1.SimpleAvControlReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfReports()
  public List getPayload()
  public void setNumberOfReports(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.simpleavcontrolv1.SimpleAvControlReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfReports()
  public List getPayload()
  public void setNumberOfReports(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.simpleavcontrolv1.SimpleAvControlSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getCommands()
  public Integer getItemId()
  public Short getKeyAttributes()
  public List getPayload()
  public Short getSequenceNumber()
  public void setCommands(List)
  public void setItemId(Integer)
  public void setKeyAttributes(Short)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.simpleavcontrolv1.SimpleAvControlSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getCommands()
  public Integer getItemId()
  public Short getKeyAttributes()
  public List getPayload()
  public Short getSequenceNumber()
  public void setCommands(List)
  public void setItemId(Integer)
  public void setKeyAttributes(Short)
  public void setSequenceNumber(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.simpleavcontrolv1.SimpleAvControlSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getReportNo()
  public void setReportNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.simpleavcontrolv1.SimpleAvControlSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getReportNo()
  public void setReportNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.simpleavcontrolv1.SimpleAvControlSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getBitMasks()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getReportNo()
  public void setBitMasks(List)
  public void setReportNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.simpleavcontrolv1.SimpleAvControlSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public List getBitMasks()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getReportNo()
  public void setBitMasks(List)
  public void setReportNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.ConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.ConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDefaultToneIdentifier()
  public List getPayload()
  public Short getVolume()
  public void setDefaultToneIdentifier(Short)
  public void setVolume(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.ConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDefaultToneIdentifier()
  public List getPayload()
  public Short getVolume()
  public void setDefaultToneIdentifier(Short)
  public void setVolume(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.ConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDefaultToneIdentifier()
  public List getPayload()
  public Short getVolume()
  public void setDefaultToneIdentifier(Short)
  public void setVolume(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.ConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDefaultToneIdentifier()
  public List getPayload()
  public Short getVolume()
  public void setDefaultToneIdentifier(Short)
  public void setVolume(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.ToneInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getToneIdentifier()
  public void setToneIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.ToneInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getToneIdentifier()
  public void setToneIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.ToneInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNameLength()
  public List getPayload()
  public Integer getToneDuration()
  public Short getToneIdentifier()
  public String getToneName()
  public void setNameLength(Short)
  public void setToneDuration(Integer)
  public void setToneIdentifier(Short)
  public void setToneName(String)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.ToneInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNameLength()
  public List getPayload()
  public Integer getToneDuration()
  public Short getToneIdentifier()
  public String getToneName()
  public void setNameLength(Short)
  public void setToneDuration(Integer)
  public void setToneIdentifier(Short)
  public void setToneName(String)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.TonePlayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.TonePlayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getToneIdentifier()
  public void setToneIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.TonePlayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getToneIdentifier()
  public void setToneIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.TonePlaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getToneIdentifier()
  public void setToneIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.TonePlaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getToneIdentifier()
  public void setToneIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.TonesNumberGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.TonesNumberReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedTones()
  public void setSupportedTones(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv1.TonesNumberReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedTones()
  public void setSupportedTones(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.ConfigurationGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.ConfigurationGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.soundswitchv1.ConfigurationGet.getPayload()
  public List hubitat.zwave.commands.soundswitchv1.ConfigurationGet.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.ConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.ConfigurationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.soundswitchv1.ConfigurationReport.getDefaultToneIdentifier()
  public List hubitat.zwave.commands.soundswitchv1.ConfigurationReport.getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.ConfigurationReport.getVolume()
  public void hubitat.zwave.commands.soundswitchv1.ConfigurationReport.setDefaultToneIdentifier(Short)
  public void hubitat.zwave.commands.soundswitchv1.ConfigurationReport.setVolume(Short)
  public List hubitat.zwave.commands.soundswitchv1.ConfigurationReport.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.ConfigurationReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.ConfigurationReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.soundswitchv1.ConfigurationReport.getDefaultToneIdentifier()
  public List hubitat.zwave.commands.soundswitchv1.ConfigurationReport.getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.ConfigurationReport.getVolume()
  public void hubitat.zwave.commands.soundswitchv1.ConfigurationReport.setDefaultToneIdentifier(Short)
  public void hubitat.zwave.commands.soundswitchv1.ConfigurationReport.setVolume(Short)
  public List hubitat.zwave.commands.soundswitchv1.ConfigurationReport.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.ConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.ConfigurationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.soundswitchv1.ConfigurationSet.getDefaultToneIdentifier()
  public List hubitat.zwave.commands.soundswitchv1.ConfigurationSet.getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.ConfigurationSet.getVolume()
  public void hubitat.zwave.commands.soundswitchv1.ConfigurationSet.setDefaultToneIdentifier(Short)
  public void hubitat.zwave.commands.soundswitchv1.ConfigurationSet.setVolume(Short)
  public List hubitat.zwave.commands.soundswitchv1.ConfigurationSet.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.ConfigurationSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.ConfigurationSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.soundswitchv1.ConfigurationSet.getDefaultToneIdentifier()
  public List hubitat.zwave.commands.soundswitchv1.ConfigurationSet.getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.ConfigurationSet.getVolume()
  public void hubitat.zwave.commands.soundswitchv1.ConfigurationSet.setDefaultToneIdentifier(Short)
  public void hubitat.zwave.commands.soundswitchv1.ConfigurationSet.setVolume(Short)
  public List hubitat.zwave.commands.soundswitchv1.ConfigurationSet.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.ToneInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.ToneInfoGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.soundswitchv1.ToneInfoGet.getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.ToneInfoGet.getToneIdentifier()
  public void hubitat.zwave.commands.soundswitchv1.ToneInfoGet.setToneIdentifier(Short)
  public List hubitat.zwave.commands.soundswitchv1.ToneInfoGet.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.ToneInfoGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.ToneInfoGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.soundswitchv1.ToneInfoGet.getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.ToneInfoGet.getToneIdentifier()
  public void hubitat.zwave.commands.soundswitchv1.ToneInfoGet.setToneIdentifier(Short)
  public List hubitat.zwave.commands.soundswitchv1.ToneInfoGet.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.ToneInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getNameLength()
  public List hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getPayload()
  public Integer hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getToneDuration()
  public Short hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getToneIdentifier()
  public String hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getToneName()
  public void hubitat.zwave.commands.soundswitchv1.ToneInfoReport.setNameLength(Short)
  public void hubitat.zwave.commands.soundswitchv1.ToneInfoReport.setToneDuration(Integer)
  public void hubitat.zwave.commands.soundswitchv1.ToneInfoReport.setToneIdentifier(Short)
  public void hubitat.zwave.commands.soundswitchv1.ToneInfoReport.setToneName(String)
  public List hubitat.zwave.commands.soundswitchv1.ToneInfoReport.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.ToneInfoReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getNameLength()
  public List hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getPayload()
  public Integer hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getToneDuration()
  public Short hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getToneIdentifier()
  public String hubitat.zwave.commands.soundswitchv1.ToneInfoReport.getToneName()
  public void hubitat.zwave.commands.soundswitchv1.ToneInfoReport.setNameLength(Short)
  public void hubitat.zwave.commands.soundswitchv1.ToneInfoReport.setToneDuration(Integer)
  public void hubitat.zwave.commands.soundswitchv1.ToneInfoReport.setToneIdentifier(Short)
  public void hubitat.zwave.commands.soundswitchv1.ToneInfoReport.setToneName(String)
  public List hubitat.zwave.commands.soundswitchv1.ToneInfoReport.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.TonePlayGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.TonePlayGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.soundswitchv1.TonePlayGet.getPayload()
  public List hubitat.zwave.commands.soundswitchv1.TonePlayGet.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.TonePlayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.TonePlayReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.TonePlayReport.getToneIdentifier()
  public Short getVolume()
  public void hubitat.zwave.commands.soundswitchv1.TonePlayReport.setToneIdentifier(Short)
  public void setVolume(Short)
  public List hubitat.zwave.commands.soundswitchv1.TonePlayReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.TonePlayReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.TonePlayReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.TonePlayReport.getToneIdentifier()
  public Short getVolume()
  public void hubitat.zwave.commands.soundswitchv1.TonePlayReport.setToneIdentifier(Short)
  public void setVolume(Short)
  public List hubitat.zwave.commands.soundswitchv1.TonePlayReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.TonePlaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.TonePlaySet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.TonePlaySet.getToneIdentifier()
  public Short getVolume()
  public void hubitat.zwave.commands.soundswitchv1.TonePlaySet.setToneIdentifier(Short)
  public void setVolume(Short)
  public List hubitat.zwave.commands.soundswitchv1.TonePlaySet.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.TonePlaySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.TonePlaySet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.TonePlaySet.getToneIdentifier()
  public Short getVolume()
  public void hubitat.zwave.commands.soundswitchv1.TonePlaySet.setToneIdentifier(Short)
  public void setVolume(Short)
  public List hubitat.zwave.commands.soundswitchv1.TonePlaySet.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.TonesNumberGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.TonesNumberGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.soundswitchv1.TonesNumberGet.getPayload()
  public List hubitat.zwave.commands.soundswitchv1.TonesNumberGet.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.TonesNumberReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.TonesNumberReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.soundswitchv1.TonesNumberReport.getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.TonesNumberReport.getSupportedTones()
  public void hubitat.zwave.commands.soundswitchv1.TonesNumberReport.setSupportedTones(Short)
  public List hubitat.zwave.commands.soundswitchv1.TonesNumberReport.super$2$getPayload()
]
class hubitat.zwave.commands.soundswitchv2.TonesNumberReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.soundswitchv1.TonesNumberReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.soundswitchv1.TonesNumberReport.getPayload()
  public Short hubitat.zwave.commands.soundswitchv1.TonesNumberReport.getSupportedTones()
  public void hubitat.zwave.commands.soundswitchv1.TonesNumberReport.setSupportedTones(Short)
  public List hubitat.zwave.commands.soundswitchv1.TonesNumberReport.super$2$getPayload()
]
class hubitat.zwave.commands.supervisionv1.SupervisionGet:
Methods:[
  public hubitat.zwave.commands.supervisionv1.SupervisionGet encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandByte()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short getCommandClassIdentifier()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getCommandIdentifier()
  public Short getCommandLength()
  public List getPayload()
  public Short getSessionID()
  public Boolean getStatusUpdates()
  public void setCommandByte(List)
  public void setCommandClassIdentifier(Short)
  public void setCommandIdentifier(Short)
  public void setCommandLength(Short)
  public void setSessionID(Short)
  public void setStatusUpdates(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.supervisionv1.SupervisionGet:
Methods:[
  public hubitat.zwave.commands.supervisionv1.SupervisionGet encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getCommandByte()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short getCommandClassIdentifier()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getCommandIdentifier()
  public Short getCommandLength()
  public List getPayload()
  public Short getSessionID()
  public Boolean getStatusUpdates()
  public void setCommandByte(List)
  public void setCommandClassIdentifier(Short)
  public void setCommandIdentifier(Short)
  public void setCommandLength(Short)
  public void setSessionID(Short)
  public void setStatusUpdates(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.supervisionv1.SupervisionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public static Short FAIL = 2
  public Boolean getMoreStatusUpdates()
  public static Short NO_SUPPORT = 0
  public List getPayload()
  public Short getReserved()
  public static Short SUCCESS = 255
  public Short getSessionID()
  public Short getStatus()
  public static Short WORKING = 1
  public void setDuration(Short)
  public void setMoreStatusUpdates(Boolean)
  public void setReserved(Short)
  public void setSessionID(Short)
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.supervisionv1.SupervisionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public static Short FAIL = 2
  public Boolean getMoreStatusUpdates()
  public static Short NO_SUPPORT = 0
  public List getPayload()
  public Short getReserved()
  public static Short SUCCESS = 255
  public Short getSessionID()
  public Short getStatus()
  public static Short WORKING = 1
  public void setDuration(Short)
  public void setMoreStatusUpdates(Boolean)
  public void setReserved(Short)
  public void setSessionID(Short)
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.supervisionv2.SupervisionGet:
Methods:[
  public hubitat.zwave.commands.supervisionv1.SupervisionGet encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.commands.supervisionv2.SupervisionGet encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.supervisionv1.SupervisionGet.getCMD()
  public List hubitat.zwave.commands.supervisionv1.SupervisionGet.getCommandByte()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionGet.getCommandClassIdentifier()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionGet.getCommandIdentifier()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionGet.getCommandLength()
  public List hubitat.zwave.commands.supervisionv1.SupervisionGet.getPayload()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionGet.getSessionID()
  public Boolean hubitat.zwave.commands.supervisionv1.SupervisionGet.getStatusUpdates()
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setCommandByte(List)
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setCommandClassIdentifier(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setCommandIdentifier(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setCommandLength(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setSessionID(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setStatusUpdates(Boolean)
  public List hubitat.zwave.commands.supervisionv1.SupervisionGet.super$2$getPayload()
  public hubitat.zwave.commands.supervisionv1.SupervisionGet super$3$encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command super$3$encapsulatedCommand(Map)
]
class hubitat.zwave.commands.supervisionv2.SupervisionGet:
Methods:[
  public hubitat.zwave.commands.supervisionv1.SupervisionGet encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.commands.supervisionv2.SupervisionGet encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command encapsulatedCommand(Map)
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.supervisionv1.SupervisionGet.getCMD()
  public List hubitat.zwave.commands.supervisionv1.SupervisionGet.getCommandByte()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionGet.getCommandClassIdentifier()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionGet.getCommandIdentifier()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionGet.getCommandLength()
  public List hubitat.zwave.commands.supervisionv1.SupervisionGet.getPayload()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionGet.getSessionID()
  public Boolean hubitat.zwave.commands.supervisionv1.SupervisionGet.getStatusUpdates()
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setCommandByte(List)
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setCommandClassIdentifier(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setCommandIdentifier(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setCommandLength(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setSessionID(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionGet.setStatusUpdates(Boolean)
  public List hubitat.zwave.commands.supervisionv1.SupervisionGet.super$2$getPayload()
  public hubitat.zwave.commands.supervisionv1.SupervisionGet super$3$encapsulate(hubitat.zwave.Command)
  public hubitat.zwave.Command super$3$encapsulatedCommand(Map)
]
class hubitat.zwave.commands.supervisionv2.SupervisionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.supervisionv1.SupervisionReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionReport.getDuration()
  public static Short FAIL = 2
  public Boolean hubitat.zwave.commands.supervisionv1.SupervisionReport.getMoreStatusUpdates()
  public static Short NO_SUPPORT = 0
  public List hubitat.zwave.commands.supervisionv1.SupervisionReport.getPayload()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionReport.getReserved()
  public static Short SUCCESS = 255
  public Short hubitat.zwave.commands.supervisionv1.SupervisionReport.getSessionID()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionReport.getStatus()
  public static Short WORKING = 1
  public Boolean getWakeUpRequest()
  public void hubitat.zwave.commands.supervisionv1.SupervisionReport.setDuration(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionReport.setMoreStatusUpdates(Boolean)
  public void hubitat.zwave.commands.supervisionv1.SupervisionReport.setReserved(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionReport.setSessionID(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionReport.setStatus(Short)
  public void setWakeUpRequest(Boolean)
  public List hubitat.zwave.commands.supervisionv1.SupervisionReport.super$2$getPayload()
]
class hubitat.zwave.commands.supervisionv2.SupervisionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.supervisionv1.SupervisionReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionReport.getDuration()
  public static Short FAIL = 2
  public Boolean hubitat.zwave.commands.supervisionv1.SupervisionReport.getMoreStatusUpdates()
  public static Short NO_SUPPORT = 0
  public List hubitat.zwave.commands.supervisionv1.SupervisionReport.getPayload()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionReport.getReserved()
  public static Short SUCCESS = 255
  public Short hubitat.zwave.commands.supervisionv1.SupervisionReport.getSessionID()
  public Short hubitat.zwave.commands.supervisionv1.SupervisionReport.getStatus()
  public static Short WORKING = 1
  public Boolean getWakeUpRequest()
  public void hubitat.zwave.commands.supervisionv1.SupervisionReport.setDuration(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionReport.setMoreStatusUpdates(Boolean)
  public void hubitat.zwave.commands.supervisionv1.SupervisionReport.setReserved(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionReport.setSessionID(Short)
  public void hubitat.zwave.commands.supervisionv1.SupervisionReport.setStatus(Short)
  public void setWakeUpRequest(Boolean)
  public List hubitat.zwave.commands.supervisionv1.SupervisionReport.super$2$getPayload()
]
class hubitat.zwave.commands.switchallv1.SwitchAllGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchallv1.SwitchAllGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchallv1.SwitchAllOff:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchallv1.SwitchAllOff:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchallv1.SwitchAllOn:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchallv1.SwitchAllOn:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchallv1.SwitchAllReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON = 2
  public static Short MODE_EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY = 0
  public static Short MODE_EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF = 1
  public static Short MODE_INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY = 255
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchallv1.SwitchAllReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON = 2
  public static Short MODE_EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY = 0
  public static Short MODE_EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF = 1
  public static Short MODE_INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY = 255
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchallv1.SwitchAllSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON = 2
  public static Short MODE_EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY = 0
  public static Short MODE_EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF = 1
  public static Short MODE_INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY = 255
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchallv1.SwitchAllSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_EXCLUDED_FROM_THE_ALL_OFF_FUNCTIONALITY_BUT_NOT_ALL_ON = 2
  public static Short MODE_EXCLUDED_FROM_THE_ALL_ON_ALL_OFF_FUNCTIONALITY = 0
  public static Short MODE_EXCLUDED_FROM_THE_ALL_ON_FUNCTIONALITY_BUT_NOT_ALL_OFF = 1
  public static Short MODE_INCLUDED_IN_THE_ALL_ON_ALL_OFF_FUNCTIONALITY = 255
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchbinaryv1.SwitchBinaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchbinaryv1.SwitchBinaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchbinaryv1.SwitchBinaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchbinaryv1.SwitchBinaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchbinaryv1.SwitchBinarySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSwitchValue()
  public void setSwitchValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchbinaryv1.SwitchBinarySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSwitchValue()
  public void setSwitchValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchbinaryv2.SwitchBinaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchbinaryv1.SwitchBinaryGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchbinaryv1.SwitchBinaryGet.getPayload()
  public List hubitat.zwave.commands.switchbinaryv1.SwitchBinaryGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchbinaryv2.SwitchBinaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchbinaryv1.SwitchBinaryGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchbinaryv1.SwitchBinaryGet.getPayload()
  public List hubitat.zwave.commands.switchbinaryv1.SwitchBinaryGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchbinaryv2.SwitchBinaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public List getPayload()
  public Short getTargetValue()
  public Short getValue()
  public void setDuration(Short)
  public void setTargetValue(Short)
  public void setValue(Short)
  public List hubitat.zwave.commands.switchbinaryv1.SwitchBinaryReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getValue()
  public void super$3$setValue(Short)
]
class hubitat.zwave.commands.switchbinaryv2.SwitchBinaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public List getPayload()
  public Short getTargetValue()
  public Short getValue()
  public void setDuration(Short)
  public void setTargetValue(Short)
  public void setValue(Short)
  public List hubitat.zwave.commands.switchbinaryv1.SwitchBinaryReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getValue()
  public void super$3$setValue(Short)
]
class hubitat.zwave.commands.switchbinaryv2.SwitchBinarySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public List getPayload()
  public Short getSwitchValue()
  public Short getTargetValue()
  public void setDuration(Short)
  public void setSwitchValue(Short)
  public void setTargetValue(Short)
  public List hubitat.zwave.commands.switchbinaryv1.SwitchBinarySet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getSwitchValue()
  public void super$3$setSwitchValue(Short)
]
class hubitat.zwave.commands.switchbinaryv2.SwitchBinarySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public List getPayload()
  public Short getSwitchValue()
  public Short getTargetValue()
  public void setDuration(Short)
  public void setSwitchValue(Short)
  public void setTargetValue(Short)
  public List hubitat.zwave.commands.switchbinaryv1.SwitchBinarySet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getSwitchValue()
  public void super$3$setSwitchValue(Short)
]
class hubitat.zwave.commands.switchcolorv1.SwitchColorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public String getColorComponent()
  public short getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setColorComponent(String)
  public void setColorComponentId(short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv1.SwitchColorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public String getColorComponent()
  public short getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public short getValue()
  public void setColorComponent(String)
  public void setColorComponentId(short)
  public void setValue(short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv1.SwitchColorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getColorComponentBytes()
  public short getColorComponentCount()
  public Map getColorComponents()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setColorComponentBytes(List)
  public void setColorComponentCount(short)
  public void setColorComponents(Map)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public short getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public boolean getIgnoreStartLevel()
  public List getPayload()
  public short getStartLevel()
  public boolean getUpDown()
  public boolean isIgnoreStartLevel()
  public boolean isUpDown()
  public void setColorComponentId(short)
  public void setIgnoreStartLevel(boolean)
  public void setStartLevel(short)
  public void setUpDown(boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public short getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public void setColorComponentId(short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public boolean getAmber()
  public boolean getBlue()
  public String getCMD()
  public boolean getColdWhite()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public boolean getCyan()
  public boolean getGreen()
  public boolean getIndex()
  public List getPayload()
  public boolean getPurple()
  public boolean getRed()
  public boolean getWarmWhite()
  public boolean isAmber()
  public boolean isBlue()
  public boolean isColdWhite()
  public boolean isCyan()
  public boolean isGreen()
  public boolean isIndex()
  public boolean isPurple()
  public boolean isRed()
  public boolean isWarmWhite()
  public void setAmber(boolean)
  public void setBlue(boolean)
  public void setColdWhite(boolean)
  public void setCyan(boolean)
  public void setGreen(boolean)
  public void setIndex(boolean)
  public void setPurple(boolean)
  public void setRed(boolean)
  public void setWarmWhite(boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv2.SwitchColorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorGet.getCMD()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorGet.getColorComponent()
  public short hubitat.zwave.commands.switchcolorv1.SwitchColorGet.getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorGet.getPayload()
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorGet.setColorComponent(String)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorGet.setColorComponentId(short)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv2.SwitchColorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorReport.getCMD()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorReport.getColorComponent()
  public short hubitat.zwave.commands.switchcolorv1.SwitchColorReport.getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorReport.getPayload()
  public short hubitat.zwave.commands.switchcolorv1.SwitchColorReport.getValue()
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorReport.setColorComponent(String)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorReport.setColorComponentId(short)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorReport.setValue(short)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorReport.super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv2.SwitchColorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getColorComponentBytes()
  public short getColorComponentCount()
  public Map getColorComponents()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public short getDimmingDuration()
  public List getPayload()
  public void setColorComponentBytes(List)
  public void setColorComponentCount(short)
  public void setColorComponents(Map)
  public void setDimmingDuration(short)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorSet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getColorComponentBytes()
  public short super$3$getColorComponentCount()
  public Map super$3$getColorComponents()
  public List super$3$getPayload()
  public void super$3$setColorComponentBytes(List)
  public void super$3$setColorComponentCount(short)
  public void super$3$setColorComponents(Map)
]
class hubitat.zwave.commands.switchcolorv2.SwitchColorStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.getCMD()
  public short hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.getIgnoreStartLevel()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.getPayload()
  public short hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.getStartLevel()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.getUpDown()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.isIgnoreStartLevel()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.isUpDown()
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.setColorComponentId(short)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.setIgnoreStartLevel(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.setStartLevel(short)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.setUpDown(boolean)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv2.SwitchColorStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange.getCMD()
  public short hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange.getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange.getPayload()
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange.setColorComponentId(short)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange.super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv2.SwitchColorSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedGet.getPayload()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv2.SwitchColorSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getAmber()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getBlue()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getCMD()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getColdWhite()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getCyan()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getGreen()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getIndex()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getPayload()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getPurple()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getRed()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getWarmWhite()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isAmber()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isBlue()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isColdWhite()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isCyan()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isGreen()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isIndex()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isPurple()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isRed()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isWarmWhite()
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setAmber(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setBlue(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setColdWhite(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setCyan(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setGreen(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setIndex(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setPurple(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setRed(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setWarmWhite(boolean)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv3.SwitchColorGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorGet.getCMD()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorGet.getColorComponent()
  public short hubitat.zwave.commands.switchcolorv1.SwitchColorGet.getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorGet.getPayload()
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorGet.setColorComponent(String)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorGet.setColorComponentId(short)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv3.SwitchColorReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public String getColorComponent()
  public short getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public short getDimmingDuration()
  public List getPayload()
  public short getTargetValue()
  public short getValue()
  public void setColorComponent(String)
  public void setColorComponentId(short)
  public void setDimmingDuration(short)
  public void setTargetValue(short)
  public void setValue(short)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorReport.super$2$getPayload()
  public String super$3$getCMD()
  public String super$3$getColorComponent()
  public short super$3$getColorComponentId()
  public List super$3$getPayload()
  public short super$3$getValue()
  public void super$3$setColorComponent(String)
  public void super$3$setColorComponentId(short)
  public void super$3$setValue(short)
]
class hubitat.zwave.commands.switchcolorv3.SwitchColorSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public List getColorComponentBytes()
  public short getColorComponentCount()
  public Map getColorComponents()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public short getDimmingDuration()
  public List getPayload()
  public void setColorComponentBytes(List)
  public void setColorComponentCount(short)
  public void setColorComponents(Map)
  public void setDimmingDuration(short)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorSet.super$2$getPayload()
  public String hubitat.zwave.commands.switchcolorv2.SwitchColorSet.super$3$getCMD()
  public List hubitat.zwave.commands.switchcolorv2.SwitchColorSet.super$3$getColorComponentBytes()
  public short hubitat.zwave.commands.switchcolorv2.SwitchColorSet.super$3$getColorComponentCount()
  public Map hubitat.zwave.commands.switchcolorv2.SwitchColorSet.super$3$getColorComponents()
  public List hubitat.zwave.commands.switchcolorv2.SwitchColorSet.super$3$getPayload()
  public void hubitat.zwave.commands.switchcolorv2.SwitchColorSet.super$3$setColorComponentBytes(List)
  public void hubitat.zwave.commands.switchcolorv2.SwitchColorSet.super$3$setColorComponentCount(short)
  public void hubitat.zwave.commands.switchcolorv2.SwitchColorSet.super$3$setColorComponents(Map)
  public String super$4$getCMD()
  public List super$4$getColorComponentBytes()
  public short super$4$getColorComponentCount()
  public Map super$4$getColorComponents()
  public short super$4$getDimmingDuration()
  public List super$4$getPayload()
  public void super$4$setColorComponentBytes(List)
  public void super$4$setColorComponentCount(short)
  public void super$4$setColorComponents(Map)
  public void super$4$setDimmingDuration(short)
]
class hubitat.zwave.commands.switchcolorv3.SwitchColorStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public short getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public short getDimmingDuration()
  public boolean getIgnoreStartLevel()
  public List getPayload()
  public short getStartLevel()
  public boolean getUpDown()
  public boolean isIgnoreStartLevel()
  public boolean isUpDown()
  public void setColorComponentId(short)
  public void setDimmingDuration(short)
  public void setIgnoreStartLevel(boolean)
  public void setStartLevel(short)
  public void setUpDown(boolean)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorStartLevelChange.super$2$getPayload()
  public String super$3$getCMD()
  public short super$3$getColorComponentId()
  public boolean super$3$getIgnoreStartLevel()
  public List super$3$getPayload()
  public short super$3$getStartLevel()
  public boolean super$3$getUpDown()
  public boolean super$3$isIgnoreStartLevel()
  public boolean super$3$isUpDown()
  public void super$3$setColorComponentId(short)
  public void super$3$setIgnoreStartLevel(boolean)
  public void super$3$setStartLevel(short)
  public void super$3$setUpDown(boolean)
]
class hubitat.zwave.commands.switchcolorv3.SwitchColorStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange.getCMD()
  public short hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange.getColorComponentId()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange.getPayload()
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange.setColorComponentId(short)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorStopLevelChange.super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv3.SwitchColorSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedGet.getPayload()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchcolorv3.SwitchColorSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getAmber()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getBlue()
  public String hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getCMD()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getColdWhite()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getCyan()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getGreen()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getIndex()
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getPayload()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getPurple()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getRed()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.getWarmWhite()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isAmber()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isBlue()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isColdWhite()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isCyan()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isGreen()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isIndex()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isPurple()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isRed()
  public boolean hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.isWarmWhite()
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setAmber(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setBlue(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setColdWhite(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setCyan(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setGreen(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setIndex(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setPurple(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setRed(boolean)
  public void hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.setWarmWhite(boolean)
  public List hubitat.zwave.commands.switchcolorv1.SwitchColorSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getIgnoreStartLevel()
  public List getPayload()
  public Short getStartLevel()
  public Boolean getUpDown()
  public void setIgnoreStartLevel(Boolean)
  public void setStartLevel(Short)
  public void setUpDown(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getIgnoreStartLevel()
  public List getPayload()
  public Short getStartLevel()
  public Boolean getUpDown()
  public void setIgnoreStartLevel(Boolean)
  public void setStartLevel(Short)
  public void setUpDown(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getValue()
  public void hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getValue()
  public void hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public List getPayload()
  public Short getValue()
  public void setDimmingDuration(Short)
  public void setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelSet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getValue()
  public void super$3$setValue(Short)
]
class hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public List getPayload()
  public Short getValue()
  public void setDimmingDuration(Short)
  public void setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelSet.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getValue()
  public void super$3$setValue(Short)
]
class hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Boolean getIgnoreStartLevel()
  public List getPayload()
  public Short getStartLevel()
  public Boolean getUpDown()
  public void setDimmingDuration(Short)
  public void setIgnoreStartLevel(Boolean)
  public void setStartLevel(Short)
  public void setUpDown(Boolean)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange.super$2$getPayload()
  public String super$3$getCMD()
  public Boolean super$3$getIgnoreStartLevel()
  public List super$3$getPayload()
  public Short super$3$getStartLevel()
  public Boolean super$3$getUpDown()
  public void super$3$setIgnoreStartLevel(Boolean)
  public void super$3$setStartLevel(Short)
  public void super$3$setUpDown(Boolean)
]
class hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Boolean getIgnoreStartLevel()
  public List getPayload()
  public Short getStartLevel()
  public Boolean getUpDown()
  public void setDimmingDuration(Short)
  public void setIgnoreStartLevel(Boolean)
  public void setStartLevel(Short)
  public void setUpDown(Boolean)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange.super$2$getPayload()
  public String super$3$getCMD()
  public Boolean super$3$getIgnoreStartLevel()
  public List super$3$getPayload()
  public Short super$3$getStartLevel()
  public Boolean super$3$getUpDown()
  public void super$3$setIgnoreStartLevel(Boolean)
  public void super$3$setStartLevel(Short)
  public void super$3$setUpDown(Boolean)
]
class hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getValue()
  public void hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getValue()
  public void hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getDimmingDuration()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getValue()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.setDimmingDuration(Short)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelSet.super$2$getPayload()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getCMD()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getValue()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$setValue(Short)
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getDimmingDuration()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getValue()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.setDimmingDuration(Short)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelSet.super$2$getPayload()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getCMD()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getValue()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$setValue(Short)
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Boolean getIgnoreStartLevel()
  public Short getIncDec()
  public List getPayload()
  public Short getStartLevel()
  public Short getStepSize()
  public Boolean getUpDown()
  public void setDimmingDuration(Short)
  public void setIgnoreStartLevel(Boolean)
  public void setIncDec(Short)
  public void setStartLevel(Short)
  public void setStepSize(Short)
  public void setUpDown(Boolean)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange.super$2$getPayload()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getCMD()
  public Boolean hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getIgnoreStartLevel()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getStartLevel()
  public Boolean hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getUpDown()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setIgnoreStartLevel(Boolean)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setStartLevel(Short)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setUpDown(Boolean)
  public String super$4$getCMD()
  public Short super$4$getDimmingDuration()
  public Boolean super$4$getIgnoreStartLevel()
  public List super$4$getPayload()
  public Short super$4$getStartLevel()
  public Boolean super$4$getUpDown()
  public void super$4$setDimmingDuration(Short)
  public void super$4$setIgnoreStartLevel(Boolean)
  public void super$4$setStartLevel(Short)
  public void super$4$setUpDown(Boolean)
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDimmingDuration()
  public Boolean getIgnoreStartLevel()
  public Short getIncDec()
  public List getPayload()
  public Short getStartLevel()
  public Short getStepSize()
  public Boolean getUpDown()
  public void setDimmingDuration(Short)
  public void setIgnoreStartLevel(Boolean)
  public void setIncDec(Short)
  public void setStartLevel(Short)
  public void setStepSize(Short)
  public void setUpDown(Boolean)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange.super$2$getPayload()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getCMD()
  public Boolean hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getIgnoreStartLevel()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getStartLevel()
  public Boolean hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getUpDown()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setIgnoreStartLevel(Boolean)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setStartLevel(Short)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setUpDown(Boolean)
  public String super$4$getCMD()
  public Short super$4$getDimmingDuration()
  public Boolean super$4$getIgnoreStartLevel()
  public List super$4$getPayload()
  public Short super$4$getStartLevel()
  public Boolean super$4$getUpDown()
  public void super$4$setDimmingDuration(Short)
  public void super$4$setIgnoreStartLevel(Boolean)
  public void super$4$setStartLevel(Short)
  public void super$4$setUpDown(Boolean)
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrimarySwitchType()
  public Short getSecondarySwitchType()
  public void setPrimarySwitchType(Short)
  public void setSecondarySwitchType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrimarySwitchType()
  public Short getSecondarySwitchType()
  public void setPrimarySwitchType(Short)
  public void setSecondarySwitchType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public List getPayload()
  public Short getTargetValue()
  public Short hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getValue()
  public void setDuration(Short)
  public void setTargetValue(Short)
  public void hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDuration()
  public List getPayload()
  public Short getTargetValue()
  public Short hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.getValue()
  public void setDuration(Short)
  public void setTargetValue(Short)
  public void hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getDimmingDuration()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getValue()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.setDimmingDuration(Short)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelSet.super$2$getPayload()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getCMD()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getValue()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$setValue(Short)
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getDimmingDuration()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.getValue()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.setDimmingDuration(Short)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.setValue(Short)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelSet.super$2$getPayload()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getCMD()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$getValue()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelSet.super$3$setValue(Short)
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getDimmingDuration()
  public Boolean hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getIgnoreStartLevel()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getIncDec()
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getStartLevel()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getStepSize()
  public Boolean hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getUpDown()
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setDimmingDuration(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setIgnoreStartLevel(Boolean)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setIncDec(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setStartLevel(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setStepSize(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setUpDown(Boolean)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange.super$2$getPayload()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getCMD()
  public Boolean hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getIgnoreStartLevel()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getStartLevel()
  public Boolean hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getUpDown()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setIgnoreStartLevel(Boolean)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setStartLevel(Short)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setUpDown(Boolean)
  public String hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getCMD()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getDimmingDuration()
  public Boolean hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getIgnoreStartLevel()
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getStartLevel()
  public Boolean hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getUpDown()
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$setDimmingDuration(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$setIgnoreStartLevel(Boolean)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$setStartLevel(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$setUpDown(Boolean)
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getDimmingDuration()
  public Boolean hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getIgnoreStartLevel()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getIncDec()
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getStartLevel()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getStepSize()
  public Boolean hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.getUpDown()
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setDimmingDuration(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setIgnoreStartLevel(Boolean)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setIncDec(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setStartLevel(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setStepSize(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.setUpDown(Boolean)
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStartLevelChange.super$2$getPayload()
  public String hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getCMD()
  public Boolean hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getIgnoreStartLevel()
  public List hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getStartLevel()
  public Boolean hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$getUpDown()
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setIgnoreStartLevel(Boolean)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setStartLevel(Short)
  public void hubitat.zwave.commands.switchmultilevelv2.SwitchMultilevelStartLevelChange.super$3$setUpDown(Boolean)
  public String hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getCMD()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getDimmingDuration()
  public Boolean hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getIgnoreStartLevel()
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getStartLevel()
  public Boolean hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$getUpDown()
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$setDimmingDuration(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$setIgnoreStartLevel(Boolean)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$setStartLevel(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelStartLevelChange.super$4$setUpDown(Boolean)
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv1.SwitchMultilevelStopLevelChange.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedGet.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedGet.getPayload()
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.getPrimarySwitchType()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.getSecondarySwitchType()
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.setPrimarySwitchType(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.setSecondarySwitchType(Short)
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.switchmultilevelv4.SwitchMultilevelSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.getPayload()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.getPrimarySwitchType()
  public Short hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.getSecondarySwitchType()
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.setPrimarySwitchType(Short)
  public void hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.setSecondarySwitchType(Short)
  public List hubitat.zwave.commands.switchmultilevelv3.SwitchMultilevelSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglebinaryv1.SwitchToggleBinaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglebinaryv1.SwitchToggleBinaryGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglebinaryv1.SwitchToggleBinaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglebinaryv1.SwitchToggleBinaryReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglebinaryv1.SwitchToggleBinarySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglebinaryv1.SwitchToggleBinarySet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglemultilevelv1.SwitchToggleMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglemultilevelv1.SwitchToggleMultilevelGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglemultilevelv1.SwitchToggleMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglemultilevelv1.SwitchToggleMultilevelReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getValue()
  public void setValue(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglemultilevelv1.SwitchToggleMultilevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglemultilevelv1.SwitchToggleMultilevelSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglemultilevelv1.SwitchToggleMultilevelStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getIgnoreStartLevel()
  public List getPayload()
  public Boolean getRollOver()
  public Short getStartLevel()
  public void setIgnoreStartLevel(Boolean)
  public void setRollOver(Boolean)
  public void setStartLevel(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglemultilevelv1.SwitchToggleMultilevelStartLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getIgnoreStartLevel()
  public List getPayload()
  public Boolean getRollOver()
  public Short getStartLevel()
  public void setIgnoreStartLevel(Boolean)
  public void setRollOver(Boolean)
  public void setStartLevel(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglemultilevelv1.SwitchToggleMultilevelStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.switchtogglemultilevelv1.SwitchToggleMultilevelStopLevelChange:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tariffconfigv1.TariffTblRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List getRateParameterSetId()
  public Short getRateParameterSetIds()
  public void setRateParameterSetId(List)
  public void setRateParameterSetIds(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tariffconfigv1.TariffTblRemove:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List getRateParameterSetId()
  public Short getRateParameterSetIds()
  public void setRateParameterSetId(List)
  public void setRateParameterSetIds(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tariffconfigv1.TariffTblSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getTariffPrecision()
  public Integer getTariffValue()
  public void setRateParameterSetId(Short)
  public void setTariffPrecision(Short)
  public void setTariffValue(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tariffconfigv1.TariffTblSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getTariffPrecision()
  public Integer getTariffValue()
  public void setRateParameterSetId(Short)
  public void setTariffPrecision(Short)
  public void setTariffValue(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tariffconfigv1.TariffTblSupplierSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCurrency()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Short getNumberOfSupplierCharacters()
  public List getPayload()
  public Short getSecondLocalTime()
  public Short getStandingChargePeriod()
  public Short getStandingChargePrecision()
  public Integer getStandingChargeValue()
  public List getSupplierCharacter()
  public Integer getYear()
  public void setCurrency(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setNumberOfSupplierCharacters(Short)
  public void setSecondLocalTime(Short)
  public void setStandingChargePeriod(Short)
  public void setStandingChargePrecision(Short)
  public void setStandingChargeValue(Integer)
  public void setSupplierCharacter(List)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tariffconfigv1.TariffTblSupplierSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCurrency()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Short getNumberOfSupplierCharacters()
  public List getPayload()
  public Short getSecondLocalTime()
  public Short getStandingChargePeriod()
  public Short getStandingChargePrecision()
  public Integer getStandingChargeValue()
  public List getSupplierCharacter()
  public Integer getYear()
  public void setCurrency(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setNumberOfSupplierCharacters(Short)
  public void setSecondLocalTime(Short)
  public void setStandingChargePeriod(Short)
  public void setStandingChargePrecision(Short)
  public void setStandingChargeValue(Integer)
  public void setSupplierCharacter(List)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblCostGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Integer getStopYear()
  public void setRateParameterSetId(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblCostGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Integer getStopYear()
  public void setRateParameterSetId(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblCostReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getCostPrecision()
  public Integer getCostValue()
  public Integer getCurrency()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getRateType()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Integer getStopYear()
  public void setCostPrecision(Short)
  public void setCostValue(Integer)
  public void setCurrency(Integer)
  public void setRateParameterSetId(Short)
  public void setRateType(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblCostReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getCostPrecision()
  public Integer getCostValue()
  public Integer getCurrency()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getRateType()
  public Short getStartDay()
  public Short getStartHourLocalTime()
  public Short getStartMinuteLocalTime()
  public Short getStartMonth()
  public Integer getStartYear()
  public Short getStopDay()
  public Short getStopHourLocalTime()
  public Short getStopMinuteLocalTime()
  public Short getStopMonth()
  public Integer getStopYear()
  public void setCostPrecision(Short)
  public void setCostValue(Integer)
  public void setCurrency(Integer)
  public void setRateParameterSetId(Short)
  public void setRateType(Short)
  public void setStartDay(Short)
  public void setStartHourLocalTime(Short)
  public void setStartMinuteLocalTime(Short)
  public void setStartMonth(Short)
  public void setStartYear(Integer)
  public void setStopDay(Short)
  public void setStopHourLocalTime(Short)
  public void setStopMinuteLocalTime(Short)
  public void setStopMonth(Short)
  public void setStopYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public void setRateParameterSetId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public void setRateParameterSetId(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getTariffPrecision()
  public Integer getTariffValue()
  public void setRateParameterSetId(Short)
  public void setTariffPrecision(Short)
  public void setTariffValue(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRateParameterSetId()
  public Short getTariffPrecision()
  public Integer getTariffValue()
  public void setRateParameterSetId(Short)
  public void setTariffPrecision(Short)
  public void setTariffValue(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblSupplierGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblSupplierGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblSupplierReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCurrency()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Short getNumberOfSupplierCharacters()
  public List getPayload()
  public Short getSecondLocalTime()
  public Short getStandingChargePeriod()
  public Short getStandingChargePrecision()
  public Integer getStandingChargeValue()
  public List getSupplierCharacter()
  public Integer getYear()
  public void setCurrency(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setNumberOfSupplierCharacters(Short)
  public void setSecondLocalTime(Short)
  public void setStandingChargePeriod(Short)
  public void setStandingChargePrecision(Short)
  public void setStandingChargeValue(Integer)
  public void setSupplierCharacter(List)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.tarifftblmonitorv1.TariffTblSupplierReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getCurrency()
  public Short getDay()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public Short getMonth()
  public Short getNumberOfSupplierCharacters()
  public List getPayload()
  public Short getSecondLocalTime()
  public Short getStandingChargePeriod()
  public Short getStandingChargePrecision()
  public Integer getStandingChargeValue()
  public List getSupplierCharacter()
  public Integer getYear()
  public void setCurrency(Integer)
  public void setDay(Short)
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setMonth(Short)
  public void setNumberOfSupplierCharacters(Short)
  public void setSecondLocalTime(Short)
  public void setStandingChargePeriod(Short)
  public void setStandingChargePrecision(Short)
  public void setStandingChargeValue(Integer)
  public void setSupplierCharacter(List)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short FAN_MODE_AUTO_HIGH = 2
  public static Short FAN_MODE_AUTO_LOW = 0
  public static Short FAN_MODE_HIGH = 3
  public static Short FAN_MODE_LOW = 1
  public Short getFanMode()
  public List getPayload()
  public void setFanMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short FAN_MODE_AUTO_HIGH = 2
  public static Short FAN_MODE_AUTO_LOW = 0
  public static Short FAN_MODE_HIGH = 3
  public static Short FAN_MODE_LOW = 1
  public Short getFanMode()
  public List getPayload()
  public void setFanMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_MODE_AUTO_HIGH = 2
  public static short FAN_MODE_AUTO_LOW = 0
  public static short FAN_MODE_HIGH = 3
  public static short FAN_MODE_LOW = 1
  public Short getFanMode()
  public List getPayload()
  public void setFanMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_MODE_AUTO_HIGH = 2
  public static short FAN_MODE_AUTO_LOW = 0
  public static short FAN_MODE_HIGH = 3
  public static short FAN_MODE_LOW = 1
  public Short getFanMode()
  public List getPayload()
  public void setFanMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAuto()
  public Boolean getAutoHigh()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getHigh()
  public Boolean getLow()
  public List getPayload()
  public void setAuto(Boolean)
  public void setAutoHigh(Boolean)
  public void setHigh(Boolean)
  public void setLow(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAuto()
  public Boolean getAutoHigh()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getHigh()
  public Boolean getLow()
  public List getPayload()
  public void setAuto(Boolean)
  public void setAutoHigh(Boolean)
  public void setHigh(Boolean)
  public void setLow(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short FAN_MODE_AUTO_HIGH = 2
  public static Short FAN_MODE_AUTO_LOW = 0
  public static Short FAN_MODE_AUTO_MEDIUM = 4
  public static Short FAN_MODE_HIGH = 3
  public static Short FAN_MODE_LOW = 1
  public static Short FAN_MODE_MEDIUM = 5
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getFanMode()
  public Boolean getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.setFanMode(Short)
  public void setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short FAN_MODE_AUTO_HIGH = 2
  public static Short FAN_MODE_AUTO_LOW = 0
  public static Short FAN_MODE_AUTO_MEDIUM = 4
  public static Short FAN_MODE_HIGH = 3
  public static Short FAN_MODE_LOW = 1
  public static Short FAN_MODE_MEDIUM = 5
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getFanMode()
  public Boolean getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.setFanMode(Short)
  public void setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_MODE_AUTO_HIGH = 2
  public static short FAN_MODE_AUTO_LOW = 0
  public static short FAN_MODE_AUTO_MEDIUM = 4
  public static short FAN_MODE_HIGH = 3
  public static short FAN_MODE_LOW = 1
  public static short FAN_MODE_MEDIUM = 5
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getFanMode()
  public Boolean getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.setFanMode(Short)
  public void setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_MODE_AUTO_HIGH = 2
  public static short FAN_MODE_AUTO_LOW = 0
  public static short FAN_MODE_AUTO_MEDIUM = 4
  public static short FAN_MODE_HIGH = 3
  public static short FAN_MODE_LOW = 1
  public static short FAN_MODE_MEDIUM = 5
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getFanMode()
  public Boolean getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.setFanMode(Short)
  public void setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAutoHigh()
  public Boolean getAutoMedium()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getLow()
  public Boolean getMedium()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAutoHigh(Boolean)
  public void setAutoMedium(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setLow(Boolean)
  public void setMedium(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAutoHigh()
  public Boolean getAutoMedium()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getLow()
  public Boolean getMedium()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAutoHigh(Boolean)
  public void setAutoMedium(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setLow(Boolean)
  public void setMedium(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short FAN_MODE_AUTO_HIGH = 2
  public static Short FAN_MODE_AUTO_LOW = 0
  public static Short FAN_MODE_AUTO_MEDIUM = 4
  public static Short FAN_MODE_CIRCULATION = 6
  public static Short FAN_MODE_HIGH = 3
  public static Short FAN_MODE_HUMIDITY = 7
  public static Short FAN_MODE_LOW = 1
  public static Short FAN_MODE_MEDIUM = 5
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short FAN_MODE_AUTO_HIGH = 2
  public static Short FAN_MODE_AUTO_LOW = 0
  public static Short FAN_MODE_AUTO_MEDIUM = 4
  public static Short FAN_MODE_CIRCULATION = 6
  public static Short FAN_MODE_HIGH = 3
  public static Short FAN_MODE_HUMIDITY = 7
  public static Short FAN_MODE_LOW = 1
  public static Short FAN_MODE_MEDIUM = 5
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_MODE_AUTO_HIGH = 2
  public static short FAN_MODE_AUTO_LOW = 0
  public static short FAN_MODE_AUTO_MEDIUM = 4
  public static short FAN_MODE_CIRCULATION = 6
  public static short FAN_MODE_HIGH = 3
  public static short FAN_MODE_HUMIDITY = 7
  public static short FAN_MODE_LOW = 1
  public static short FAN_MODE_MEDIUM = 5
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_MODE_AUTO_HIGH = 2
  public static short FAN_MODE_AUTO_LOW = 0
  public static short FAN_MODE_AUTO_MEDIUM = 4
  public static short FAN_MODE_CIRCULATION = 6
  public static short FAN_MODE_HIGH = 3
  public static short FAN_MODE_HUMIDITY = 7
  public static short FAN_MODE_LOW = 1
  public static short FAN_MODE_MEDIUM = 5
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAutoHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getAutoMedium()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getCMD()
  public Boolean getCirculation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getHigh()
  public Boolean getHumidityCirculation()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getLow()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getMedium()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAutoHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setAutoMedium(Boolean)
  public void setCirculation(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setHigh(Boolean)
  public void setHumidityCirculation(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setLow(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setMedium(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAutoHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getAutoMedium()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getCMD()
  public Boolean getCirculation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getHigh()
  public Boolean getHumidityCirculation()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getLow()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getMedium()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAutoHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setAutoMedium(Boolean)
  public void setCirculation(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setHigh(Boolean)
  public void setHumidityCirculation(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setLow(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setMedium(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short FAN_MODE_AUTO_HIGH = 2
  public static Short FAN_MODE_AUTO_LOW = 0
  public static Short FAN_MODE_AUTO_MEDIUM = 4
  public static Short FAN_MODE_CIRCULATION = 6
  public static Short FAN_MODE_HIGH = 3
  public static Short FAN_MODE_HUMIDITY = 7
  public static short FAN_MODE_LEFT_RIGHT = 8
  public static Short FAN_MODE_LOW = 1
  public static Short FAN_MODE_MEDIUM = 5
  public static short FAN_MODE_QUIET = 10
  public static short FAN_MODE_UP_DOWN = 9
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short FAN_MODE_AUTO_HIGH = 2
  public static Short FAN_MODE_AUTO_LOW = 0
  public static Short FAN_MODE_AUTO_MEDIUM = 4
  public static Short FAN_MODE_CIRCULATION = 6
  public static Short FAN_MODE_HIGH = 3
  public static Short FAN_MODE_HUMIDITY = 7
  public static short FAN_MODE_LEFT_RIGHT = 8
  public static Short FAN_MODE_LOW = 1
  public static Short FAN_MODE_MEDIUM = 5
  public static short FAN_MODE_QUIET = 10
  public static short FAN_MODE_UP_DOWN = 9
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_MODE_AUTO_HIGH = 2
  public static short FAN_MODE_AUTO_LOW = 0
  public static short FAN_MODE_AUTO_MEDIUM = 4
  public static short FAN_MODE_CIRCULATION = 6
  public static short FAN_MODE_HIGH = 3
  public static short FAN_MODE_HUMIDITY = 7
  public static short FAN_MODE_LEFT_RIGHT = 8
  public static short FAN_MODE_LOW = 1
  public static short FAN_MODE_MEDIUM = 5
  public static short FAN_MODE_QUIET = 10
  public static short FAN_MODE_UP_DOWN = 9
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_MODE_AUTO_HIGH = 2
  public static short FAN_MODE_AUTO_LOW = 0
  public static short FAN_MODE_AUTO_MEDIUM = 4
  public static short FAN_MODE_CIRCULATION = 6
  public static short FAN_MODE_HIGH = 3
  public static short FAN_MODE_HUMIDITY = 7
  public static short FAN_MODE_LEFT_RIGHT = 8
  public static short FAN_MODE_LOW = 1
  public static short FAN_MODE_MEDIUM = 5
  public static short FAN_MODE_QUIET = 10
  public static short FAN_MODE_UP_DOWN = 9
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAutoHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getAutoMedium()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getCMD()
  public Boolean hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.getCirculation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.getHumidityCirculation()
  public Boolean getLeftRight()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getLow()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getMedium()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getPayload()
  public Boolean getQuiet()
  public Boolean getUpDown()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAutoHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setAutoMedium(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.setCirculation(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.setHumidityCirculation(Boolean)
  public void setLeftRight(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setLow(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setMedium(Boolean)
  public void setQuiet(Boolean)
  public void setUpDown(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAutoHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getAutoMedium()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getCMD()
  public Boolean hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.getCirculation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.getHumidityCirculation()
  public Boolean getLeftRight()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getLow()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getMedium()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getPayload()
  public Boolean getQuiet()
  public Boolean getUpDown()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAutoHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setAutoMedium(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.setCirculation(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.setHumidityCirculation(Boolean)
  public void setLeftRight(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setLow(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setMedium(Boolean)
  public void setQuiet(Boolean)
  public void setUpDown(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev5.ThermostatFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev5.ThermostatFanModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev5.ThermostatFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short FAN_MODE_AUTO_HIGH = 2
  public static Short FAN_MODE_AUTO_LOW = 0
  public static Short FAN_MODE_AUTO_MEDIUM = 4
  public static Short FAN_MODE_CIRCULATION = 6
  public static short FAN_MODE_EXTERNAL_CIRCULATION = 11
  public static Short FAN_MODE_HIGH = 3
  public static Short FAN_MODE_HUMIDITY = 7
  public static short FAN_MODE_LEFT_RIGHT = 8
  public static Short FAN_MODE_LOW = 1
  public static Short FAN_MODE_MEDIUM = 5
  public static short FAN_MODE_QUIET = 10
  public static short FAN_MODE_UP_DOWN = 9
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev5.ThermostatFanModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short FAN_MODE_AUTO_HIGH = 2
  public static Short FAN_MODE_AUTO_LOW = 0
  public static Short FAN_MODE_AUTO_MEDIUM = 4
  public static Short FAN_MODE_CIRCULATION = 6
  public static short FAN_MODE_EXTERNAL_CIRCULATION = 11
  public static Short FAN_MODE_HIGH = 3
  public static Short FAN_MODE_HUMIDITY = 7
  public static short FAN_MODE_LEFT_RIGHT = 8
  public static Short FAN_MODE_LOW = 1
  public static Short FAN_MODE_MEDIUM = 5
  public static short FAN_MODE_QUIET = 10
  public static short FAN_MODE_UP_DOWN = 9
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeReport.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev5.ThermostatFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_MODE_AUTO_HIGH = 2
  public static short FAN_MODE_AUTO_LOW = 0
  public static short FAN_MODE_AUTO_MEDIUM = 4
  public static short FAN_MODE_CIRCULATION = 6
  public static short FAN_MODE_EXTERNAL_CIRCULATION = 11
  public static short FAN_MODE_HIGH = 3
  public static short FAN_MODE_HUMIDITY = 7
  public static short FAN_MODE_LEFT_RIGHT = 8
  public static short FAN_MODE_LOW = 1
  public static short FAN_MODE_MEDIUM = 5
  public static short FAN_MODE_QUIET = 10
  public static short FAN_MODE_UP_DOWN = 9
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev5.ThermostatFanModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_MODE_AUTO_HIGH = 2
  public static short FAN_MODE_AUTO_LOW = 0
  public static short FAN_MODE_AUTO_MEDIUM = 4
  public static short FAN_MODE_CIRCULATION = 6
  public static short FAN_MODE_EXTERNAL_CIRCULATION = 11
  public static short FAN_MODE_HIGH = 3
  public static short FAN_MODE_HUMIDITY = 7
  public static short FAN_MODE_LEFT_RIGHT = 8
  public static short FAN_MODE_LOW = 1
  public static short FAN_MODE_MEDIUM = 5
  public static short FAN_MODE_QUIET = 10
  public static short FAN_MODE_UP_DOWN = 9
  public Short hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getFanMode()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.getOff()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.getPayload()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.setFanMode(Short)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSet.setOff(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev5.ThermostatFanModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev5.ThermostatFanModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev5.ThermostatFanModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAutoHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getAutoMedium()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getCMD()
  public Boolean hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.getCirculation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getExternalCirculation()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.getHumidityCirculation()
  public Boolean hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.getLeftRight()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getLow()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getMedium()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getPayload()
  public Boolean hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.getQuiet()
  public Boolean hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.getUpDown()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAutoHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setAutoMedium(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.setCirculation(Boolean)
  public void setExternalCirculation(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.setHumidityCirculation(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.setLeftRight(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setLow(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setMedium(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.setQuiet(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.setUpDown(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanmodev5.ThermostatFanModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getAutoHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getAutoMedium()
  public String hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getCMD()
  public Boolean hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.getCirculation()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getExternalCirculation()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getHigh()
  public Boolean hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.getHumidityCirculation()
  public Boolean hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.getLeftRight()
  public Boolean hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getLow()
  public Boolean hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.getMedium()
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.getPayload()
  public Boolean hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.getQuiet()
  public Boolean hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.getUpDown()
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setAutoHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setAutoMedium(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.setCirculation(Boolean)
  public void setExternalCirculation(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setHigh(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev3.ThermostatFanModeSupportedReport.setHumidityCirculation(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.setLeftRight(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.setLow(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev2.ThermostatFanModeSupportedReport.setMedium(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.setQuiet(Boolean)
  public void hubitat.zwave.commands.thermostatfanmodev4.ThermostatFanModeSupportedReport.setUpDown(Boolean)
  public List hubitat.zwave.commands.thermostatfanmodev1.ThermostatFanModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_OPERATING_STATE_IDLE_OFF = 0
  public static short FAN_OPERATING_STATE_RUNNING = 1
  public static short FAN_OPERATING_STATE_RUNNING_HIGH = 2
  public Short getFanOperatingState()
  public List getPayload()
  public void setFanOperatingState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_OPERATING_STATE_IDLE_OFF = 0
  public static short FAN_OPERATING_STATE_RUNNING = 1
  public static short FAN_OPERATING_STATE_RUNNING_HIGH = 2
  public Short getFanOperatingState()
  public List getPayload()
  public void setFanOperatingState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanstatev2.ThermostatFanStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanstatev2.ThermostatFanStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateGet.getPayload()
  public List hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanstatev2.ThermostatFanStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_OPERATING_STATE_CIRCULATION_MODE = 4
  public static short FAN_OPERATING_STATE_HUMIDITY_CIRCULATION_MODE = 5
  public static short FAN_OPERATING_STATE_IDLE_OFF = 0
  public static short FAN_OPERATING_STATE_QUIET_CIRCULATION_MODE = 8
  public static short FAN_OPERATING_STATE_RIGHT_LEFT_CIRCULATION_MODE = 6
  public static short FAN_OPERATING_STATE_RUNNING = 1
  public static short FAN_OPERATING_STATE_RUNNING_HIGH = 2
  public static short FAN_OPERATING_STATE_RUNNING_MEDIUM = 3
  public static short FAN_OPERATING_STATE_UP_DOWN_CIRCULATION_MODE = 7
  public Short hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport.getFanOperatingState()
  public List hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport.setFanOperatingState(Short)
  public List hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatfanstatev2.ThermostatFanStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short FAN_OPERATING_STATE_CIRCULATION_MODE = 4
  public static short FAN_OPERATING_STATE_HUMIDITY_CIRCULATION_MODE = 5
  public static short FAN_OPERATING_STATE_IDLE_OFF = 0
  public static short FAN_OPERATING_STATE_QUIET_CIRCULATION_MODE = 8
  public static short FAN_OPERATING_STATE_RIGHT_LEFT_CIRCULATION_MODE = 6
  public static short FAN_OPERATING_STATE_RUNNING = 1
  public static short FAN_OPERATING_STATE_RUNNING_HIGH = 2
  public static short FAN_OPERATING_STATE_RUNNING_MEDIUM = 3
  public static short FAN_OPERATING_STATE_UP_DOWN_CIRCULATION_MODE = 7
  public Short hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport.getFanOperatingState()
  public List hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport.getPayload()
  public void hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport.setFanOperatingState(Short)
  public List hubitat.zwave.commands.thermostatfanstatev1.ThermostatFanStateReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_ANTI_FREEZE = 3
  public static Short MODE_AUTOMATIC = 6
  public static Short MODE_MANUAL = 4
  public static Short MODE_MANUAL_TIMED = 7
  public static Short MODE_OFF = 0
  public static Short MODE_OFF_3_HOURS = 2
  public static Short MODE_OFF_TIMED = 1
  public static Short MODE_TEMPORARY_MANUAL = 5
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_ANTI_FREEZE = 3
  public static Short MODE_AUTOMATIC = 6
  public static Short MODE_MANUAL = 4
  public static Short MODE_MANUAL_TIMED = 7
  public static Short MODE_OFF = 0
  public static Short MODE_OFF_3_HOURS = 2
  public static Short MODE_OFF_TIMED = 1
  public static Short MODE_TEMPORARY_MANUAL = 5
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_ANTI_FREEZE = 3
  public static Short MODE_AUTOMATIC = 6
  public static Short MODE_MANUAL = 4
  public static Short MODE_MANUAL_TIMED = 7
  public static Short MODE_OFF = 0
  public static Short MODE_OFF_3_HOURS = 2
  public static Short MODE_OFF_TIMED = 1
  public static Short MODE_TEMPORARY_MANUAL = 5
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short MODE_ANTI_FREEZE = 3
  public static Short MODE_AUTOMATIC = 6
  public static Short MODE_MANUAL = 4
  public static Short MODE_MANUAL_TIMED = 7
  public static Short MODE_OFF = 0
  public static Short MODE_OFF_3_HOURS = 2
  public static Short MODE_OFF_TIMED = 1
  public static Short MODE_TEMPORARY_MANUAL = 5
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingRelayStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingRelayStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingRelayStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short RELAY_STATUS_OFF = 0
  public static Short RELAY_STATUS_ON = 1
  public Short getRelayStatus()
  public void setRelayStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingRelayStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short RELAY_STATUS_OFF = 0
  public static Short RELAY_STATUS_ON = 1
  public Short getRelayStatus()
  public void setRelayStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSetpointNr()
  public void setSetpointNr(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSetpointNr()
  public void setSetpointNr(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointNr()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointNr(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointNr()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointNr(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointNr()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointNr(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointNr()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointNr(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingStatusGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_COOLING = 1
  public static Short STATUS_HEATING = 0
  public Short getStatus()
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingStatusReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_COOLING = 1
  public static Short STATUS_HEATING = 0
  public Short getStatus()
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingStatusSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_COOLING = 1
  public static Short STATUS_HEATING = 0
  public Short getStatus()
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingStatusSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short STATUS_COOLING = 1
  public static Short STATUS_HEATING = 0
  public Short getStatus()
  public void setStatus(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingTimedOffSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHours()
  public Short getMinutes()
  public List getPayload()
  public void setHours(Short)
  public void setMinutes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatheatingv1.ThermostatHeatingTimedOffSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHours()
  public Short getMinutes()
  public List getPayload()
  public void setHours(Short)
  public void setMinutes(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public Short getMode()
  public List getPayload()
  public void setMode(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAuto()
  public Boolean getAutoChangeover()
  public Boolean getAuxiliaryemergencyHeat()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCool()
  public Boolean getDryAir()
  public Boolean getFanOnly()
  public Boolean getFurnace()
  public Boolean getHeat()
  public Boolean getMoistAir()
  public Boolean getOff()
  public List getPayload()
  public Boolean getResume()
  public void setAuto(Boolean)
  public void setAutoChangeover(Boolean)
  public void setAuxiliaryemergencyHeat(Boolean)
  public void setCool(Boolean)
  public void setDryAir(Boolean)
  public void setFanOnly(Boolean)
  public void setFurnace(Boolean)
  public void setHeat(Boolean)
  public void setMoistAir(Boolean)
  public void setOff(Boolean)
  public void setResume(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAuto()
  public Boolean getAutoChangeover()
  public Boolean getAuxiliaryemergencyHeat()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCool()
  public Boolean getDryAir()
  public Boolean getFanOnly()
  public Boolean getFurnace()
  public Boolean getHeat()
  public Boolean getMoistAir()
  public Boolean getOff()
  public List getPayload()
  public Boolean getResume()
  public void setAuto(Boolean)
  public void setAutoChangeover(Boolean)
  public void setAuxiliaryemergencyHeat(Boolean)
  public void setCool(Boolean)
  public void setDryAir(Boolean)
  public void setFanOnly(Boolean)
  public void setFurnace(Boolean)
  public void setHeat(Boolean)
  public void setMoistAir(Boolean)
  public void setOff(Boolean)
  public void setResume(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev2.ThermostatModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev2.ThermostatModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev2.ThermostatModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_AWAY = 13
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_ENERGY_SAVE_COOL = 12
  public static short MODE_ENERGY_SAVE_HEAT = 11
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public Short hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.getMode()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.getPayload()
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.setMode(Short)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev2.ThermostatModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_AWAY = 13
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_ENERGY_SAVE_COOL = 12
  public static short MODE_ENERGY_SAVE_HEAT = 11
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public Short hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.getMode()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.getPayload()
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.setMode(Short)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev2.ThermostatModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_AWAY = 13
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_ENERGY_SAVE_COOL = 12
  public static short MODE_ENERGY_SAVE_HEAT = 11
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public Short hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getMode()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getPayload()
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.setMode(Short)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev2.ThermostatModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_AWAY = 13
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_ENERGY_SAVE_COOL = 12
  public static short MODE_ENERGY_SAVE_HEAT = 11
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public Short hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getMode()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getPayload()
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.setMode(Short)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAutoChangeover()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAuxiliaryemergencyHeat()
  public Boolean getAway()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getCool()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getDryAir()
  public Boolean getEnergySaveCool()
  public Boolean getEnergySaveHeat()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getFanOnly()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getFurnace()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getHeat()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getMoistAir()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getOff()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getPayload()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getResume()
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAutoChangeover(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAuxiliaryemergencyHeat(Boolean)
  public void setAway(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setCool(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setDryAir(Boolean)
  public void setEnergySaveCool(Boolean)
  public void setEnergySaveHeat(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setFanOnly(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setFurnace(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setHeat(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setMoistAir(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setOff(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setResume(Boolean)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAutoChangeover()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAuxiliaryemergencyHeat()
  public Boolean getAway()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getCool()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getDryAir()
  public Boolean getEnergySaveCool()
  public Boolean getEnergySaveHeat()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getFanOnly()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getFurnace()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getHeat()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getMoistAir()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getOff()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getPayload()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getResume()
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAutoChangeover(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAuxiliaryemergencyHeat(Boolean)
  public void setAway(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setCool(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setDryAir(Boolean)
  public void setEnergySaveCool(Boolean)
  public void setEnergySaveHeat(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setFanOnly(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setFurnace(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setHeat(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setMoistAir(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setOff(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setResume(Boolean)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev3.ThermostatModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev3.ThermostatModeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.getPayload()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev3.ThermostatModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_AWAY = 13
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_ENERGY_SAVE_COOL = 12
  public static short MODE_ENERGY_SAVE_HEAT = 11
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FULL_POWER = 15
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MANUFACTURER_SPECIFIC = 31
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public List getManufacturerData()
  public Short hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.getMode()
  public Short getNoOfManufacturerDataFields()
  public List getPayload()
  public void setManufacturerData(List)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.setMode(Short)
  public void setNoOfManufacturerDataFields(Short)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.thermostatmodev3.ThermostatModeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_AWAY = 13
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_ENERGY_SAVE_COOL = 12
  public static short MODE_ENERGY_SAVE_HEAT = 11
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FULL_POWER = 15
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MANUFACTURER_SPECIFIC = 31
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public List getManufacturerData()
  public Short hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.getMode()
  public Short getNoOfManufacturerDataFields()
  public List getPayload()
  public void setManufacturerData(List)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.setMode(Short)
  public void setNoOfManufacturerDataFields(Short)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.thermostatmodev3.ThermostatModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_AWAY = 13
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_ENERGY_SAVE_COOL = 12
  public static short MODE_ENERGY_SAVE_HEAT = 11
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FULL_POWER = 15
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MANUFACTURER_SPECIFIC = 31
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public List getManufacturerData()
  public Short hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getMode()
  public Short getNoOfManufacturerDataFields()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getPayload()
  public void setManufacturerData(List)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.setMode(Short)
  public void setNoOfManufacturerDataFields(Short)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev3.ThermostatModeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static short MODE_AUTO = 3
  public static short MODE_AUTO_CHANGEOVER = 10
  public static short MODE_AUXILIARY_HEAT = 4
  public static short MODE_AWAY = 13
  public static short MODE_COOL = 2
  public static short MODE_DRY_AIR = 8
  public static short MODE_ENERGY_SAVE_COOL = 12
  public static short MODE_ENERGY_SAVE_HEAT = 11
  public static short MODE_FAN_ONLY = 6
  public static short MODE_FULL_POWER = 15
  public static short MODE_FURNACE = 7
  public static short MODE_HEAT = 1
  public static short MODE_MANUFACTURER_SPECIFIC = 31
  public static short MODE_MOIST_AIR = 9
  public static short MODE_OFF = 0
  public static short MODE_RESUME = 5
  public List getManufacturerData()
  public Short hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getMode()
  public Short getNoOfManufacturerDataFields()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.getPayload()
  public void setManufacturerData(List)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.setMode(Short)
  public void setNoOfManufacturerDataFields(Short)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev3.ThermostatModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev3.ThermostatModeSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev3.ThermostatModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAutoChangeover()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAuxiliaryemergencyHeat()
  public Boolean hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.getAway()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getCool()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getDryAir()
  public Boolean hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.getEnergySaveCool()
  public Boolean hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.getEnergySaveHeat()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getFanOnly()
  public Boolean getFullPower()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getFurnace()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getHeat()
  public Boolean getManufacturerSpecific()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getMoistAir()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getOff()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getPayload()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getResume()
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAutoChangeover(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAuxiliaryemergencyHeat(Boolean)
  public void hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.setAway(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setCool(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setDryAir(Boolean)
  public void hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.setEnergySaveCool(Boolean)
  public void hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.setEnergySaveHeat(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setFanOnly(Boolean)
  public void setFullPower(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setFurnace(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setHeat(Boolean)
  public void setManufacturerSpecific(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setMoistAir(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setOff(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setResume(Boolean)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatmodev3.ThermostatModeSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAuto()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAutoChangeover()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getAuxiliaryemergencyHeat()
  public Boolean hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.getAway()
  public String hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getCool()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getDryAir()
  public Boolean hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.getEnergySaveCool()
  public Boolean hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.getEnergySaveHeat()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getFanOnly()
  public Boolean getFullPower()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getFurnace()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getHeat()
  public Boolean getManufacturerSpecific()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getMoistAir()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getOff()
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getPayload()
  public Boolean hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.getResume()
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAuto(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAutoChangeover(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setAuxiliaryemergencyHeat(Boolean)
  public void hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.setAway(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setCool(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setDryAir(Boolean)
  public void hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.setEnergySaveCool(Boolean)
  public void hubitat.zwave.commands.thermostatmodev2.ThermostatModeSupportedReport.setEnergySaveHeat(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setFanOnly(Boolean)
  public void setFullPower(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setFurnace(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setHeat(Boolean)
  public void setManufacturerSpecific(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setMoistAir(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setOff(Boolean)
  public void hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.setResume(Boolean)
  public List hubitat.zwave.commands.thermostatmodev1.ThermostatModeSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short OPERATING_STATE_COOLING = 2
  public static Short OPERATING_STATE_FAN_ONLY = 3
  public static Short OPERATING_STATE_HEATING = 1
  public static Short OPERATING_STATE_IDLE = 0
  public static Short OPERATING_STATE_PENDING_COOL = 5
  public static Short OPERATING_STATE_PENDING_HEAT = 4
  public static Short OPERATING_STATE_VENT_ECONOMIZER = 6
  public Short getOperatingState()
  public List getPayload()
  public void setOperatingState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short OPERATING_STATE_COOLING = 2
  public static Short OPERATING_STATE_FAN_ONLY = 3
  public static Short OPERATING_STATE_HEATING = 1
  public static Short OPERATING_STATE_IDLE = 0
  public static Short OPERATING_STATE_PENDING_COOL = 5
  public static Short OPERATING_STATE_PENDING_HEAT = 4
  public static Short OPERATING_STATE_VENT_ECONOMIZER = 6
  public Short getOperatingState()
  public List getPayload()
  public void setOperatingState(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingLoggingSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAuxHeating()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCooling()
  public Boolean getFanOnly()
  public Boolean getHeating()
  public Boolean getIdle()
  public List getPayload()
  public Boolean getPendingCool()
  public Boolean getPendingHeat()
  public Boolean getSecondStageCooling()
  public Boolean getSecondStageHeating()
  public Boolean getVenteconomizer()
  public void setAuxHeating(Boolean)
  public void setCooling(Boolean)
  public void setFanOnly(Boolean)
  public void setHeating(Boolean)
  public void setIdle(Boolean)
  public void setPendingCool(Boolean)
  public void setPendingHeat(Boolean)
  public void setSecondStageCooling(Boolean)
  public void setSecondStageHeating(Boolean)
  public void setVenteconomizer(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingLoggingSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAuxHeating()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCooling()
  public Boolean getFanOnly()
  public Boolean getHeating()
  public Boolean getIdle()
  public List getPayload()
  public Boolean getPendingCool()
  public Boolean getPendingHeat()
  public Boolean getSecondStageCooling()
  public Boolean getSecondStageHeating()
  public Boolean getVenteconomizer()
  public void setAuxHeating(Boolean)
  public void setCooling(Boolean)
  public void setFanOnly(Boolean)
  public void setHeating(Boolean)
  public void setIdle(Boolean)
  public void setPendingCool(Boolean)
  public void setPendingHeat(Boolean)
  public void setSecondStageCooling(Boolean)
  public void setSecondStageHeating(Boolean)
  public void setVenteconomizer(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateGet.getPayload()
  public List hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingStateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateGet.getPayload()
  public List hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingStateLoggingGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAuxHeating()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCooling()
  public Boolean getFanOnly()
  public Boolean getHeating()
  public Boolean getIdle()
  public List getPayload()
  public Boolean getPendingCool()
  public Boolean getPendingHeat()
  public Boolean getSecondStageCooling()
  public Boolean getSecondStageHeating()
  public Boolean getVenteconomizer()
  public void setAuxHeating(Boolean)
  public void setCooling(Boolean)
  public void setFanOnly(Boolean)
  public void setHeating(Boolean)
  public void setIdle(Boolean)
  public void setPendingCool(Boolean)
  public void setPendingHeat(Boolean)
  public void setSecondStageCooling(Boolean)
  public void setSecondStageHeating(Boolean)
  public void setVenteconomizer(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingStateLoggingGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAuxHeating()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCooling()
  public Boolean getFanOnly()
  public Boolean getHeating()
  public Boolean getIdle()
  public List getPayload()
  public Boolean getPendingCool()
  public Boolean getPendingHeat()
  public Boolean getSecondStageCooling()
  public Boolean getSecondStageHeating()
  public Boolean getVenteconomizer()
  public void setAuxHeating(Boolean)
  public void setCooling(Boolean)
  public void setFanOnly(Boolean)
  public void setHeating(Boolean)
  public void setIdle(Boolean)
  public void setPendingCool(Boolean)
  public void setPendingHeat(Boolean)
  public void setSecondStageCooling(Boolean)
  public void setSecondStageHeating(Boolean)
  public void setVenteconomizer(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingStateLoggingReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingStateLoggingReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getReportsToFollow()
  public void setReportsToFollow(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingStateLoggingSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingStateLoggingSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short OPERATING_STATE_2ND_STAGE_COOLING = 9
  public static Short OPERATING_STATE_2ND_STAGE_HEATING = 8
  public static Short OPERATING_STATE_AUX_HEATING = 7
  public static Short OPERATING_STATE_COOLING = 2
  public static Short OPERATING_STATE_FAN_ONLY = 3
  public static Short OPERATING_STATE_HEATING = 1
  public static Short OPERATING_STATE_IDLE = 0
  public static Short OPERATING_STATE_PENDING_COOL = 5
  public static Short OPERATING_STATE_PENDING_HEAT = 4
  public static Short OPERATING_STATE_VENT_ECONOMIZER = 6
  public Short getOperatingState()
  public List getPayload()
  public void setOperatingState(Short)
  public List hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateReport.super$2$getPayload()
  public String super$3$getCMD()
  public Short super$3$getOperatingState()
  public List super$3$getPayload()
  public void super$3$setOperatingState(Short)
]
class hubitat.zwave.commands.thermostatoperatingstatev2.ThermostatOperatingStateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public static Short OPERATING_STATE_2ND_STAGE_COOLING = 9
  public static Short OPERATING_STATE_2ND_STAGE_HEATING = 8
  public static Short OPERATING_STATE_AUX_HEATING = 7
  public static Short OPERATING_STATE_COOLING = 2
  public static Short OPERATING_STATE_FAN_ONLY = 3
  public static Short OPERATING_STATE_HEATING = 1
  public static Short OPERATING_STATE_IDLE = 0
  public static Short OPERATING_STATE_PENDING_COOL = 5
  public static Short OPERATING_STATE_PENDING_HEAT = 4
  public static Short OPERATING_STATE_VENT_ECONOMIZER = 6
  public Short getOperatingState()
  public List getPayload()
  public void setOperatingState(Short)
  public List hubitat.zwave.commands.thermostatoperatingstatev1.ThermostatOperatingStateReport.super$2$getPayload()
  public String super$3$getCMD()
  public Short super$3$getOperatingState()
  public List super$3$getPayload()
  public void super$3$setOperatingState(Short)
]
class hubitat.zwave.commands.thermostatsetbackv1.ThermostatSetbackGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetbackv1.ThermostatSetbackGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetbackv1.ThermostatSetbackReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SETBACK_TYPE_NO_OVERRIDE = 0
  public static Short SETBACK_TYPE_PERMANENT_OVERRIDE = 2
  public static Short SETBACK_TYPE_RESERVED3 = 3
  public static Short SETBACK_TYPE_TEMPORARY_OVERRIDE = 1
  public Short getSetbackState()
  public Short getSetbackType()
  public void setSetbackState(Short)
  public void setSetbackType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetbackv1.ThermostatSetbackReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SETBACK_TYPE_NO_OVERRIDE = 0
  public static Short SETBACK_TYPE_PERMANENT_OVERRIDE = 2
  public static Short SETBACK_TYPE_RESERVED3 = 3
  public static Short SETBACK_TYPE_TEMPORARY_OVERRIDE = 1
  public Short getSetbackState()
  public Short getSetbackType()
  public void setSetbackState(Short)
  public void setSetbackType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetbackv1.ThermostatSetbackSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SETBACK_TYPE_NO_OVERRIDE = 0
  public static Short SETBACK_TYPE_PERMANENT_OVERRIDE = 2
  public static Short SETBACK_TYPE_RESERVED3 = 3
  public static Short SETBACK_TYPE_TEMPORARY_OVERRIDE = 1
  public Short getSetbackState()
  public Short getSetbackType()
  public void setSetbackState(Short)
  public void setSetbackType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetbackv1.ThermostatSetbackSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short SETBACK_TYPE_NO_OVERRIDE = 0
  public static Short SETBACK_TYPE_PERMANENT_OVERRIDE = 2
  public static Short SETBACK_TYPE_RESERVED3 = 3
  public static Short SETBACK_TYPE_TEMPORARY_OVERRIDE = 1
  public Short getSetbackState()
  public Short getSetbackType()
  public void setSetbackState(Short)
  public void setSetbackType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short getSetpointType()
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short getSetpointType()
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointType()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointType(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointType()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointType(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointType()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointType(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short getScale()
  public BigDecimal getScaledValue()
  public Short getSetpointType()
  public Short getSize()
  public List getValue()
  public void setPrecision(Short)
  public void setScale(Short)
  public void setScaledValue(BigDecimal)
  public void setSetpointType(Short)
  public void setSize(Short)
  public void setValue(List)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAutoChangeover()
  public List getBitmask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCooling()
  public Boolean getDryAir()
  public Boolean getFurnace()
  public Boolean getHeating()
  public Boolean getMoistAir()
  public Boolean getNone()
  public List getPayload()
  public void setAutoChangeover(Boolean)
  public void setBitmask(List)
  public void setCooling(Boolean)
  public void setDryAir(Boolean)
  public void setFurnace(Boolean)
  public void setHeating(Boolean)
  public void setMoistAir(Boolean)
  public void setNone(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean getAutoChangeover()
  public List getBitmask()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean getCooling()
  public Boolean getDryAir()
  public Boolean getFurnace()
  public Boolean getHeating()
  public Boolean getMoistAir()
  public Boolean getNone()
  public List getPayload()
  public void setAutoChangeover(Boolean)
  public void setBitmask(List)
  public void setCooling(Boolean)
  public void setDryAir(Boolean)
  public void setFurnace(Boolean)
  public void setHeating(Boolean)
  public void setMoistAir(Boolean)
  public void setNone(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getPayload()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getSetpointType()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.setSetpointType(Short)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getPayload()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getSetpointType()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.setSetpointType(Short)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getPayload()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getScale()
  public BigDecimal hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getScaledValue()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getSetpointType()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getSize()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getValue()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setPrecision(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setScale(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setSetpointType(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setSize(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setValue(List)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getPayload()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getScale()
  public BigDecimal hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getScaledValue()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getSetpointType()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getSize()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getValue()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setPrecision(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setScale(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setSetpointType(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setSize(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setValue(List)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getPayload()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getScale()
  public BigDecimal hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getScaledValue()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getSetpointType()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getSize()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getValue()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setPrecision(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setScale(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setSetpointType(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setSize(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setValue(List)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getPayload()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getScale()
  public BigDecimal hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getScaledValue()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getSetpointType()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getSize()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getValue()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setPrecision(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setScale(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setSetpointType(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setSize(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setValue(List)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getAutoChangeover()
  public Boolean getAwayHeating()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getBitmask()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getCooling()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getDryAir()
  public Boolean getEnergySaveCooling()
  public Boolean getEnergySaveHeating()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getFurnace()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getHeating()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getMoistAir()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getNone()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getPayload()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setAutoChangeover(Boolean)
  public void setAwayHeating(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setBitmask(List)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setCooling(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setDryAir(Boolean)
  public void setEnergySaveCooling(Boolean)
  public void setEnergySaveHeating(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setFurnace(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setHeating(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setMoistAir(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setNone(Boolean)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getAutoChangeover()
  public Boolean getAwayHeating()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getBitmask()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getCooling()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getDryAir()
  public Boolean getEnergySaveCooling()
  public Boolean getEnergySaveHeating()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getFurnace()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getHeating()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getMoistAir()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getNone()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getPayload()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setAutoChangeover(Boolean)
  public void setAwayHeating(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setBitmask(List)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setCooling(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setDryAir(Boolean)
  public void setEnergySaveCooling(Boolean)
  public void setEnergySaveHeating(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setFurnace(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setHeating(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setMoistAir(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setNone(Boolean)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_COOLING = 14
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FULL_POWER = 15
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short getSetpointType()
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_COOLING = 14
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FULL_POWER = 15
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short getSetpointType()
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaxPrecision()
  public Short getMaxScale()
  public BigDecimal getMaxScaledValue()
  public Short getMaxSize()
  public List getMaxValue()
  public Short getMinPrecision()
  public Short getMinScale()
  public BigDecimal getMinScaledValue()
  public Short getMinSize()
  public List getMinValue()
  public List getPayload()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_COOLING = 14
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FULL_POWER = 15
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short getSetpointType()
  public void setMaxPrecision(Short)
  public void setMaxScale(Short)
  public void setMaxScaledValue(BigDecimal)
  public void setMaxSize(Short)
  public void setMaxValue(List)
  public void setMinPrecision(Short)
  public void setMinScale(Short)
  public void setMinScaledValue(BigDecimal)
  public void setMinSize(Short)
  public void setMinValue(List)
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getMaxPrecision()
  public Short getMaxScale()
  public BigDecimal getMaxScaledValue()
  public Short getMaxSize()
  public List getMaxValue()
  public Short getMinPrecision()
  public Short getMinScale()
  public BigDecimal getMinScaledValue()
  public Short getMinSize()
  public List getMinValue()
  public List getPayload()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_COOLING = 14
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FULL_POWER = 15
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short getSetpointType()
  public void setMaxPrecision(Short)
  public void setMaxScale(Short)
  public void setMaxScaledValue(BigDecimal)
  public void setMaxSize(Short)
  public void setMaxValue(List)
  public void setMinPrecision(Short)
  public void setMinScale(Short)
  public void setMinScaledValue(BigDecimal)
  public void setMinSize(Short)
  public void setMinValue(List)
  public void setSetpointType(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getPayload()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_COOLING = 14
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FULL_POWER = 15
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getSetpointType()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.setSetpointType(Short)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getPayload()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_COOLING = 14
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FULL_POWER = 15
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.getSetpointType()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.setSetpointType(Short)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getPayload()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_COOLING = 14
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FULL_POWER = 15
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getScale()
  public BigDecimal hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getScaledValue()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getSetpointType()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getSize()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getValue()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setPrecision(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setScale(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setSetpointType(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setSize(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setValue(List)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getPayload()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_COOLING = 14
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FULL_POWER = 15
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getScale()
  public BigDecimal hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getScaledValue()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getSetpointType()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getSize()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.getValue()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setPrecision(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setScale(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setSetpointType(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setSize(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.setValue(List)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getPayload()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_COOLING = 14
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FULL_POWER = 15
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getScale()
  public BigDecimal hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getScaledValue()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getSetpointType()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getSize()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getValue()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setPrecision(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setScale(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setSetpointType(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setSize(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setValue(List)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getPayload()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getPrecision()
  public static short SETPOINT_TYPE_AUTO_CHANGEOVER = 10
  public static short SETPOINT_TYPE_AWAY_COOLING = 14
  public static short SETPOINT_TYPE_AWAY_HEATING = 13
  public static short SETPOINT_TYPE_COOLING_1 = 2
  public static short SETPOINT_TYPE_DRY_AIR = 8
  public static short SETPOINT_TYPE_ENERGY_SAVE_COOLING = 12
  public static short SETPOINT_TYPE_ENERGY_SAVE_HEATING = 11
  public static short SETPOINT_TYPE_FULL_POWER = 15
  public static short SETPOINT_TYPE_FURNACE = 7
  public static short SETPOINT_TYPE_HEATING_1 = 1
  public static short SETPOINT_TYPE_MOIST_AIR = 9
  public static short SETPOINT_TYPE_NOT_SUPPORTED = 0
  public static short SETPOINT_TYPE_NOT_SUPPORTED1 = 3
  public static short SETPOINT_TYPE_NOT_SUPPORTED2 = 4
  public static short SETPOINT_TYPE_NOT_SUPPORTED3 = 5
  public static short SETPOINT_TYPE_NOT_SUPPORTED4 = 6
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getScale()
  public BigDecimal hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getScaledValue()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getSetpointType()
  public Short hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getSize()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.getValue()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setPrecision(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setScale(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setScaledValue(BigDecimal)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setSetpointType(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setSize(Short)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.setValue(List)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointSupportedGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.getPayload()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedGet.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getAutoChangeover()
  public Boolean getAwayCooling()
  public Boolean hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.getAwayHeating()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getBitmask()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getCooling()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getDryAir()
  public Boolean hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.getEnergySaveCooling()
  public Boolean hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.getEnergySaveHeating()
  public Boolean getFullPower()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getFurnace()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getHeating()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getMoistAir()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getNone()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getPayload()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setAutoChangeover(Boolean)
  public void setAwayCooling(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.setAwayHeating(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setBitmask(List)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setCooling(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setDryAir(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.setEnergySaveCooling(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.setEnergySaveHeating(Boolean)
  public void setFullPower(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setFurnace(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setHeating(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setMoistAir(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setNone(Boolean)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.thermostatsetpointv3.ThermostatSetpointSupportedReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getAutoChangeover()
  public Boolean getAwayCooling()
  public Boolean hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.getAwayHeating()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getBitmask()
  public String hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getCooling()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getDryAir()
  public Boolean hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.getEnergySaveCooling()
  public Boolean hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.getEnergySaveHeating()
  public Boolean getFullPower()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getFurnace()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getHeating()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getMoistAir()
  public Boolean hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getNone()
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.getPayload()
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setAutoChangeover(Boolean)
  public void setAwayCooling(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.setAwayHeating(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setBitmask(List)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setCooling(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setDryAir(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.setEnergySaveCooling(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv2.ThermostatSetpointSupportedReport.setEnergySaveHeating(Boolean)
  public void setFullPower(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setFurnace(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setHeating(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setMoistAir(Boolean)
  public void hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.setNone(Boolean)
  public List hubitat.zwave.commands.thermostatsetpointv1.ThermostatSetpointSupportedReport.super$2$getPayload()
]
class hubitat.zwave.commands.timeparametersv1.TimeParametersGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timeparametersv1.TimeParametersGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timeparametersv1.TimeParametersReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getHourUtc()
  public Short getMinuteUtc()
  public Short getMonth()
  public List getPayload()
  public Short getSecondUtc()
  public Integer getYear()
  public void setDay(Short)
  public void setHourUtc(Short)
  public void setMinuteUtc(Short)
  public void setMonth(Short)
  public void setSecondUtc(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timeparametersv1.TimeParametersReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getHourUtc()
  public Short getMinuteUtc()
  public Short getMonth()
  public List getPayload()
  public Short getSecondUtc()
  public Integer getYear()
  public void setDay(Short)
  public void setHourUtc(Short)
  public void setMinuteUtc(Short)
  public void setMonth(Short)
  public void setSecondUtc(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timeparametersv1.TimeParametersSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getHourUtc()
  public Short getMinuteUtc()
  public Short getMonth()
  public List getPayload()
  public Short getSecondUtc()
  public Integer getYear()
  public void setDay(Short)
  public void setHourUtc(Short)
  public void setMinuteUtc(Short)
  public void setMonth(Short)
  public void setSecondUtc(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timeparametersv1.TimeParametersSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getHourUtc()
  public Short getMinuteUtc()
  public Short getMonth()
  public List getPayload()
  public Short getSecondUtc()
  public Integer getYear()
  public void setDay(Short)
  public void setHourUtc(Short)
  public void setMinuteUtc(Short)
  public void setMonth(Short)
  public void setSecondUtc(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev1.DateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev1.DateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev1.DateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getMonth()
  public List getPayload()
  public Integer getYear()
  public void setDay(Short)
  public void setMonth(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev1.DateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDay()
  public Short getMonth()
  public List getPayload()
  public Integer getYear()
  public void setDay(Short)
  public void setMonth(Short)
  public void setYear(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev1.TimeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev1.TimeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev1.TimeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public List getPayload()
  public Boolean getRtcFailure()
  public Short getSecondLocalTime()
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setRtcFailure(Boolean)
  public void setSecondLocalTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev1.TimeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getHourLocalTime()
  public Short getMinuteLocalTime()
  public List getPayload()
  public Boolean getRtcFailure()
  public Short getSecondLocalTime()
  public void setHourLocalTime(Short)
  public void setMinuteLocalTime(Short)
  public void setRtcFailure(Boolean)
  public void setSecondLocalTime(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev2.DateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.timev1.DateGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.timev1.DateGet.getPayload()
  public List hubitat.zwave.commands.timev1.DateGet.super$2$getPayload()
]
class hubitat.zwave.commands.timev2.DateGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.timev1.DateGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.timev1.DateGet.getPayload()
  public List hubitat.zwave.commands.timev1.DateGet.super$2$getPayload()
]
class hubitat.zwave.commands.timev2.DateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.timev1.DateReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.timev1.DateReport.getDay()
  public Short hubitat.zwave.commands.timev1.DateReport.getMonth()
  public List hubitat.zwave.commands.timev1.DateReport.getPayload()
  public Integer hubitat.zwave.commands.timev1.DateReport.getYear()
  public void hubitat.zwave.commands.timev1.DateReport.setDay(Short)
  public void hubitat.zwave.commands.timev1.DateReport.setMonth(Short)
  public void hubitat.zwave.commands.timev1.DateReport.setYear(Integer)
  public List hubitat.zwave.commands.timev1.DateReport.super$2$getPayload()
]
class hubitat.zwave.commands.timev2.DateReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.timev1.DateReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.timev1.DateReport.getDay()
  public Short hubitat.zwave.commands.timev1.DateReport.getMonth()
  public List hubitat.zwave.commands.timev1.DateReport.getPayload()
  public Integer hubitat.zwave.commands.timev1.DateReport.getYear()
  public void hubitat.zwave.commands.timev1.DateReport.setDay(Short)
  public void hubitat.zwave.commands.timev1.DateReport.setMonth(Short)
  public void hubitat.zwave.commands.timev1.DateReport.setYear(Integer)
  public List hubitat.zwave.commands.timev1.DateReport.super$2$getPayload()
]
class hubitat.zwave.commands.timev2.TimeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.timev1.TimeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.timev1.TimeGet.getPayload()
  public List hubitat.zwave.commands.timev1.TimeGet.super$2$getPayload()
]
class hubitat.zwave.commands.timev2.TimeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.timev1.TimeGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.timev1.TimeGet.getPayload()
  public List hubitat.zwave.commands.timev1.TimeGet.super$2$getPayload()
]
class hubitat.zwave.commands.timev2.TimeOffsetGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev2.TimeOffsetGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev2.TimeOffsetReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDayEndDst()
  public Short getDayStartDst()
  public Short getHourEndDst()
  public Short getHourStartDst()
  public Short getHourTzo()
  public Short getMinuteOffsetDst()
  public Short getMinuteTzo()
  public Short getMonthEndDst()
  public Short getMonthStartDst()
  public List getPayload()
  public Short getSignOffsetDst()
  public Short getSignTzo()
  public void setDayEndDst(Short)
  public void setDayStartDst(Short)
  public void setHourEndDst(Short)
  public void setHourStartDst(Short)
  public void setHourTzo(Short)
  public void setMinuteOffsetDst(Short)
  public void setMinuteTzo(Short)
  public void setMonthEndDst(Short)
  public void setMonthStartDst(Short)
  public void setSignOffsetDst(Short)
  public void setSignTzo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev2.TimeOffsetReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDayEndDst()
  public Short getDayStartDst()
  public Short getHourEndDst()
  public Short getHourStartDst()
  public Short getHourTzo()
  public Short getMinuteOffsetDst()
  public Short getMinuteTzo()
  public Short getMonthEndDst()
  public Short getMonthStartDst()
  public List getPayload()
  public Short getSignOffsetDst()
  public Short getSignTzo()
  public void setDayEndDst(Short)
  public void setDayStartDst(Short)
  public void setHourEndDst(Short)
  public void setHourStartDst(Short)
  public void setHourTzo(Short)
  public void setMinuteOffsetDst(Short)
  public void setMinuteTzo(Short)
  public void setMonthEndDst(Short)
  public void setMonthStartDst(Short)
  public void setSignOffsetDst(Short)
  public void setSignTzo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev2.TimeOffsetSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDayEndDst()
  public Short getDayStartDst()
  public Short getHourEndDst()
  public Short getHourStartDst()
  public Short getHourTzo()
  public Short getMinuteOffsetDst()
  public Short getMinuteTzo()
  public Short getMonthEndDst()
  public Short getMonthStartDst()
  public List getPayload()
  public Short getSignOffsetDst()
  public Short getSignTzo()
  public void setDayEndDst(Short)
  public void setDayStartDst(Short)
  public void setHourEndDst(Short)
  public void setHourStartDst(Short)
  public void setHourTzo(Short)
  public void setMinuteOffsetDst(Short)
  public void setMinuteTzo(Short)
  public void setMonthEndDst(Short)
  public void setMonthStartDst(Short)
  public void setSignOffsetDst(Short)
  public void setSignTzo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev2.TimeOffsetSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDayEndDst()
  public Short getDayStartDst()
  public Short getHourEndDst()
  public Short getHourStartDst()
  public Short getHourTzo()
  public Short getMinuteOffsetDst()
  public Short getMinuteTzo()
  public Short getMonthEndDst()
  public Short getMonthStartDst()
  public List getPayload()
  public Short getSignOffsetDst()
  public Short getSignTzo()
  public void setDayEndDst(Short)
  public void setDayStartDst(Short)
  public void setHourEndDst(Short)
  public void setHourStartDst(Short)
  public void setHourTzo(Short)
  public void setMinuteOffsetDst(Short)
  public void setMinuteTzo(Short)
  public void setMonthEndDst(Short)
  public void setMonthStartDst(Short)
  public void setSignOffsetDst(Short)
  public void setSignTzo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.timev2.TimeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.timev1.TimeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.timev1.TimeReport.getHourLocalTime()
  public Short hubitat.zwave.commands.timev1.TimeReport.getMinuteLocalTime()
  public List hubitat.zwave.commands.timev1.TimeReport.getPayload()
  public Boolean hubitat.zwave.commands.timev1.TimeReport.getRtcFailure()
  public Short hubitat.zwave.commands.timev1.TimeReport.getSecondLocalTime()
  public void hubitat.zwave.commands.timev1.TimeReport.setHourLocalTime(Short)
  public void hubitat.zwave.commands.timev1.TimeReport.setMinuteLocalTime(Short)
  public void hubitat.zwave.commands.timev1.TimeReport.setRtcFailure(Boolean)
  public void hubitat.zwave.commands.timev1.TimeReport.setSecondLocalTime(Short)
  public List hubitat.zwave.commands.timev1.TimeReport.super$2$getPayload()
]
class hubitat.zwave.commands.timev2.TimeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.timev1.TimeReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.timev1.TimeReport.getHourLocalTime()
  public Short hubitat.zwave.commands.timev1.TimeReport.getMinuteLocalTime()
  public List hubitat.zwave.commands.timev1.TimeReport.getPayload()
  public Boolean hubitat.zwave.commands.timev1.TimeReport.getRtcFailure()
  public Short hubitat.zwave.commands.timev1.TimeReport.getSecondLocalTime()
  public void hubitat.zwave.commands.timev1.TimeReport.setHourLocalTime(Short)
  public void hubitat.zwave.commands.timev1.TimeReport.setMinuteLocalTime(Short)
  public void hubitat.zwave.commands.timev1.TimeReport.setRtcFailure(Boolean)
  public void hubitat.zwave.commands.timev1.TimeReport.setSecondLocalTime(Short)
  public List hubitat.zwave.commands.timev1.TimeReport.super$2$getPayload()
]
class hubitat.zwave.commands.transportservicev1.CommandFirstFragment:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDatagramSize1()
  public Short getDatagramSize2()
  public List getPayload()
  public Short getSequenceNo()
  public void setChecksum(Integer)
  public void setDatagramSize1(Short)
  public void setDatagramSize2(Short)
  public void setSequenceNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.transportservicev1.CommandFirstFragment:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDatagramSize1()
  public Short getDatagramSize2()
  public List getPayload()
  public Short getSequenceNo()
  public void setChecksum(Integer)
  public void setDatagramSize1(Short)
  public void setDatagramSize2(Short)
  public void setSequenceNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.transportservicev1.CommandFragmentComplete:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSequenceNo()
  public void setSequenceNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.transportservicev1.CommandFragmentComplete:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSequenceNo()
  public void setSequenceNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.transportservicev1.CommandFragmentRequest:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfOffsets()
  public List getPayload()
  public Short getSequenceNo()
  public void setNumberOfOffsets(Short)
  public void setSequenceNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.transportservicev1.CommandFragmentRequest:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNumberOfOffsets()
  public List getPayload()
  public Short getSequenceNo()
  public void setNumberOfOffsets(Short)
  public void setSequenceNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.transportservicev1.CommandFragmentWait:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPendingFragments()
  public void setPendingFragments(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.transportservicev1.CommandFragmentWait:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getPendingFragments()
  public void setPendingFragments(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.transportservicev1.CommandSubsequentFragment:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDatagramOffset1()
  public Short getDatagramOffset2()
  public Short getDatagramSize1()
  public Short getDatagramSize2()
  public List getPayload()
  public Short getSequenceNo()
  public void setChecksum(Integer)
  public void setDatagramOffset1(Short)
  public void setDatagramOffset2(Short)
  public void setDatagramSize1(Short)
  public void setDatagramSize2(Short)
  public void setSequenceNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.transportservicev1.CommandSubsequentFragment:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Integer getChecksum()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getDatagramOffset1()
  public Short getDatagramOffset2()
  public Short getDatagramSize1()
  public Short getDatagramSize2()
  public List getPayload()
  public Short getSequenceNo()
  public void setChecksum(Integer)
  public void setDatagramOffset1(Short)
  public void setDatagramOffset2(Short)
  public void setDatagramSize1(Short)
  public void setDatagramSize2(Short)
  public void setSequenceNo(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.usercodev1.UserCodeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getUserIdentifier()
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.usercodev1.UserCodeGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getUserIdentifier()
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.usercodev1.UserCodeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short USER_ID_STATUS_AVAILABLE_NOT_SET = 0
  public static Short USER_ID_STATUS_OCCUPIED = 1
  public static Short USER_ID_STATUS_RESERVED_BY_ADMINISTRATOR = 2
  public static Short USER_ID_STATUS_STATUS_NOT_AVAILABLE = 254
  public String getUserCode()
  public Short getUserIdStatus()
  public Short getUserIdentifier()
  public void setUserCode(String)
  public void setUserIdStatus(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.usercodev1.UserCodeReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short USER_ID_STATUS_AVAILABLE_NOT_SET = 0
  public static Short USER_ID_STATUS_OCCUPIED = 1
  public static Short USER_ID_STATUS_RESERVED_BY_ADMINISTRATOR = 2
  public static Short USER_ID_STATUS_STATUS_NOT_AVAILABLE = 254
  public String getUserCode()
  public Short getUserIdStatus()
  public Short getUserIdentifier()
  public void setUserCode(String)
  public void setUserIdStatus(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.usercodev1.UserCodeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short USER_ID_STATUS_AVAILABLE_NOT_SET = 0
  public static Short USER_ID_STATUS_OCCUPIED = 1
  public static Short USER_ID_STATUS_RESERVED_BY_ADMINISTRATOR = 2
  public static Short USER_ID_STATUS_STATUS_NOT_AVAILABLE = 254
  public String getUserCode()
  public Short getUserIdStatus()
  public Short getUserIdentifier()
  public void setUserCode(String)
  public void setUserIdStatus(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.usercodev1.UserCodeSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public static Short USER_ID_STATUS_AVAILABLE_NOT_SET = 0
  public static Short USER_ID_STATUS_OCCUPIED = 1
  public static Short USER_ID_STATUS_RESERVED_BY_ADMINISTRATOR = 2
  public static Short USER_ID_STATUS_STATUS_NOT_AVAILABLE = 254
  public String getUserCode()
  public Short getUserIdStatus()
  public Short getUserIdentifier()
  public void setUserCode(String)
  public void setUserIdStatus(Short)
  public void setUserIdentifier(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.usercodev1.UsersNumberGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.usercodev1.UsersNumberGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.usercodev1.UsersNumberReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedUsers()
  public void setSupportedUsers(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.usercodev1.UsersNumberReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getSupportedUsers()
  public void setSupportedUsers(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv1.VersionCommandClassGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRequestedCommandClass()
  public void setRequestedCommandClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv1.VersionCommandClassGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRequestedCommandClass()
  public void setRequestedCommandClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv1.VersionCommandClassReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short getCommandClassVersion()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRequestedCommandClass()
  public void setCommandClassVersion(Short)
  public void setRequestedCommandClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv1.VersionCommandClassReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short getCommandClassVersion()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getRequestedCommandClass()
  public void setCommandClassVersion(Short)
  public void setRequestedCommandClass(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv1.VersionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv1.VersionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv1.VersionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getApplicationSubVersion()
  public Short getApplicationVersion()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getzWaveLibraryType()
  public Short getzWaveProtocolSubVersion()
  public Short getzWaveProtocolVersion()
  public void setApplicationSubVersion(Short)
  public void setApplicationVersion(Short)
  public void setzWaveLibraryType(Short)
  public void setzWaveProtocolSubVersion(Short)
  public void setzWaveProtocolVersion(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv1.VersionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short getApplicationSubVersion()
  public Short getApplicationVersion()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Short getzWaveLibraryType()
  public Short getzWaveProtocolSubVersion()
  public Short getzWaveProtocolVersion()
  public void setApplicationSubVersion(Short)
  public void setApplicationVersion(Short)
  public void setzWaveLibraryType(Short)
  public void setzWaveProtocolSubVersion(Short)
  public void setzWaveProtocolVersion(Short)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv2.VersionCommandClassGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionCommandClassGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionCommandClassGet.getPayload()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassGet.getRequestedCommandClass()
  public void hubitat.zwave.commands.versionv1.VersionCommandClassGet.setRequestedCommandClass(Short)
  public List hubitat.zwave.commands.versionv1.VersionCommandClassGet.super$2$getPayload()
]
class hubitat.zwave.commands.versionv2.VersionCommandClassGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionCommandClassGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionCommandClassGet.getPayload()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassGet.getRequestedCommandClass()
  public void hubitat.zwave.commands.versionv1.VersionCommandClassGet.setRequestedCommandClass(Short)
  public List hubitat.zwave.commands.versionv1.VersionCommandClassGet.super$2$getPayload()
]
class hubitat.zwave.commands.versionv2.VersionCommandClassReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionCommandClassReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassReport.getCommandClassVersion()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionCommandClassReport.getPayload()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassReport.getRequestedCommandClass()
  public void hubitat.zwave.commands.versionv1.VersionCommandClassReport.setCommandClassVersion(Short)
  public void hubitat.zwave.commands.versionv1.VersionCommandClassReport.setRequestedCommandClass(Short)
  public List hubitat.zwave.commands.versionv1.VersionCommandClassReport.super$2$getPayload()
]
class hubitat.zwave.commands.versionv2.VersionCommandClassReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionCommandClassReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassReport.getCommandClassVersion()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionCommandClassReport.getPayload()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassReport.getRequestedCommandClass()
  public void hubitat.zwave.commands.versionv1.VersionCommandClassReport.setCommandClassVersion(Short)
  public void hubitat.zwave.commands.versionv1.VersionCommandClassReport.setRequestedCommandClass(Short)
  public List hubitat.zwave.commands.versionv1.VersionCommandClassReport.super$2$getPayload()
]
class hubitat.zwave.commands.versionv2.VersionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionGet.getPayload()
  public List hubitat.zwave.commands.versionv1.VersionGet.super$2$getPayload()
]
class hubitat.zwave.commands.versionv2.VersionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionGet.getPayload()
  public List hubitat.zwave.commands.versionv1.VersionGet.super$2$getPayload()
]
class hubitat.zwave.commands.versionv2.VersionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short hubitat.zwave.commands.versionv1.VersionReport.getApplicationSubVersion()
  public Short hubitat.zwave.commands.versionv1.VersionReport.getApplicationVersion()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getFirmware0SubVersion()
  public Short getFirmware0Version()
  public Short getFirmwareTargets()
  public Short getHardwareVersion()
  public List getPayload()
  public List getTargetVersions()
  public Short getzWaveLibraryType()
  public Short getzWaveProtocolSubVersion()
  public Short getzWaveProtocolVersion()
  public void hubitat.zwave.commands.versionv1.VersionReport.setApplicationSubVersion(Short)
  public void hubitat.zwave.commands.versionv1.VersionReport.setApplicationVersion(Short)
  public void setFirmware0SubVersion(Short)
  public void setFirmware0Version(Short)
  public void setFirmwareTargets(Short)
  public void setHardwareVersion(Short)
  public void setTargetVersions(List)
  public void setzWaveLibraryType(Short)
  public void setzWaveProtocolSubVersion(Short)
  public void setzWaveProtocolVersion(Short)
  public List hubitat.zwave.commands.versionv1.VersionReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getzWaveLibraryType()
  public Short super$3$getzWaveProtocolSubVersion()
  public Short super$3$getzWaveProtocolVersion()
  public void super$3$setzWaveLibraryType(Short)
  public void super$3$setzWaveProtocolSubVersion(Short)
  public void super$3$setzWaveProtocolVersion(Short)
]
class hubitat.zwave.commands.versionv2.VersionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short hubitat.zwave.commands.versionv1.VersionReport.getApplicationSubVersion()
  public Short hubitat.zwave.commands.versionv1.VersionReport.getApplicationVersion()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getFirmware0SubVersion()
  public Short getFirmware0Version()
  public Short getFirmwareTargets()
  public Short getHardwareVersion()
  public List getPayload()
  public List getTargetVersions()
  public Short getzWaveLibraryType()
  public Short getzWaveProtocolSubVersion()
  public Short getzWaveProtocolVersion()
  public void hubitat.zwave.commands.versionv1.VersionReport.setApplicationSubVersion(Short)
  public void hubitat.zwave.commands.versionv1.VersionReport.setApplicationVersion(Short)
  public void setFirmware0SubVersion(Short)
  public void setFirmware0Version(Short)
  public void setFirmwareTargets(Short)
  public void setHardwareVersion(Short)
  public void setTargetVersions(List)
  public void setzWaveLibraryType(Short)
  public void setzWaveProtocolSubVersion(Short)
  public void setzWaveProtocolVersion(Short)
  public List hubitat.zwave.commands.versionv1.VersionReport.super$2$getPayload()
  public String super$3$getCMD()
  public List super$3$getPayload()
  public Short super$3$getzWaveLibraryType()
  public Short super$3$getzWaveProtocolSubVersion()
  public Short super$3$getzWaveProtocolVersion()
  public void super$3$setzWaveLibraryType(Short)
  public void super$3$setzWaveProtocolSubVersion(Short)
  public void super$3$setzWaveProtocolVersion(Short)
]
class hubitat.zwave.commands.versionv3.VersionCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Boolean getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Boolean getVersion()
  public Boolean getZwaveSoftware()
  public void setCommandClass(Boolean)
  public void setVersion(Boolean)
  public void setZwaveSoftware(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Boolean getCommandClass()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public Boolean getVersion()
  public Boolean getZwaveSoftware()
  public void setCommandClass(Boolean)
  public void setVersion(Boolean)
  public void setZwaveSoftware(Boolean)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionCommandClassGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionCommandClassGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionCommandClassGet.getPayload()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassGet.getRequestedCommandClass()
  public void hubitat.zwave.commands.versionv1.VersionCommandClassGet.setRequestedCommandClass(Short)
  public List hubitat.zwave.commands.versionv1.VersionCommandClassGet.super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionCommandClassGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionCommandClassGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionCommandClassGet.getPayload()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassGet.getRequestedCommandClass()
  public void hubitat.zwave.commands.versionv1.VersionCommandClassGet.setRequestedCommandClass(Short)
  public List hubitat.zwave.commands.versionv1.VersionCommandClassGet.super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionCommandClassReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionCommandClassReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassReport.getCommandClassVersion()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionCommandClassReport.getPayload()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassReport.getRequestedCommandClass()
  public void hubitat.zwave.commands.versionv1.VersionCommandClassReport.setCommandClassVersion(Short)
  public void hubitat.zwave.commands.versionv1.VersionCommandClassReport.setRequestedCommandClass(Short)
  public List hubitat.zwave.commands.versionv1.VersionCommandClassReport.super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionCommandClassReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionCommandClassReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassReport.getCommandClassVersion()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionCommandClassReport.getPayload()
  public Short hubitat.zwave.commands.versionv1.VersionCommandClassReport.getRequestedCommandClass()
  public void hubitat.zwave.commands.versionv1.VersionCommandClassReport.setCommandClassVersion(Short)
  public void hubitat.zwave.commands.versionv1.VersionCommandClassReport.setRequestedCommandClass(Short)
  public List hubitat.zwave.commands.versionv1.VersionCommandClassReport.super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionGet.getPayload()
  public List hubitat.zwave.commands.versionv1.VersionGet.super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.versionv1.VersionGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.versionv1.VersionGet.getPayload()
  public List hubitat.zwave.commands.versionv1.VersionGet.super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short hubitat.zwave.commands.versionv1.VersionReport.getApplicationSubVersion()
  public Short hubitat.zwave.commands.versionv1.VersionReport.getApplicationVersion()
  public String hubitat.zwave.commands.versionv2.VersionReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getFirmware0SubVersion()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getFirmware0Version()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getFirmwareTargets()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getHardwareVersion()
  public List hubitat.zwave.commands.versionv2.VersionReport.getPayload()
  public List hubitat.zwave.commands.versionv2.VersionReport.getTargetVersions()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getzWaveLibraryType()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getzWaveProtocolSubVersion()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getzWaveProtocolVersion()
  public void hubitat.zwave.commands.versionv1.VersionReport.setApplicationSubVersion(Short)
  public void hubitat.zwave.commands.versionv1.VersionReport.setApplicationVersion(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setFirmware0SubVersion(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setFirmware0Version(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setFirmwareTargets(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setHardwareVersion(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setTargetVersions(List)
  public void hubitat.zwave.commands.versionv2.VersionReport.setzWaveLibraryType(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setzWaveProtocolSubVersion(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setzWaveProtocolVersion(Short)
  public List hubitat.zwave.commands.versionv1.VersionReport.super$2$getPayload()
  public String hubitat.zwave.commands.versionv2.VersionReport.super$3$getCMD()
  public List hubitat.zwave.commands.versionv2.VersionReport.super$3$getPayload()
  public Short hubitat.zwave.commands.versionv2.VersionReport.super$3$getzWaveLibraryType()
  public Short hubitat.zwave.commands.versionv2.VersionReport.super$3$getzWaveProtocolSubVersion()
  public Short hubitat.zwave.commands.versionv2.VersionReport.super$3$getzWaveProtocolVersion()
  public void hubitat.zwave.commands.versionv2.VersionReport.super$3$setzWaveLibraryType(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.super$3$setzWaveProtocolSubVersion(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.super$3$setzWaveProtocolVersion(Short)
]
class hubitat.zwave.commands.versionv3.VersionReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Short hubitat.zwave.commands.versionv1.VersionReport.getApplicationSubVersion()
  public Short hubitat.zwave.commands.versionv1.VersionReport.getApplicationVersion()
  public String hubitat.zwave.commands.versionv2.VersionReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getFirmware0SubVersion()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getFirmware0Version()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getFirmwareTargets()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getHardwareVersion()
  public List hubitat.zwave.commands.versionv2.VersionReport.getPayload()
  public List hubitat.zwave.commands.versionv2.VersionReport.getTargetVersions()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getzWaveLibraryType()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getzWaveProtocolSubVersion()
  public Short hubitat.zwave.commands.versionv2.VersionReport.getzWaveProtocolVersion()
  public void hubitat.zwave.commands.versionv1.VersionReport.setApplicationSubVersion(Short)
  public void hubitat.zwave.commands.versionv1.VersionReport.setApplicationVersion(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setFirmware0SubVersion(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setFirmware0Version(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setFirmwareTargets(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setHardwareVersion(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setTargetVersions(List)
  public void hubitat.zwave.commands.versionv2.VersionReport.setzWaveLibraryType(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setzWaveProtocolSubVersion(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.setzWaveProtocolVersion(Short)
  public List hubitat.zwave.commands.versionv1.VersionReport.super$2$getPayload()
  public String hubitat.zwave.commands.versionv2.VersionReport.super$3$getCMD()
  public List hubitat.zwave.commands.versionv2.VersionReport.super$3$getPayload()
  public Short hubitat.zwave.commands.versionv2.VersionReport.super$3$getzWaveLibraryType()
  public Short hubitat.zwave.commands.versionv2.VersionReport.super$3$getzWaveProtocolSubVersion()
  public Short hubitat.zwave.commands.versionv2.VersionReport.super$3$getzWaveProtocolVersion()
  public void hubitat.zwave.commands.versionv2.VersionReport.super$3$setzWaveLibraryType(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.super$3$setzWaveProtocolSubVersion(Short)
  public void hubitat.zwave.commands.versionv2.VersionReport.super$3$setzWaveProtocolVersion(Short)
]
class hubitat.zwave.commands.versionv3.VersionZWaveSoftwareGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionZWaveSoftwareGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionZWaveSoftwareReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Integer getApplicationBuild()
  public Integer getApplicationVersion()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFrameworkBuild()
  public Integer getFrameworkVersion()
  public Integer getInterfaceBuild()
  public Integer getInterfaceVersion()
  public List getPayload()
  public Integer getProtocolBuild()
  public Integer getProtocolVersion()
  public Integer getSdkVersion()
  public void setApplicationBuild(Integer)
  public void setApplicationVersion(Integer)
  public void setFrameworkBuild(Integer)
  public void setFrameworkVersion(Integer)
  public void setInterfaceBuild(Integer)
  public void setInterfaceVersion(Integer)
  public void setProtocolBuild(Integer)
  public void setProtocolVersion(Integer)
  public void setSdkVersion(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.versionv3.VersionZWaveSoftwareReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public Integer getApplicationBuild()
  public Integer getApplicationVersion()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getFrameworkBuild()
  public Integer getFrameworkVersion()
  public Integer getInterfaceBuild()
  public Integer getInterfaceVersion()
  public List getPayload()
  public Integer getProtocolBuild()
  public Integer getProtocolVersion()
  public Integer getSdkVersion()
  public void setApplicationBuild(Integer)
  public void setApplicationVersion(Integer)
  public void setFrameworkBuild(Integer)
  public void setFrameworkVersion(Integer)
  public void setInterfaceBuild(Integer)
  public void setInterfaceVersion(Integer)
  public void setProtocolBuild(Integer)
  public void setProtocolVersion(Integer)
  public void setSdkVersion(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeid()
  public List getPayload()
  public Integer getSeconds()
  public void setNodeid(Short)
  public void setSeconds(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeid()
  public List getPayload()
  public Integer getSeconds()
  public void setNodeid(Short)
  public void setSeconds(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeid()
  public List getPayload()
  public Integer getSeconds()
  public void setNodeid(Short)
  public void setSeconds(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short getNodeid()
  public List getPayload()
  public Integer getSeconds()
  public void setNodeid(Short)
  public void setSeconds(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv1.WakeUpNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv1.WakeUpNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List getPayload()
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDefaultWakeUpIntervalSeconds()
  public Integer getMaximumWakeUpIntervalSeconds()
  public Integer getMinimumWakeUpIntervalSeconds()
  public List getPayload()
  public Integer getWakeUpIntervalStepSeconds()
  public void setDefaultWakeUpIntervalSeconds(Integer)
  public void setMaximumWakeUpIntervalSeconds(Integer)
  public void setMinimumWakeUpIntervalSeconds(Integer)
  public void setWakeUpIntervalStepSeconds(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer getDefaultWakeUpIntervalSeconds()
  public Integer getMaximumWakeUpIntervalSeconds()
  public Integer getMinimumWakeUpIntervalSeconds()
  public List getPayload()
  public Integer getWakeUpIntervalStepSeconds()
  public void setDefaultWakeUpIntervalSeconds(Integer)
  public void setMaximumWakeUpIntervalSeconds(Integer)
  public void setMinimumWakeUpIntervalSeconds(Integer)
  public void setWakeUpIntervalStepSeconds(Integer)
  public List super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpIntervalGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpIntervalGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpIntervalReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getNodeid()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getPayload()
  public Integer hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getSeconds()
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.setNodeid(Short)
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.setSeconds(Integer)
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpIntervalReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getNodeid()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getPayload()
  public Integer hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getSeconds()
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.setNodeid(Short)
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.setSeconds(Integer)
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpIntervalSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getNodeid()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getPayload()
  public Integer hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getSeconds()
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.setNodeid(Short)
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.setSeconds(Integer)
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpIntervalSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getNodeid()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getPayload()
  public Integer hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getSeconds()
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.setNodeid(Short)
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.setSeconds(Integer)
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpNoMoreInformation:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpNoMoreInformation:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpNotification.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNotification.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNotification.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv2.WakeUpNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpNotification.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNotification.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNotification.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpIntervalCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesGet.getPayload()
  public List hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesGet.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpIntervalCapabilitiesGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesGet.getPayload()
  public List hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesGet.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpIntervalCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.getDefaultWakeUpIntervalSeconds()
  public Integer hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.getMaximumWakeUpIntervalSeconds()
  public Integer hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.getMinimumWakeUpIntervalSeconds()
  public List getPayload()
  public Integer hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.getWakeUpIntervalStepSeconds()
  public Boolean getWakeUpOnDemandSupport()
  public void hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.setDefaultWakeUpIntervalSeconds(Integer)
  public void hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.setMaximumWakeUpIntervalSeconds(Integer)
  public void hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.setMinimumWakeUpIntervalSeconds(Integer)
  public void hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.setWakeUpIntervalStepSeconds(Integer)
  public void setWakeUpOnDemandSupport(Boolean)
  public List hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpIntervalCapabilitiesReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Integer hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.getDefaultWakeUpIntervalSeconds()
  public Integer hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.getMaximumWakeUpIntervalSeconds()
  public Integer hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.getMinimumWakeUpIntervalSeconds()
  public List getPayload()
  public Integer hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.getWakeUpIntervalStepSeconds()
  public Boolean getWakeUpOnDemandSupport()
  public void hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.setDefaultWakeUpIntervalSeconds(Integer)
  public void hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.setMaximumWakeUpIntervalSeconds(Integer)
  public void hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.setMinimumWakeUpIntervalSeconds(Integer)
  public void hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.setWakeUpIntervalStepSeconds(Integer)
  public void setWakeUpOnDemandSupport(Boolean)
  public List hubitat.zwave.commands.wakeupv2.WakeUpIntervalCapabilitiesReport.super$2$getPayload()
  public List super$3$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpIntervalGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpIntervalGet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalGet.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpIntervalReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getNodeid()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getPayload()
  public Integer hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getSeconds()
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.setNodeid(Short)
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.setSeconds(Integer)
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpIntervalReport:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getNodeid()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getPayload()
  public Integer hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.getSeconds()
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.setNodeid(Short)
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.setSeconds(Integer)
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalReport.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpIntervalSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getNodeid()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getPayload()
  public Integer hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getSeconds()
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.setNodeid(Short)
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.setSeconds(Integer)
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpIntervalSet:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public Short hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getNodeid()
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getPayload()
  public Integer hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.getSeconds()
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.setNodeid(Short)
  public void hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.setSeconds(Integer)
  public List hubitat.zwave.commands.wakeupv1.WakeUpIntervalSet.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpNoMoreInformation:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpNoMoreInformation:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNoMoreInformation.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpNotification.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNotification.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNotification.super$2$getPayload()
]
class hubitat.zwave.commands.wakeupv3.WakeUpNotification:
Methods:[
  public String hubitat.zwave.Command.format()
  public String hubitat.zwave.commands.wakeupv1.WakeUpNotification.getCMD()
  public Short hubitat.zwave.Command.getCommandClassId()
  public Short hubitat.zwave.Command.getCommandId()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNotification.getPayload()
  public List hubitat.zwave.commands.wakeupv1.WakeUpNotification.super$2$getPayload()
]